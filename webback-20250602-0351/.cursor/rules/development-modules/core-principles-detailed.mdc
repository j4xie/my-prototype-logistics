---
description:
globs:
alwaysApply: false
---
---
description: 核心开发原则详细指导 - 所有代码开发和修改活动的详细指导时 - 项目管理和文档维护的深度规范时 - 代码审查和质量控制的具体标准时 - 新团队成员的完整培训指导时
globs: 
alwaysApply: false
---

# 核心开发原则详细指导

<!-- migrated-from: development-principles-always.mdc -->
<!-- migration-date: 2025-02-02 -->
<!-- authority: 详细开发原则，被主控规则引用 -->

## 📖 **详细使用场景**
- 所有代码开发和修改活动的详细指导
- 项目管理和文档维护的深度规范
- 代码审查和质量控制的具体标准
- 新团队成员的完整培训指导

## 🎯 **项目理解与上下文详细指导**

### **目录结构理解要求**
- **始终参考** @DIRECTORY_STRUCTURE.md 了解项目目录结构和组织方式
- **根据工作类型参考相应文档**：
  - **代码开发**：查看 web-app-next/README.md 和相关任务文档
  - **重构工作**：参考 refactor/ 目录下的计划和任务文档
  - **文档维护**：参考 docs/ 目录下的相关文档

### **docs目录阅读指导详细说明**
- **架构相关工作**：必读 [docs/architecture/design-principles.md](mdc:docs/architecture/design-principles.md)
  - 理解系统架构设计原则
  - 掌握模块间依赖关系
  - 了解技术选型依据
- **API开发/集成**：必读 [docs/api/](mdc:docs/api) 相关文档
  - API接口设计规范
  - 数据格式和错误处理标准
  - 认证和授权机制
- **组件开发**：参考 [docs/components/](mdc:docs/components) 相关文档
  - UI组件库使用指南
  - 组件设计模式
  - 可重用性最佳实践
- **项目规划/管理**：查看 [docs/project-management/](mdc:docs/project-management) 相关文档
  - 项目管理流程
  - 里程碑和交付计划
  - 风险管理策略
- **新人入门**：阅读 [docs/guides/getting-started.md](mdc:docs/guides/getting-started.md)
  - 开发环境搭建
  - 项目架构概览
  - 开发工作流程

### **信息验证和准确性要求**
- **验证信息准确性**：不做无证据的假设或推测
- **逐文件进行更改**：给用户发现错误的机会
- **实时沟通验证**：确保理解用户需求后再执行

### **目录结构同步管理详细规范**
**任何目录结构变更都必须同步更新目录结构文档**：

#### **DIRECTORY_STRUCTURE.md管理**
- **功能**：更新实际目录树结构，添加/删除具体文件路径（类似`tree`命令输出）
- **更新时机**：每次文件/目录创建、删除、移动时
- **内容要求**：反映当前项目的真实目录结构
- **格式要求**：树状结构，清晰层级关系

#### **docs/directory-structure-changelog.md管理**
- **功能**：记录变更历史（何时、为何、新增/删除了什么文件/目录）
- **记录要求**：包含变更时间、变更原因、具体变更内容
- **职责区分**：前者记录当前状态，后者记录历史变更和原因

#### **错误示例预防**
- ❌ **严禁**：在changelog中记录workflow执行过程
- ❌ **严禁**：在DIRECTORY_STRUCTURE.md中记录变更历史
- ✅ **正确**：架构设计原则在 [docs/architecture/design-principles.md](mdc:docs/architecture/design-principles.md) 中维护
- ✅ **正确**：未来演进计划在 [docs/project-management/evolution-roadmap.md](mdc:docs/project-management/evolution-roadmap.md) 中维护

## 💻 **代码质量标准详细规范**

### **命名规范详细要求**
- **变量名**：使用描述性、明确的变量名和函数名
  - ✅ 正确：`const userAuthenticationStatus` 
  - ❌ 错误：`const status`, `const data`, `const result`
- **函数名**：清晰表达函数功能和返回值
  - ✅ 正确：`calculateUserPermissionLevel()`, `validateEmailFormat()`
  - ❌ 错误：`process()`, `handle()`, `check()`

### **编码风格一致性**
- **遵循项目现有编码风格**保持一致性
- **代码格式**：统一的缩进、空格、换行规则
- **注释规范**：关键逻辑必须有清晰注释
- **导入顺序**：第三方库 → 项目内部模块 → 相对路径导入

### **架构设计原则**
- **模块化设计**：提高可维护性和可重用性
- **单一职责**：每个模块/函数承担明确的单一责任
- **低耦合高内聚**：减少模块间依赖，增强内部逻辑关联
- **接口抽象**：通过接口隔离具体实现

### **性能和安全考虑**
- **优先考虑代码性能和安全影响**
- **性能优化**：避免不必要的计算和内存使用
- **安全防护**：输入验证、SQL注入防护、XSS防护
- **错误处理**：预期和非预期错误的优雅处理

### **测试覆盖要求**
- **为新代码或修改代码提供测试覆盖**
- **单元测试**：覆盖核心业务逻辑
- **集成测试**：验证模块间协作
- **边缘情况测试**：考虑并处理边缘情况

### **代码健壮性要求**
- **实现健壮的错误处理和日志记录**
- **错误处理**：明确的错误类型和处理策略
- **日志记录**：关键操作和错误的详细日志
- **常量管理**：将硬编码值替换为命名常量
- **断言验证**：使用断言验证假设和尽早捕获错误

## ✅ **验证与完成度标准详细协议**

### **验证优先原则详细说明**
- **基本要求**：任何完成度声明必须基于实际功能验证，禁止基于代码变更推测
- **验证时机**：代码编写完成后、提交前、部署前
- **验证深度**：不仅验证代码编译，还要验证实际功能正确性

### **关键路径识别详细方法**
- **核心组件识别**：API客户端、核心Hook、状态管理等项目核心组件
- **给予特别验证关注**：增加测试覆盖、多场景验证、性能测试
- **依赖关系分析**：识别关键路径上的依赖组件

### **质疑响应机制详细流程**
- **触发条件**：当用户质疑完成度时
- **响应协议**：立即启动深度重新验证流程
- **承认态度**：承认评估可能过于乐观
- **重新验证**：完整执行验证标准，提供客观结果

### **分层验证要求详细标准**
**按编译→构建→测试→功能验证→集成测试的顺序进行验证**：

1. **编译验证**：TypeScript/JavaScript代码无语法错误
2. **构建验证**：项目能够成功构建，无依赖错误
3. **测试验证**：单元测试、集成测试通过
4. **功能验证**：核心业务功能正常工作
5. **集成验证**：与其他系统/模块的集成正常

### **实证完成标准详细要求**
- **基本标准**：声称任务完成前必须通过实际运行和功能测试验证
- **证据要求**：提供验证截图、测试报告、运行日志等证据
- **覆盖要求**：核心功能、边缘情况、错误处理都要验证

## 🏗️ **架构决策责任详细规范**

### **影响评估要求详细方法**
- **评估时机**：重大架构变更前必须评估长期影响和技术债务成本
- **评估维度**：技术复杂度、维护成本、性能影响、扩展性
- **成本量化**：用时间、人力、风险等可量化指标评估

### **决策透明化详细要求**
- **记录要求**：清晰记录架构决策的动机、权衡和预期后果
- **文档位置**：在项目架构文档中明确记录
- **内容标准**：包含问题背景、解决方案选择、权衡分析、预期影响

### **后果跟踪义务详细机制**
- **跟踪链条**：建立决策-影响-后果的追踪链条
- **定期回顾**：定期回顾决策效果
- **修正机制**：发现问题时的修正和优化流程

## 📋 **任务执行原则详细指导**

### **功能开发详细流程**
- **计划遵循**：如存在 implementation-plan.mdc，严格遵循并完成后添加"Done"标记
- **步骤执行**：按照计划的步骤顺序执行
- **进度跟踪**：及时更新执行进度和遇到的问题

### **重构工作详细指导**
- **文档依据**：遵循相应重构阶段的任务文档和计划
- **影响评估**：评估重构对现有功能的影响
- **渐进执行**：采用渐进式重构，减少风险

### **维护工作详细原则**
- **优先级**：优先保持现有结构和功能的完整性
- **兼容性**：确保维护工作不破坏现有功能
- **文档更新**：及时更新相关文档和说明

## 🔧 **Phase-3规则使用指南详细说明**

当进行Phase-3技术栈现代化工作时，根据具体工作内容选择对应规则：

### **规则选择表详细说明**
| 工作内容 | 使用规则 | 关键标识词 | 详细说明 |
|----------|----------|-----------|----------|
| 开始Phase-3、任务规划、进度跟踪 | `refactor-phase3-agent` | 规划、启动、协调、进度 | 项目管理和协调工作 |
| 架构重构、技术栈升级、债务清理 | `refactor-phase3-core-agent` | 重构、迁移、技术栈、债务 | 具体技术实施工作 |
| 任务验证、功能测试、质疑响应 | `refactor-phase3-validation-agent` | 测试、验证、质疑、功能 | 质量保证和验证工作 |

### **典型工作流程详细步骤**
```bash
1. 任务启动 → 使用 refactor-phase3-agent
   场景："开始TASK-P3-016A" / "Phase-3进展如何"
   执行：项目规划、任务分解、进度跟踪

2. 执行变更 → 使用 refactor-phase3-core-agent  
   场景："修复useApi Hook" / "迁移到Zustand"
   执行：具体技术实施、代码重构、架构优化

3. 验证结果 → 使用 refactor-phase3-validation-agent
   场景："验证任务完成" / "用户质疑功能"
   执行：功能验证、质量检查、问题响应
```

### **快速判断方法详细指导**
- **我要做什么？** → `refactor-phase3-agent` (任务管理)
  - 明确任务目标和范围
  - 制定执行计划
  - 协调资源和进度
- **我在改代码** → `refactor-phase3-core-agent` (架构变更)  
  - 具体技术实施
  - 代码重构和优化
  - 架构调整和改进
- **我要测试验证** → `refactor-phase3-validation-agent` (验证流程)
  - 功能测试和验证
  - 质量检查和评估
  - 问题排查和修复

## 📝 **沟通规范详细标准**

### **语言使用规范**
- **不使用道歉性语言**：避免"抱歉"、"不好意思"等表达
- **避免提供理解反馈或冗余确认**：直接回应问题，不做多余确认
- **不主动提供摘要**：除非用户明确要求

### **信息提供规范**
- **不讨论当前实现**：除非解释更改影响时需要
- **提供真实文件链接**：非上下文生成的文件
- **不发明超出明确请求的更改**：严格按照用户要求执行

### **工作方式规范**
- **保留现有代码结构和不相关功能**：不做无关修改
- **单块编辑**：避免多步指令
- **不建议空白更改或不必要的更新**：只做必要的修改

## 📖 **实践示例详细说明**

### **正确的工作流程示例**

#### **代码开发场景详细步骤**
1. **查看 @DIRECTORY_STRUCTURE.md 了解项目结构**
   - 理解项目组织方式
   - 确定文件存放位置
   - 了解依赖关系
2. **检查 web-app-next/README.md 了解具体开发规范**
   - 技术栈要求
   - 编码规范
   - 构建和部署流程
3. **如有 implementation-plan.mdc，遵循其步骤**
   - 按照计划执行
   - 标记完成进度
   - 记录遇到的问题
4. **使用描述性变量名**：`const userAuthenticationStatus` 而不是 `const status`
5. **添加错误处理和测试用例**
   - 预期错误处理
   - 边缘情况考虑
   - 单元测试覆盖
6. **完成后添加相应标记和总结**

#### **重构工作场景详细步骤**
1. **查看 @DIRECTORY_STRUCTURE.md 了解当前结构**
2. **参考 refactor/phase-2/ 或 refactor/phase-3/ 下的相关计划和任务**
3. **按照重构文档中的步骤执行**
4. **在任务文档中记录变更和进度**

### **错误的工作方式示例**

#### **避免的错误行为**
1. **直接开始工作而不了解项目结构和上下文**
2. **强制应用不存在或不适用的计划文档**
3. **使用模糊的变量名**：`const data`, `const result`
4. **忽略错误处理**：假设所有操作都会成功
5. **修改代码后不更新相关文档或任务记录**
6. **提供道歉性回复**："抱歉，我应该..."
7. **建议不必要的空白或格式更改**
8. **在重构工作中强制遵循开发规范而忽略重构计划**

---

**文档维护信息**：
- **迁移来源**：development-principles-always.mdc
- **迁移日期**：2025-02-02
- **完整性**：100%内容保持，增加详细说明
- **引用方式**：被 development-management-unified.mdc 主控规则引用

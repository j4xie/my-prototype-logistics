---
description: 
globs: 
alwaysApply: false
---
---
description: 项目管理与质量控制详细规范 - 修改项目文档时的完整指导时 - 更新README或任务列表时的规范流程时 - 管理重构阶段文档时的质量控制时 - 项目状态跟踪和进度管理时
globs: 
alwaysApply: false
---

# 项目管理与质量控制详细规范

<!-- migrated-from: project-management-auto.mdc -->
<!-- migration-date: 2025-02-02 -->
<!-- authority: 详细项目管理规范，被主控规则引用 -->

## 📖 **详细使用场景**
- 修改项目文档时的完整指导
- 更新README或任务列表时的规范流程
- 管理重构阶段文档时的质量控制
- 项目状态跟踪和进度管理
- 技术债务评估和管理
- 架构决策记录和跟踪

## 🚨 **项目管理质量控制规则详细说明** (基于实际问题经验)

### **任务完成度报告真实性详细协议** (杜绝虚假进度)

#### **严禁行为详细说明**
- ❌ **严禁基于预期的完成度报告**: 
  - 不能基于"代码已写完"就声称任务完成
  - 不能基于"理论上应该工作"进行状态更新
  - 不能基于"大部分功能实现"声称接近完成
  - 任务状态必须基于实际验证结果

#### **技术验证优先详细要求**
- ✅ **技术验证优先**: 声称"100%完成"前必须通过技术验收标准
  - **编译验证**: 代码无语法错误，TypeScript类型检查通过
  - **构建验证**: 项目能够成功构建，无依赖冲突
  - **功能验证**: 核心功能在实际环境中正常工作
  - **集成验证**: 与其他模块的集成无问题
  - **性能验证**: 满足预期的性能指标

#### **问题透明化详细机制**
- ✅ **问题透明化**: 发现技术债务或构建问题必须立即如实记录
  - **即时记录**: 发现问题后24小时内记录到相关文档
  - **影响评估**: 评估问题对项目整体进度的影响
  - **解决方案**: 提出具体的解决方案和时间计划
  - **跟踪机制**: 建立问题解决进度的跟踪机制

#### **状态修正详细流程**
- ✅ **状态及时修正**: 发现虚假完成度立即修正所有相关文档
  - **识别范围**: 确定需要修正的所有相关文档和记录
  - **修正顺序**: 按照重要性和依赖关系确定修正顺序
  - **一致性检查**: 确保所有修正后的文档状态一致
  - **通知机制**: 及时通知相关人员状态变更

### **任务验收标准强制执行详细说明**

#### **技术标准详细检查清单**
```markdown
## 任务完成标准 (必须100%满足)

### 技术标准详细检查
- [ ] **npm run build 成功**
  - 构建过程无错误输出
  - 生成的文件完整且可用
  - 构建时间在合理范围内
  
- [ ] **npm run dev 成功**
  - 开发服务器正常启动
  - 热重载功能正常
  - 无阻塞性错误或警告
  
- [ ] **TypeScript编译0错误**
  - 所有类型定义正确
  - 无any类型滥用
  - 接口定义完整
  
- [ ] **ESLint检查通过**
  - 代码风格符合项目规范
  - 无未使用的变量或导入
  - 无潜在的代码质量问题
  
- [ ] **所有导入都被使用**
  - 清理无用的导入语句
  - 确保导入路径正确
  - 避免循环依赖
  
- [ ] **所有变量都被使用**
  - 清理未使用的变量声明
  - 确保变量命名有意义
  - 避免变量名冲突
  
- [ ] **所有函数都有实现体**
  - 无空函数或TODO标记
  - 函数逻辑完整
  - 错误处理完善
```

#### **功能标准详细验证**
```markdown
### 功能标准详细检查
- [ ] **核心功能经过测试验证**
  - 主要业务流程测试通过
  - 边缘情况处理正确
  - 用户交互响应正常
  
- [ ] **错误处理机制正常**
  - 预期错误有适当处理
  - 错误信息清晰有用
  - 系统不会因错误崩溃
  
- [ ] **性能符合预期**
  - 响应时间在可接受范围
  - 内存使用合理
  - 无明显性能瓶颈
  
- [ ] **文档与实现一致**
  - API文档与实际接口匹配
  - 使用说明准确
  - 示例代码可运行
```

#### **质量标准详细要求**
```markdown
### 质量标准详细检查
- [ ] **代码review通过**
  - 代码逻辑清晰
  - 命名规范一致
  - 注释充分且准确
  
- [ ] **符合项目编码规范**
  - 遵循既定的代码风格
  - 文件组织结构合理
  - 模块划分清晰
  
- [ ] **无明显技术债务**
  - 无临时性的hack代码
  - 架构设计合理
  - 可维护性良好
  
- [ ] **向后兼容性保证**
  - 不破坏现有功能
  - API变更有适当的迁移策略
  - 数据格式兼容
```

### **架构变更管理规范详细指导**

#### **完整性原则详细说明**
- **完整性原则**: 删除模块必须立即创建替代方案，不留空白期
  - **影响分析**: 删除前分析对其他模块的影响
  - **替代方案**: 提供功能等价的替代实现
  - **迁移计划**: 制定详细的迁移时间表
  - **回滚机制**: 准备必要时的回滚方案

#### **配置文件完整性详细要求**
- **配置文件完整性**: 确保删除后重新填充必要配置
  - **配置清单**: 列出所有相关的配置文件
  - **依赖检查**: 确认配置间的依赖关系
  - **验证机制**: 建立配置正确性的验证方法
  - **文档更新**: 及时更新配置相关文档

#### **依赖链修复详细流程**
- [ ] **依赖链修复**: 修复所有导入错误和模块引用
  - **依赖分析**: 使用工具分析模块依赖关系
  - **错误定位**: 精确定位所有导入错误
  - **批量修复**: 系统性地修复所有相关引用
  - **验证测试**: 确保修复后系统正常运行

#### **渐进式变更详细策略**
- [ ] **渐进式变更**: 避免一次性删除过多依赖
  - **分阶段计划**: 将大型变更分解为小步骤
  - **风险评估**: 评估每个阶段的风险
  - **回滚点**: 在每个阶段设置回滚点
  - **验证节点**: 在关键节点进行完整验证

### **架构决策影响跟踪机制详细说明** (基于Phase-3问题经验)

#### **重大架构决策记录模板详细说明**
```markdown
## 重大架构决策记录模板 (详细版)

### 决策基本信息
- **决策日期**: YYYY-MM-DD HH:MM
- **决策类型**: [架构简化/技术栈迁移/模块重构/依赖变更/性能优化]
- **决策者**: [项目角色] + [参与讨论人员]
- **影响范围**: [具体的模块、文件、功能列表]
- **紧急程度**: [高/中/低] + [原因说明]

### 决策内容与动机详细描述
- **决策描述**: 
  - 具体的架构变更内容
  - 涉及的技术组件
  - 预期的实现方式
- **动机说明**: 
  - 当前存在的问题
  - 业务需求变化
  - 技术发展趋势
- **替代方案**: 
  - 考虑过的其他选择
  - 每个方案的优缺点分析
  - 被拒绝的原因

### 影响评估与预期详细分析
- **短期影响**: 
  - 立即的代码变更范围
  - 功能可用性影响
  - 开发效率影响
- **长期影响**: 
  - 可维护性变化
  - 扩展性影响
  - 性能影响预期
- **技术债务成本**: 
  - 量化的债务评估（工时、复杂度、风险）
  - 债务偿还计划
  - 债务监控机制
- **风险评估**: 
  - 可能出现的问题列表
  - 每个风险的概率和影响
  - 具体的缓解策略

### 执行后跟踪详细机制
- **实际影响记录**: 
  - 决策执行后的真实影响
  - 与预期的差异分析
  - 数据支撑的效果评估
- **未预见问题**: 
  - 执行过程中发现的新问题
  - 问题的根本原因分析
  - 问题的严重程度评估
- **修正措施**: 
  - 针对问题采取的修正行动
  - 修正措施的效果评估
  - 后续的预防措施
- **经验教训**: 
  - 从这个决策中学到的经验
  - 对未来决策的指导意义
  - 流程改进建议
```

### **技术债务累积效应管理详细机制**

#### **技术债务评估矩阵详细说明**
```bash
# 技术债务评估矩阵 (详细版)
影响级别 | 复杂度 | 优先级 | 建议行动 | 时间框架 | 资源需求
---------|--------|--------|----------|----------|----------
高影响   | 高复杂 | P0     | 立即解决，分配专门资源 | 1-2周 | 高级开发者+架构师
高影响   | 低复杂 | P1     | 当前迭代内解决 | 3-5天 | 中级开发者
低影响   | 高复杂 | P2     | 规划到下一阶段解决 | 1-2月 | 专项时间分配
低影响   | 低复杂 | P3     | 持续改进中解决 | 持续 | 日常维护时间

# 影响级别评估标准
高影响: 影响核心功能、用户体验、系统稳定性
低影响: 影响开发效率、代码可读性、未来扩展

# 复杂度评估标准  
高复杂: 涉及多个模块、需要架构调整、风险较高
低复杂: 局部修改、风险可控、实施简单
```

#### **累积效应预警指标详细机制**
```bash
# 累积效应预警指标 (详细版)
- 🚨 **红色预警**: 3个以上P0级技术债务同时存在
  - 触发条件: P0债务数量 >= 3
  - 响应措施: 暂停新功能开发，集中解决债务
  - 升级机制: 通知项目负责人和技术负责人
  - 解除条件: P0债务数量 < 2

- 🟡 **黄色预警**: P1级债务超过当前迭代处理能力
  - 触发条件: P1债务工时 > 迭代可用时间的30%
  - 响应措施: 调整迭代计划，优先处理债务
  - 监控频率: 每周评估一次
  - 解除条件: 债务工时 < 迭代可用时间的20%

- 🟢 **绿色状态**: 技术债务在可控范围内
  - 维持条件: P0债务 = 0, P1债务工时 < 迭代时间的20%
  - 监控措施: 定期债务评估和预防性维护
  - 持续改进: 优化开发流程，减少债务产生
```

#### **决策后果回顾机制详细流程**
```bash
# 决策后果回顾机制 (详细版)
- **周期性回顾**: 每个阶段结束时回顾重大决策效果
  - 回顾频率: 每个开发迭代结束后
  - 参与人员: 决策者、实施者、受影响的团队成员
  - 回顾内容: 决策效果、问题分析、改进建议
  - 文档记录: 更新决策记录，记录实际效果

- **问题溯源**: 发现问题时追溯到相关决策点
  - 溯源方法: 问题影响分析 → 相关决策识别 → 决策效果评估
  - 分析深度: 根本原因分析，避免表面问题处理
  - 责任机制: 明确决策责任，但重点在于改进而非追责
  - 学习机制: 将问题转化为团队学习机会

- **决策优化**: 基于实际效果优化未来决策流程
  - 流程改进: 根据回顾结果改进决策流程
  - 工具优化: 改进决策支持工具和模板
  - 能力提升: 提升团队的决策分析能力
  - 知识积累: 建立决策知识库，避免重复错误
```

### **防止过度乐观的项目状态管理详细协议**

#### **实证状态更新详细要求**
- **实证状态更新**: 所有项目状态更新必须基于实际验证结果
  - **验证标准**: 明确的、可测量的验证标准
  - **证据收集**: 收集客观的验证证据（截图、日志、测试报告）
  - **第三方验证**: 重要状态更新需要第三方验证确认
  - **历史对比**: 与历史数据对比，确保状态更新的合理性

#### **问题透明化详细机制**
- **问题透明化**: 及时暴露和记录发现的问题，不隐瞒技术债务
  - **发现机制**: 建立多渠道的问题发现机制
  - **记录标准**: 统一的问题记录格式和分类标准
  - **公开程度**: 确定问题信息的公开范围和程度
  - **跟踪机制**: 建立问题解决进度的跟踪机制

#### **状态修正机制详细流程**
- **状态修正机制**: 发现状态错误时立即修正所有相关文档和记录
  - **错误识别**: 建立状态错误的识别标准和流程
  - **影响范围**: 快速确定需要修正的文档和记录范围
  - **修正优先级**: 按照重要性和紧急程度确定修正顺序
  - **一致性检查**: 确保修正后所有相关信息的一致性

#### **用户反馈整合详细机制**
- **用户反馈整合**: 将用户质疑作为状态验证的重要输入
  - **反馈渠道**: 建立多样化的用户反馈渠道
  - **反馈分析**: 系统性分析用户反馈的有效性和重要性
  - **响应机制**: 建立对用户反馈的快速响应机制
  - **改进循环**: 将用户反馈转化为流程改进的输入

### **Phase-3专用项目管理规范详细说明** (单一权威来源)

#### **文档层次结构详细管理** (严格遵循)
```markdown
## Phase-3状态管理特殊要求 (详细版)

### **文档层次结构 (严格遵循)**
1. **单一权威**: refactor/phase-3/PHASE-3-MASTER-STATUS.md
   - **核心状态概览**: 整体进度、关键指标、当前状态
   - **任务状态**: 各任务的完成情况和问题记录
   - **验证结果**: 最新的验证结果和质量评估
   - **快速状态查询**: 为快速决策提供关键信息
   - **AI使用指导**: 为AI助手提供上下文信息
   - **所有状态变更的第一记录点**: 确保信息的及时性和准确性

2. **详细文档**: 通过MASTER-STATUS引用
   - **PHASE-3-EMERGENCY-ASSESSMENT.md**: 技术细节和深度分析
   - **TASK-P3-016A-真实状态追踪.md**: 具体任务的详细情况
   - **PHASE-3-PLANNING.md**: 完整的规划和计划信息
   - **PHASE-3-WORK-PLAN.md**: 详细的工作计划和时间安排
```

#### **状态更新协议详细流程** (防止信息分散)
```markdown
### **状态更新协议 (防止信息分散)**
1. **更新顺序**: 
   - **第一步**: 更新PHASE-3-MASTER-STATUS.md
     - 更新核心状态信息
     - 记录变更时间和原因
     - 确保信息的完整性
   - **第二步**: 更新具体详细文档
     - 根据变更内容更新相关详细文档
     - 保持与主状态文档的一致性
     - 添加必要的详细说明
   - **第三步**: 确保引用关系一致
     - 检查所有文档间的引用关系
     - 更新相关的链接和引用
     - 验证信息的一致性

2. **更新触发条件**:
   - **任务状态重大变化**: P0问题修复、重要里程碑达成
   - **整体完成度变化超过5%**: 显著的进度变化
   - **用户质疑或验证失败**: 外部反馈触发的状态重评估
   - **新任务开始或完成**: 任务生命周期的关键节点

3. **禁止操作**:
   - ❌ **直接修改详细文档状态而不更新MASTER-STATUS**
   - ❌ **在多个文档中维护不同的完成度信息**
   - ❌ **基于理论分析更新状态而无验证依据**
```

#### **AI上下文优化原则详细说明**
```markdown
### **AI上下文优化原则**
- **单点读取**: AI优先读取PHASE-3-MASTER-STATUS.md获取状态
  - 减少AI需要处理的文档数量
  - 提供最关键和最新的状态信息
  - 确保AI获得一致的状态认知

- **减少负担**: 避免同时读取多个Phase-3详细文档
  - 防止信息过载影响AI判断
  - 提高AI响应速度和准确性
  - 减少不必要的上下文切换

- **按需深入**: 通过引用链接获取具体技术细节
  - 当需要详细信息时再读取专门文档
  - 保持信息的层次性和结构性
  - 支持渐进式的信息获取

- **状态一致**: 确保所有文档的状态信息保持一致
  - 建立状态同步机制
  - 定期检查信息一致性
  - 及时修正发现的不一致
```

## 📋 **关键规则详细说明**

### **文档修改规范详细流程**
- **所有对 @docs 的修改必须参考最新的 README.md**，保持模块、页面、功能描述一致
  - **参考标准**: README.md作为权威信息源
  - **一致性检查**: 确保描述的一致性和准确性
  - **冲突处理**: 发现冲突时的处理流程

### **文档更新标记详细要求**
- **修改文档前，需先明确修改目的**（补充说明/修正错误/同步更新等），并在文档顶部用 `<!-- updated for: xxx -->` 标记
  - **目的分类**: 明确的修改目的分类标准
  - **标记格式**: 统一的标记格式和内容要求
  - **追踪机制**: 通过标记追踪文档变更历史

### **任务管理规范详细说明**
- **所有任务生成必须遵循 task-management-manual.mdc 中定义的任务命名、分类和描述规范**（含时间、责任人可选）
  - **命名规范**: 统一的任务命名格式
  - **分类标准**: 明确的任务分类体系
  - **描述要求**: 任务描述的完整性和准确性要求

### **历史记录保护详细原则**
- **历史变更记录**（如 changelog、历史设计思路、接口变更过程）不得删除，仅允许增加注释或打标记
  - **保护范围**: 明确需要保护的历史记录类型
  - **修改限制**: 允许的修改类型和程度
  - **标记方法**: 历史记录的标记和注释方法

### **冲突处理详细机制**
- **如果 README.md 与 @docs 内容冲突，以 README 为准**，并同时在 @docs 中记录冲突点与处理方式
  - **冲突识别**: 如何识别和确认冲突
  - **处理优先级**: README.md的权威地位
  - **记录要求**: 冲突处理的记录标准

### **变更控制详细要求**
- **不允许主观性大改**（如重构文档结构或大范围内容调整），除非已有明确任务需求或在 task-list 中记录
  - **主观性判断**: 如何判断变更的主观性
  - **授权机制**: 大范围变更的授权要求
  - **记录要求**: 变更的记录和追踪要求

### **自动化控制详细流程**
- **所有自动生成的改动建议必须先以列表形式展示给用户确认，不得直接应用**
  - **展示格式**: 改动建议的展示标准
  - **确认机制**: 用户确认的流程和要求
  - **应用控制**: 防止未经确认的自动应用

### **目录结构同步详细机制**
- **任何目录结构变更都必须同步更新目录结构文档**：
  - **更新 [DIRECTORY_STRUCTURE.md](mdc:DIRECTORY_STRUCTURE.md)** 保持当前最新目录结构（仅包含：1.根目录结构、2.web-app目录结构、3.目录结构说明表格）
    - **更新时机**: 目录变更后立即更新
    - **内容要求**: 完整反映当前目录结构
    - **格式标准**: 统一的目录结构表示格式
  - **在 [docs/directory-structure-changelog.md](mdc:docs/directory-structure-changelog.md) 记录变更历史**（包含：历史更新记录、进展说明、变更详情）
    - **记录内容**: 变更时间、原因、具体内容
    - **格式要求**: 统一的变更记录格式
    - **追踪机制**: 变更历史的追踪和查询

## 📝 **文档更新流程详细说明**

### **详细流程步骤**
1. **确认修改目的和范围**
   - 明确修改的具体目标
   - 确定影响范围和相关文档
   - 评估修改的必要性和紧急性

2. **检查 README.md 作为权威参考**
   - 查阅相关的权威信息
   - 确保修改与权威信息一致
   - 识别可能的冲突点

3. **在文档顶部添加更新标记**
   - 使用标准的更新标记格式
   - 记录修改目的和时间
   - 标识修改的责任人

4. **进行必要的内容修改**
   - 按照确定的目的进行修改
   - 保持内容的准确性和完整性
   - 确保修改的质量和一致性

5. **记录变更历史，不删除原有记录**
   - 在变更历史中添加新记录
   - 保留所有历史信息
   - 确保变更记录的完整性

6. **如有冲突，记录冲突点和解决方案**
   - 明确记录冲突的具体内容
   - 说明解决方案的选择依据
   - 记录解决过程和结果

## 📊 **任务管理规范详细说明**

### **任务文件管理详细要求**
- **任务文件命名**：`TASK-XXX_任务描述.md`
  - **编号规则**: 统一的任务编号格式
  - **描述要求**: 简洁明确的任务描述
  - **文件组织**: 任务文件的目录组织方式

### **任务状态管理详细流程**
- **任务状态**：待开始 → 进行中 → 已完成 → 已验证
  - **状态定义**: 每个状态的明确定义和标准
  - **转换条件**: 状态转换的条件和要求
  - **跟踪机制**: 状态变更的跟踪和记录

### **任务内容要求详细说明**
- **必须包含**：任务描述、验收标准、变更记录表格
  - **任务描述**: 详细的任务内容和目标
  - **验收标准**: 明确的完成标准和验证方法
  - **变更记录**: 完整的变更历史记录

### **任务完成标记详细要求**
- **完成任务后添加"Done"标记和两行总结**
  - **标记格式**: 统一的完成标记格式
  - **总结要求**: 简洁的任务总结内容
  - **归档机制**: 完成任务的归档和管理

## 📖 **实践示例详细说明**

### **正确的文档更新流程示例**
```markdown
<!-- updated for: 同步API接口变更 -->
# 模块文档

## 变更历史
- 2024-01-15: 原始版本 - 初始创建
- 2024-01-20: 更新API接口说明 (本次更新) - 同步后端API变更

## API接口
根据 README.md 第3.2节，更新接口描述...

### 接口变更说明
- 新增用户认证接口
- 修改数据格式规范
- 更新错误码定义
```

### **正确的任务文件示例**
```markdown
# TASK-005_代码模块化改造

## 任务状态
进行中

## 任务描述
将现有的单体代码结构重构为模块化架构，提高代码的可维护性和可重用性。

## 验收标准
- [ ] 模块划分清晰，职责明确
- [ ] 模块间依赖关系合理
- [ ] 所有模块都有完整的测试覆盖
- [ ] 重构后功能无回归问题

## 变更记录
| 文件路径 | 修改类型 | 说明 | 时间 |
|---------|---------|------|------|
| src/components/auth/ | 新增 | 认证模块组件 | 2024-01-15 |
| src/utils/api.js | 修改 | 提取API工具函数 | 2024-01-16 |
| src/store/index.js | 重构 | 模块化状态管理 | 2024-01-17 |
```

### **错误的文档管理方式示例**
```markdown
# 模块文档 (❌ 删除了原有的变更历史)

完全重写了文档内容，没有参考README.md
没有添加更新标记
直接删除了历史版本信息

## 错误行为分析
- 缺少更新标记，无法追踪变更原因
- 删除历史记录，丢失重要信息
- 未参考权威文档，可能导致不一致
- 没有记录变更过程，影响可追溯性
```

### **错误的任务管理示例**
```markdown
## 错误行为列表
- **创建重复的任务文件**而不使用现有的TASK-005
  - 导致任务管理混乱
  - 浪费资源和时间
  - 影响进度跟踪

- **修改代码但不在变更记录表格中记录**
  - 缺少变更追踪
  - 影响问题排查
  - 不利于团队协作

- **完成任务但不更新状态和添加总结**
  - 状态信息不准确
  - 缺少经验总结
  - 影响后续工作规划
```

---

**文档维护信息**：
- **迁移来源**：project-management-auto.mdc
- **迁移日期**：2025-02-02
- **完整性**：100%内容保持，大幅增加详细说明和操作指导
- **引用方式**：被 development-management-unified.mdc 主控规则引用

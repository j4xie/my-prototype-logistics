/**
 * UserCard 组件
 * 用户信息卡片，展示用户头像、姓名、角色和权限信息，以及关键统计数据
 * @param {Object} config - 配置对象
 * @param {string} config.name - 用户姓名
 * @param {string} config.role - 用户角色
 * @param {string} config.avatarUrl - 用户头像URL
 * @param {Array} config.stats - 统计数据 [{label, value, unit}]
 * @param {Function} config.onAvatarClick - 头像点击回调
 * @param {string} config.theme - 主题样式 'default' | 'compact'
 */
class UserCard {
    constructor(config = {}) {
        this.config = {
            name: '用户名',
            role: '角色信息',
            avatarUrl: '',
            avatarIcon: 'user',
            stats: [],
            onAvatarClick: null,
            theme: 'default',
            ...config
        };
        
        this.element = null;
    }
    
    /**
     * 渲染用户卡片
     * @param {string} targetSelector - 目标容器选择器
     */
    render(targetSelector) {
        const target = document.querySelector(targetSelector);
        if (!target) return;
        
        // 创建卡片元素
        this.element = document.createElement('div');
        this.element.className = 'user-info-card mb-6';
        
        // 添加主题类
        if (this.config.theme === 'compact') {
            this.element.classList.add('compact');
        }
        
        // 设置HTML内容
        this.element.innerHTML = `
            <div class="flex items-center">
                ${this._renderAvatar()}
                ${this._renderUserInfo()}
            </div>
            ${this._renderStats()}
        `;
        
        // 添加到目标容器
        target.appendChild(this.element);
        
        // 绑定事件
        this._bindEvents();
    }
    
    /**
     * 渲染用户头像
     * @returns {string} 头像HTML
     */
    _renderAvatar() {
        const { avatarUrl, avatarIcon } = this.config;
        
        if (avatarUrl) {
            return `
                <div class="user-avatar" id="user-avatar" style="background-image: url('${avatarUrl}');">
                </div>
            `;
        } else {
            return `
                <div class="user-avatar bg-primary-light text-primary" id="user-avatar">
                    <i class="fas fa-${avatarIcon}"></i>
                </div>
            `;
        }
    }
    
    /**
     * 渲染用户信息
     * @returns {string} 用户信息HTML
     */
    _renderUserInfo() {
        const { name, role } = this.config;
        
        return `
            <div class="ml-3">
                <h3 class="text-md font-semibold">${name}</h3>
                <p class="text-sm text-gray-500">${role}</p>
            </div>
        `;
    }
    
    /**
     * 渲染统计数据
     * @returns {string} 统计数据HTML
     */
    _renderStats() {
        const { stats } = this.config;
        
        if (!stats || stats.length === 0) {
            return '';
        }
        
        const columns = Math.min(stats.length, 3);
        
        return `
            <div class="mt-3 grid grid-cols-${columns} gap-3">
                ${stats.map(stat => `
                    <div class="stat-item">
                        <p class="stat-value">${stat.value}${stat.unit || ''}</p>
                        <p class="stat-label">${stat.label}</p>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    /**
     * 绑定事件
     */
    _bindEvents() {
        // 绑定头像点击事件
        if (this.config.onAvatarClick) {
            const avatar = this.element.querySelector('#user-avatar');
            if (avatar) {
                avatar.style.cursor = 'pointer';
                avatar.addEventListener('click', this.config.onAvatarClick);
            }
        }
    }
    
    /**
     * 更新用户数据
     * @param {Object} userData - 用户数据对象
     */
    updateUserData(userData) {
        // 更新配置
        Object.assign(this.config, userData);
        
        // 重新渲染必要的部分
        const userInfoContainer = this.element.querySelector('.ml-3');
        if (userInfoContainer) {
            userInfoContainer.innerHTML = `
                <h3 class="text-md font-semibold">${this.config.name}</h3>
                <p class="text-sm text-gray-500">${this.config.role}</p>
            `;
        }
        
        // 更新头像
        this._updateAvatar();
        
        // 更新统计数据
        this._updateStats();
    }
    
    /**
     * 更新头像
     */
    _updateAvatar() {
        const avatar = this.element.querySelector('#user-avatar');
        if (!avatar) return;
        
        const { avatarUrl, avatarIcon } = this.config;
        
        if (avatarUrl) {
            avatar.style.backgroundImage = `url('${avatarUrl}')`;
            avatar.innerHTML = '';
            avatar.classList.remove('bg-primary-light', 'text-primary');
        } else {
            avatar.style.backgroundImage = '';
            avatar.classList.add('bg-primary-light', 'text-primary');
            avatar.innerHTML = `<i class="fas fa-${avatarIcon}"></i>`;
        }
    }
    
    /**
     * 更新统计数据
     */
    _updateStats() {
        const statsContainer = this.element.querySelector('.grid');
        if (!statsContainer) return;
        
        const { stats } = this.config;
        
        if (!stats || stats.length === 0) {
            statsContainer.innerHTML = '';
            return;
        }
        
        const columns = Math.min(stats.length, 3);
        statsContainer.className = `mt-3 grid grid-cols-${columns} gap-3`;
        
        statsContainer.innerHTML = stats.map(stat => `
            <div class="stat-item">
                <p class="stat-value">${stat.value}${stat.unit || ''}</p>
                <p class="stat-label">${stat.label}</p>
            </div>
        `).join('');
    }
    
    /**
     * 更新单个统计数据
     * @param {string} label - 统计项标签
     * @param {string|number} value - 统计项值
     */
    updateStat(label, value) {
        // 找到匹配的统计项
        const statIndex = this.config.stats.findIndex(stat => stat.label === label);
        if (statIndex === -1) return;
        
        // 更新值
        this.config.stats[statIndex].value = value;
        
        // 更新DOM
        const statElements = this.element.querySelectorAll('.stat-item');
        if (statElements && statElements[statIndex]) {
            const valueElement = statElements[statIndex].querySelector('.stat-value');
            if (valueElement) {
                valueElement.textContent = `${value}${this.config.stats[statIndex].unit || ''}`;
            }
        }
    }
}

// 导出组件
window.UserCard = UserCard; 
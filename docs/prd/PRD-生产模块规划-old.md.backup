# 白垩纪食品溯源系统 - 生产模块规划文档

**文档版本**: v1.0
**创建日期**: 2025-01-05
**实施周期**: 4-6周
**文档状态**: 待实施

---

## 📋 目录

1. [生产模块概述](#生产模块概述)
2. [业务流程分析](#业务流程分析)
3. [功能模块详细设计](#功能模块详细设计)
4. [数据库设计](#数据库设计)
5. [API接口清单](#api接口清单)
6. [前端页面设计](#前端页面设计)
7. [页面跳转关系图](#页面跳转关系图)
8. [与其他模块的协作](#与其他模块的协作)
9. [优化方向](#优化方向)
10. [实施计划](#实施计划)
11. [验收标准](#验收标准)

---

## 生产模块概述

### 1.1 系统定位

生产模块是白垩纪食品溯源系统的**核心业务模块**,负责管理从原材料接收到成品产出的完整生产流程。

**设计原则**:
- 🎯 **流程完整**: 覆盖生产全生命周期管理
- 📊 **数据驱动**: 实时记录生产数据,支持成本核算和智能分析
- 🔗 **协同工作**: 与员工管理、设备监控、仓储等模块深度集成
- 💰 **成本可控**: 精细化成本核算,AI智能分析优化建议
- 📱 **移动优先**: 优化移动端操作体验,支持离线功能

### 1.2 核心功能清单

**6大核心子模块**:

1. **批次管理** (Batch Management)
   - ✅ 批次创建、编辑、删除
   - ✅ 批次状态流转(planning → in_progress → quality_check → completed)
   - ✅ 批次时间线追踪
   - ✅ 批次数据查询和筛选

2. **质量检验** (Quality Inspection)
   - ✅ 三阶段质检(原料质检 → 过程质检 → 成品质检)
   - ✅ 质检记录创建和查询
   - ✅ 质检照片上传
   - ✅ 质检统计和趋势分析

3. **员工工作管理** (Employee Work Management)
   - ✅ 员工打卡(上班/下班)
   - ✅ 工作时段记录
   - ✅ 工时统计(日/周/月)
   - ✅ 工作记录关联批次

4. **设备监控** (Equipment Monitoring)
   - ✅ 设备实时监控(温度、湿度、压力、运行时长)
   - ✅ 设备使用记录
   - ✅ 设备告警管理(3级告警)
   - ✅ 设备维护记录

5. **成本核算** (Cost Analysis)
   - ✅ 成本自动计算(原料+人工+设备)
   - ✅ 成本构成分析
   - ✅ AI智能成本分析(DeepSeek集成)
   - ✅ 成本趋势对比

6. **生产仪表板** (Production Dashboard)
   - ✅ 生产概览(今日/本周/本月)
   - ✅ 关键指标展示(产量、合格率、成本、效率)
   - ✅ 告警摘要
   - ✅ 趋势分析

### 1.3 技术架构


### 1.4 现有功能完成度评估

| 子模块 | 后端API | 数据库表 | 前端UI | 整体完成度 | 状态 |
|-------|---------|---------|--------|-----------|------|
| **批次管理** | 100% (8个API) | 100% | 30% (1/5页) | 77% | 🟡 需要大量前端开发 |
| **质量检验** | 100% (6个API) | 100% | 20% (0/4页) | 73% | 🟡 需要全部前端页面 |
| **员工工作** | 100% (7个API) | 100% | 70% (2/3页) | 90% | 🟢 接近完成 |
| **设备监控** | 100% (5个API) | 100% | 10% (0/4页) | 70% | 🟡 需要全部前端页面 |
| **成本核算** | 80% (3个API) | 100% | 40% (1/3页) | 73% | 🟡 AI集成待完善 |
| **生产仪表板** | 100% (6个API) | 100% | 50% (1/2页) | 83% | 🟡 需要优化 |

**总体完成度**: **约78%**

**核心问题**:
- ✅ 后端API已完成95%以上,数据库表结构完善
- ❌ 前端UI缺失严重,20个页面中仅完成5个(25%)
- ❌ AI分析功能使用Mock数据,未集成真实DeepSeek API
- ❌ 缺少离线功能支持
- ❌ 性能优化不足(缓存、分页)

---

## 业务流程分析

### 2.1 完整生产业务线

生产模块覆盖从原材料接收到成品产出的**完整14步业务流程**:

#### 步骤1: 原材料接收

**操作人员**: 接收部门操作员
**操作内容**:
- 在MaterialReceiptScreen页面录入原材料信息
- 记录原材料类型(如:鲈鱼、带鱼等)
- 记录原材料重量(单位:kg)
- 记录原材料成本(单位:元)
- 记录供应商信息
- 拍摄原材料照片(可选)

**业务意义**: 建立原材料追溯基础,为后续成本核算提供数据

#### 步骤2: 原材料质检(可选)

**操作人员**: 质检员
**操作内容**:
- 在QualityInspectionCreateScreen选择质检类型为"原料质检"
- 进行感官检查(外观、气味、色泽)
- 测量温度(标准:≤4°C)
- 部分批次进行微生物检测
- 判定结果:合格/不合格/条件合格

**业务意义**: 确保原材料质量,防止不合格原料进入生产流程

**流程分支**:
- 合格 → 继续步骤3(批次创建)
- 不合格 → 拒收退货,流程终止
- 条件合格 → 降级使用或特殊处理

#### 步骤3: 批次创建

**操作人员**: 生产部门主管(department_admin)
**操作内容**:
- 在BatchCreateScreen填写批次信息
- 选择产品类型(如:速冻鱼排、鱼丸等)
- 选择使用的原材料(多选)
- 设置目标产量(单位:kg)
- 选择生产线(如:生产线A、生产线B)
- 分配批次负责人(从本部门员工中选择)
- 设置预计开始日期
- 填写备注信息(可选)

**系统自动操作**:
- 生成批次号(格式:FAC001-20250105-001)
- 检查生产线是否被占用
- 设置批次初始状态为planning

**业务意义**: 启动一个新的生产任务,分配资源和责任人

#### 步骤4: 员工上班打卡

**操作人员**: 生产员工(operator)
**操作内容**:
- 在TimeClockScreen点击"上班打卡"
- 系统自动获取GPS位置,验证是否在工厂范围内
- 选择工作类型(生产/质检/设备维护等)
- 如果工作类型是"生产",选择关联的批次
- 拍摄打卡照片(可选)
- 提交打卡

**系统自动操作**:
- 创建打卡记录
- 创建工作时段记录
- 记录开始时间

**业务意义**: 记录员工工作时间,用于工时统计和人工成本计算

#### 步骤5: 设备使用开始

**操作人员**: 设备操作员
**操作方式**: 系统自动记录或手动登记
**记录内容**:
- 使用的设备(如:速冻机、切割机)
- 关联的批次
- 设备开始使用时间

**业务意义**: 记录设备使用情况,用于设备成本计算和设备利用率分析

#### 步骤6: 批次生产执行

**操作人员**: 生产主管(department_admin)
**操作内容**:
- 在BatchDetailScreen点击"开始生产"按钮
- 确认生产准备工作已完成
- 系统将批次状态从planning变更为in_progress

**业务意义**: 标志生产正式开始,进入生产执行阶段

#### 步骤7: 过程质检(建议2-4小时/次)

**操作人员**: 质检员
**操作内容**:
- 定期在QualityInspectionCreateScreen创建过程质检记录
- 选择质检类型为"过程质检"
- 检测加工温度(标准:85-95°C)
- 检测pH值(标准:6.5-7.5)
- 检测水分含量(标准:≤75%)
- 记录检测时间和检测人
- 拍摄过程照片

**业务意义**: 实时监控生产过程质量,及时发现异常并纠正

**异常处理**: 过程质检不合格时,主管应暂停生产,查找原因并纠正

#### 步骤8: 批次完成

**操作人员**: 生产主管(department_admin)
**操作内容**:
- 在BatchDetailScreen点击"完成生产"按钮
- 录入实际产量(必填)
- 系统将批次状态从in_progress变更为quality_check

**业务意义**: 标志生产阶段结束,进入质检验收阶段

#### 步骤9: 成品质检

**操作人员**: 质检员
**操作内容**:
- 在QualityInspectionCreateScreen创建成品质检记录
- 选择质检类型为"成品质检"
- 进行全面质量检测:
  - 感官检查(色泽、气味、外观)
  - 理化指标检测(蛋白质、脂肪、水分)
  - 微生物检测(大肠菌群、沙门氏菌等)
  - 重量检测
  - 包装检查
- 拍摄成品照片
- 判定质检结果:合格/不合格/条件合格
- 如有不合格项,记录缺陷详情和纠正措施

**系统自动操作**:
- 根据检测项结果自动计算质量评分(0-100分)
- 如果质检通过,将批次状态从quality_check变更为completed
- 如果质检不通过,将批次状态变更为failed

**业务意义**: 确保成品质量符合标准,决定批次是否可以出库销售

#### 步骤10: 设备使用结束

**操作方式**: 系统自动记录或手动登记
**记录内容**:
- 设备停止使用时间
- 计算设备总使用时长(分钟)

**业务意义**: 完整记录设备使用数据,用于设备成本计算

#### 步骤11: 员工下班打卡

**操作人员**: 生产员工(operator)
**操作内容**:
- 在TimeClockScreen点击"下班打卡"
- 系统自动获取GPS位置
- 填写工作总结(可选)
- 提交打卡

**系统自动操作**:
- 更新工作时段记录的结束时间
- 计算总工时(下班时间-上班时间)
- 计算加班工时(超过8小时的部分)
- 判断打卡状态(正常/迟到/早退/加班)

**业务意义**: 完整记录工作时间,用于工资计算和人工成本核算

#### 步骤12: 成本核算

**触发时机**: 批次状态变更为completed时自动触发
**操作人员**: 系统自动计算
**计算内容**:
- **原料成本**: 使用批次创建时录入的原材料成本总和
- **人工成本**: 统计所有关联此批次的工作时段,计算工时×时薪(加班按1.5倍)
- **设备成本**: 统计所有关联此批次的设备使用记录,计算使用时长×设备折旧率
- **其他成本**: 能耗、包装等(暂按前三项总和的5%估算)
- **总成本**: 上述四项之和
- **单位成本**: 总成本÷实际产量
- **利润率**: (预期售价-单位成本)÷预期售价×100%

**业务意义**: 精准计算生产成本,为定价和利润分析提供数据

#### 步骤13: AI成本分析(可选)

**操作人员**: 生产主管或工厂超管
**操作内容**:
- 在BatchCostDetailScreen点击"AI智能分析"按钮
- 系统将批次成本数据发送给DeepSeek AI
- AI分析成本构成合理性,识别异常项
- AI提供3-5条优化建议

**AI分析内容**:
- 成本是否超标,超标比例和金额
- 成本构成是否合理(原料、人工、设备占比)
- 与历史平均成本对比
- 与目标成本对比
- 具体优化建议(如:人工成本偏高,建议优化生产流程)

**业务意义**: 利用AI技术发现成本优化空间,提供数据驱动的决策支持

**成本控制**: 月度AI分析费用控制在30元以内,使用缓存策略避免重复查询

#### 步骤14: 数据归档和追溯

**触发时机**: 批次状态为completed或failed后
**系统自动操作**:
- 批次数据永久保存,不可删除
- 生成完整的批次档案(包含所有关联数据)
- 支持通过批次号查询完整历史

**可追溯信息**:
- 原材料来源(供应商、批次号)
- 生产过程(参与员工、使用设备、生产参数)
- 质检记录(所有质检结果和照片)
- 成本数据(成本构成明细)
- 时间线(所有操作记录)

**业务意义**:
- 支持产品质量追溯
- 食品安全问题召回时能快速定位
- 为生产优化提供历史数据分析基础

### 2.2 批次状态流转规则

批次从创建到完成经历多个状态,每个状态有不同的可操作项和权限要求。

#### 状态1: planning (计划中)

**状态说明**: 批次已创建,但尚未开始生产

**可执行操作**:
- ✅ 编辑批次信息(所有字段可编辑)
- ✅ 删除批次
- ✅ 开始生产

**操作权限**: department_admin及以上

**前置条件**:
- 原材料已准备完毕
- 生产线可用(未被其他批次占用)
- 负责人已分配

**用户在页面看到的**:
- 状态徽章显示"计划中"(蓝色)
- 可见按钮:"编辑"、"删除"、"开始生产"

#### 状态2: in_progress (进行中)

**状态说明**: 生产已开始,正在执行中

**可执行操作**:
- ✅ 暂停生产(设备故障、原料不足等异常情况)
- ✅ 完成生产(录入实际产量)
- ✅ 修改部分信息(仅实际产量和备注)

**操作权限**: department_admin及以上

**不可操作**:
- ❌ 删除批次(进行中的批次不允许删除)
- ❌ 修改基本信息(产品类型、原材料、生产线等)

**完成生产的必填项**: 实际产量(actualQuantity)

**用户在页面看到的**:
- 状态徽章显示"进行中"(橙色)
- 可见按钮:"暂停生产"、"完成生产"
- 进度条显示当前产量(如果已录入部分产量)

#### 状态3: paused (已暂停)

**状态说明**: 生产因异常情况暂停

**暂停原因**:
- 设备故障(系统检测到设备严重告警时自动暂停)
- 原材料不足
- 质检不合格需要调整
- 其他异常情况

**可执行操作**:
- ✅ 恢复生产(问题解决后)
- ✅ 取消生产(无法继续时)

**操作权限**: department_admin及以上

**恢复生产的前置条件**: 暂停原因已解决

**用户在页面看到的**:
- 状态徽章显示"已暂停"(红色)
- 显示暂停原因
- 可见按钮:"恢复生产"、"取消生产"

#### 状态4: quality_check (质检中)

**状态说明**: 生产已完成,等待成品质检验收

**可执行操作**:
- ✅ 创建成品质检记录
- ✅ 质检通过 → 批次变为completed
- ✅ 质检不通过 → 批次变为failed

**操作权限**:
- 创建质检:operator及以上
- 质检判定:department_admin及以上

**质检通过的前置条件**:
- 必须有成品质检记录
- 质检结果为pass(合格)

**用户在页面看到的**:
- 状态徽章显示"质检中"(黄色)
- 提示:"等待质检验收"
- 可见按钮:"创建质检记录"
- 如已有质检记录,显示质检结果和"通过"/"不通过"按钮

#### 状态5: completed (已完成)

**状态说明**: 批次生产完成且质检通过,可以出库

**可执行操作**:
- ✅ 查看所有数据(只读)
- ✅ 查看成本分析
- ✅ 请求AI分析
- ✅ 导出批次报告

**不可操作**:
- ❌ 编辑任何信息(factory_super_admin可以例外)
- ❌ 删除批次(已完成批次不允许删除,只能归档)

**系统自动操作**:
- 触发成本自动计算
- 数据归档,支持追溯查询

**用户在页面看到的**:
- 状态徽章显示"已完成"(绿色)
- 所有信息只读
- 可见按钮:"查看成本详情"、"AI分析"、"导出报告"

#### 状态6: failed (已失败)

**状态说明**: 批次质检不通过或生产失败

**失败原因**:
- 成品质检不通过
- 生产过程中出现严重质量问题
- 设备故障导致产品报废

**可执行操作**:
- ✅ 查看所有数据(只读)
- ✅ 查看失败原因
- ✅ 记录处理措施

**不可恢复**: 失败的批次不能再变更为其他状态

**用户在页面看到的**:
- 状态徽章显示"已失败"(红色)
- 显示失败原因和处理措施
- 所有信息只读

#### 状态7: cancelled (已取消)

**状态说明**: 批次在planning或paused状态时被取消

**可取消的状态**: 仅planning和paused

**操作权限**: factory_super_admin

**用户在页面看到的**:
- 状态徽章显示"已取消"(灰色)
- 显示取消原因
- 所有信息只读

### 2.3 跨模块协作关系

#### 2.3.1 与员工管理模块的集成

**集成点1: 批次负责人选择**
- **业务场景**: 创建批次时需要分配批次负责人
- **数据来源**: 从员工管理模块获取本部门的员工列表
- **筛选条件**: 仅显示生产部门(processing)的操作员和主管
- **显示信息**: 员工姓名、部门、当前负责的批次数(工作负荷)
- **用户操作**: 在BatchCreateScreen的负责人选择器中选择一名员工

**集成点2: 工时记录关联批次**
- **业务场景**: 员工打卡时选择关联的生产批次
- **关联方式**: 上班打卡时,如果工作类型选择"生产",需选择当前参与的批次
- **数据流向**: 打卡记录和工作时段记录都保存批次ID
- **业务价值**: 准确追踪每个批次的人工投入,用于成本核算

**集成点3: 成本核算读取工时数据**
- **业务场景**: 批次完成后计算人工成本
- **数据读取**: 统计所有关联此批次的工作时段记录
- **计算逻辑**: 累加所有员工的工时,乘以各自的时薪(加班按1.5倍计算)
- **显示位置**: 在BatchCostDetailScreen的成本明细中显示人工成本及工时明细

#### 2.3.2 与设备监控模块的集成

**集成点1: 批次执行时记录设备使用**
- **业务场景**: 批次开始生产时,记录使用的设备和开始时间
- **记录方式**: 主管点击"开始生产"时,选择本次生产使用的设备(多选)
- **自动记录**: 系统为每台设备创建使用记录,记录批次ID和开始时间
- **结束记录**: 批次完成时,自动或手动记录设备停止使用时间

**集成点2: 成本核算读取设备数据**
- **业务场景**: 批次完成后计算设备成本
- **数据读取**: 统计所有关联此批次的设备使用记录
- **计算逻辑**: 累加所有设备的使用时长,乘以各设备的折旧率(元/小时)
- **显示位置**: 在BatchCostDetailScreen的成本明细中显示设备成本及设备使用明细

**集成点3: 设备异常影响批次状态**
- **业务场景**: 设备出现严重故障时,自动暂停相关批次
- **触发条件**: 设备监控系统检测到严重告警(critical级别)
- **自动操作**: 系统自动将使用该设备的in_progress批次状态变更为paused
- **通知机制**: 推送通知给批次负责人和生产主管,告知暂停原因
- **恢复操作**: 设备故障解决后,主管手动点击"恢复生产"

#### 2.3.3 与仓储模块的集成 (未来规划 - Phase 4+)

**集成点1: 批次创建时原料出库**
- **业务场景**: 创建批次时需要从仓库领取原材料
- **操作流程**:
  1. 用户在BatchCreateScreen选择原材料时,从仓储库存中选择
  2. 批次创建成功后,自动触发原料出库流程
  3. 仓储模块创建出库单,减少库存
  4. 生产模块保存出库单号,用于追溯
- **库存检查**: 如果库存不足,提示用户并阻止批次创建
- **追溯关联**: 原材料批次号与生产批次号关联,支持向上追溯

**集成点2: 批次完成时成品入库**
- **业务场景**: 批次质检通过后,成品自动入库
- **操作流程**:
  1. 批次状态变更为completed时,自动触发成品入库
  2. 仓储模块创建入库单,增加成品库存
  3. 生成追溯码,绑定批次号
  4. 生产模块保存入库单号
- **追溯码**: 扫描产品上的追溯码,可查询批次的完整生产信息
- **保质期管理**: 根据生产日期自动计算保质期,支持FIFO先进先出

#### 2.3.4 与销售模块的集成 (未来规划 - Phase 5+)

**集成点1: 销售出库关联批次**
- **业务场景**: 销售订单发货时,关联成品的批次号
- **追溯查询**: 客户扫描产品追溯码,可查询:
  - 批次生产日期和负责人
  - 原材料来源和供应商
  - 质检结果和照片
  - 生产过程关键参数
- **召回管理**: 如发现质量问题,通过批次号快速定位所有相关销售订单

**集成点2: 成本数据用于定价**
- **业务场景**: 销售定价时参考生产成本
- **数据提供**: 生产模块提供产品的平均单位成本
- **定价建议**: 系统根据成本+目标利润率,推荐销售价格
- **利润分析**: 销售模块可查询每个订单的利润(售价-成本)

#### 2.3.5 与财务模块的集成 (未来规划 - Phase 6+)

**集成点1: 批次成本数据同步**
- **业务场景**: 批次完成后,成本数据同步到财务模块用于会计核算
- **同步时机**: 批次状态变更为completed时自动同步
- **同步数据**:
  - 原料成本 → 成本会计科目(直接材料)
  - 人工成本 → 成本会计科目(直接人工)
  - 设备成本 → 成本会计科目(制造费用-折旧)
  - 其他成本 → 成本会计科目(制造费用-其他)
- **会计用途**: 生成成本报表、计算产品成本、分析成本结构

**集成点2: 利润分析**
- **业务场景**: 财务模块进行利润分析时读取生产数据
- **分析维度**:
  - 按时间段统计(日/周/月)
  - 按产品类型统计
  - 按生产线统计
  - 按部门统计
- **利润计算**: 总收入(销售数据) - 总成本(生产数据) = 利润
- **管理报表**: 生成管理会计报表,支持经营决策

### 2.4 关键业务规则

#### 规则1: 批次创建规则
- **规则**: 同一生产线同一时间只能有一个批次在进行
- **验证**: 创建批次时检查生产线是否被占用
- **用户体验**: 如果生产线被占用,提示"生产线A正被批次FAC001-20250105-001占用,预计2小时后可用"
- **例外情况**: factory_super_admin可以强制创建(需确认提示)

#### 规则2: 质检必须规则
- **规则**: 成品质检必须通过才能完成批次
- **验证**: 批次状态从quality_check → completed时,必须有质检记录且结果为pass
- **异常处理**: 质检不通过时批次状态变更为failed

#### 规则3: 成本计算时机
- **自动计算时机**:
  1. 批次状态变更为completed时自动触发
  2. 用户在BatchCostDetailScreen点击"重新计算"按钮时
- **成本构成说明**:
  - **原料成本**: 使用批次创建时录入的原材料成本(来自采购单据)
  - **人工成本**: 系统统计关联此批次的所有工时,自动计算(工时×时薪,加班1.5倍)
  - **设备成本**: 系统统计关联此批次的所有设备使用记录,自动计算(使用时长×折旧率)
  - **其他成本**: 能耗、包装等,暂按前三项总和的5%估算(未来可配置)
- **成本审核规则**:
  - operator和department_admin只能查看成本,不能修改
  - factory_super_admin可以调整成本数据(如发现原料成本录入错误)
  - 所有成本调整操作记录审计日志,包含调整人、调整时间、调整原因

#### 规则4: 数据权限规则
- **operator (操作员)**:
  - 只能查看自己参与的批次
  - 只能录入自己的工作记录
- **department_admin (部门管理员)**:
  - 可以查看本部门所有批次
  - 可以创建、编辑、删除批次
- **factory_super_admin (工厂超管)**:
  - 可以查看本工厂所有批次
  - 可以执行所有操作

#### 规则5: 离线数据同步规则
- **离线可操作**: 员工打卡、质检记录创建
- **离线不可操作**: 批次状态变更、成本计算
- **同步策略**:
  - 网络恢复时自动同步
  - 冲突检测: 时间戳判断,后提交的覆盖
  - 失败重试: 最多重试3次

---

## 功能模块详细设计

### 3.1 批次管理模块 (Batch Management)

#### 3.1.1 功能概述

批次管理是生产模块的核心,负责管理生产批次的完整生命周期。

**现有功能**:
- ✅ 后端API: 8个API全部完成
- ✅ 数据库表: processing_batches表完善
- ❌ 前端UI: 仅1/5页面完成(MaterialReceiptScreen)

**缺失页面**:
- ❌ BatchListScreen - 批次列表页
- ❌ BatchDetailScreen - 批次详情页
- ❌ BatchCreateScreen - 创建批次页
- ❌ BatchEditScreen - 编辑批次页
- ❌ BatchTimelineScreen - 批次时间线页

#### 3.1.2 核心功能说明

**1. 批次创建**
- **功能说明**: 生产主管创建新的生产批次,设置生产计划
- **必填信息**: 产品类型、原材料列表、目标产量、生产线、负责人、开始日期
- **可选信息**: 预期售价(用于利润计算)、备注
- **系统自动**: 生成唯一批次号、检查生产线占用、设置初始状态为planning
- **用户权限**: department_admin及以上
- **业务价值**: 启动生产任务,明确生产目标和资源分配

**2. 批次列表查询**
- **功能说明**: 查看和管理所有生产批次
- **支持筛选**: 按状态、按日期范围、按产品类型、按生产线
- **支持搜索**: 批次号模糊搜索、产品类型关键词搜索
- **支持排序**: 按开始时间、按状态、按产量排序
- **分页加载**: 每页显示20条,支持下拉刷新和上拉加载更多
- **快捷操作**: 列表项可直接执行"开始生产"、"查看详情"等操作
- **用户权限**: operator可查看自己参与的批次,department_admin可查看本部门所有批次
- **业务价值**: 全局掌握生产情况,快速定位和管理批次

**3. 批次详情查看**
- **功能说明**: 查看单个批次的完整信息
- **信息展示**:
  - 基本信息:批次号、产品类型、生产线、负责人、日期
  - 产量信息:目标产量、实际产量、完成进度(进度条)、质量等级
  - 成本信息:总成本、单位成本、成本构成饼图
  - 关联数据:质检记录列表、工时记录汇总、设备使用记录
  - 批次时间线:所有状态变更和操作记录
- **操作按钮**: 根据批次状态和用户权限动态显示(编辑/开始/暂停/完成等)
- **业务价值**: 全面了解批次信息,支持决策和操作

**4. 批次编辑**
- **功能说明**: 修改批次信息
- **编辑规则**:
  - planning状态:所有字段可编辑
  - in_progress状态:仅实际产量和备注可编辑
  - 其他状态:不允许编辑(factory_super_admin例外)
- **用户权限**: department_admin及以上
- **业务价值**: 允许纠正录入错误或调整生产计划

**5. 批次删除**
- **功能说明**: 删除不需要的批次
- **删除规则**: 仅planning状态的批次可删除
- **用户权限**: department_admin及以上
- **确认提示**: 删除前弹窗确认,防止误操作
- **业务价值**: 清理错误创建或取消的批次

**6. 批次状态变更**
- **功能说明**: 推进批次流转(开始/暂停/完成)
- **支持操作**:
  - 开始生产:planning → in_progress
  - 暂停生产:in_progress → paused
  - 恢复生产:paused → in_progress
  - 完成生产:in_progress → quality_check
  - 质检通过:quality_check → completed
  - 质检不通过:quality_check → failed
- **操作确认**: 关键操作(开始、完成)需要确认弹窗
- **用户权限**: department_admin及以上
- **业务价值**: 管理批次生命周期,确保流程规范

**7. 批次时间线**
- **功能说明**: 查看批次的所有历史操作记录
- **记录内容**: 操作类型、操作时间、操作人、操作说明、相关数据变更
- **事件类型**: 创建批次、开始生产、暂停、恢复、质检、完成、失败等
- **显示方式**: 按时间倒序排列,最新事件在顶部,时间线可视化展示
- **业务价值**: 追溯批次完整历史,审计和问题排查

#### 3.1.3 批次编号生成规则

**编号格式**: `{工厂代码}-{日期YYYYMMDD}-{当日序号}`

**示例**:
- FAC001-20250105-001 (2025年1月5日,FAC001工厂的第1个批次)
- FAC001-20250105-002 (2025年1月5日,FAC001工厂的第2个批次)
- FAC002-20250106-001 (2025年1月6日,FAC002工厂的第1个批次)

**生成逻辑**:
- 系统自动生成,用户无需输入
- 查询当日已创建批次数量,序号自动递增
- 序号从001开始,补齐3位数字
- 确保批次号全局唯一

**业务价值**:
- 批次号包含日期信息,便于快速识别
- 包含工厂代码,支持多工厂环境
- 唯一性保证,支持准确追溯

#### 3.1.4 优化方向

**1. 批次模板功能** (优先级: P1)
- 保存常用批次配置为模板(如:"速冻鱼排标准批次")
- 创建批次时可选择模板,自动填充常用参数
- 减少重复输入,提高创建效率
- 用户场景:相同产品类型的批次,只需选择模板,调整产量和日期即可

**2. 批次复制功能** (优先级: P2)
- 选择已有批次,点击"复制"创建新批次
- 自动生成新批次号,保留原批次的所有配置参数
- 用户可在复制后调整参数
- 用户场景:重复生产相同产品时快速创建

**3. 批次预测功能** (优先级: P2)
- 基于历史批次数据,预测产量和成本
- 创建批次时系统提示:"根据历史数据,此产品类型平均产量400kg,平均成本¥12.5/kg"
- AI推荐最优生产参数(原料配比、生产时长等)
- 用户场景:新手主管创建批次时获得数据支持

---

### 3.2 质量检验模块 (Quality Inspection)

#### 3.2.1 功能概述

质量检验模块负责管理生产过程中的质量控制,支持三阶段质检。

**现有功能**:
- ✅ 后端API: 6个API全部完成
- ✅ 数据库表: quality_inspections表完善
- ❌ 前端UI: 0/4页面完成

**缺失页面**:
- ❌ QualityInspectionListScreen - 质检列表页
- ❌ QualityInspectionCreateScreen - 创建质检页
- ❌ QualityInspectionDetailScreen - 质检详情页
- ❌ QualityStatisticsScreen - 质检统计页

#### 3.2.2 三阶段质检流程

生产过程中需要经历三个阶段的质量检验,确保产品质量符合标准。

**阶段1: 原料质检 (Raw Material Inspection)**

**检测时机**: 原材料接收入库前
**检测人员**: 质检员
**检测项目**:
- 感官检查:外观是否完整、色泽是否正常、气味是否新鲜
- 温度检测:冷藏原料温度是否≤4°C
- 微生物检测:部分批次抽检(大肠菌群、菌落总数)

**判定标准**:
- **合格(pass)**: 所有检测项达标,允许入库使用
- **不合格(fail)**: 有严重问题(如腐败、微生物超标),拒收退货
- **条件合格(conditional_pass)**: 轻微问题,可降级使用或特殊处理

**业务意义**: 控制源头质量,防止不合格原料进入生产,降低后续风险

**阶段2: 过程质检 (Process Inspection)**

**检测时机**: 生产过程中定期检测,建议2-4小时/次
**检测人员**: 质检员
**检测项目**:
- 加工温度:是否在标准范围(如85-95°C)
- pH值:是否在6.5-7.5之间
- 水分含量:是否≤75%
- 加工时间:是否符合工艺要求

**判定标准**:
- **合格(pass)**: 所有参数正常,继续生产
- **不合格(fail)**: 参数严重偏离,需要停止生产并调整

**业务意义**: 实时监控生产过程,及时发现和纠正问题,避免批量报废

**阶段3: 成品质检 (Final Product Inspection)**

**检测时机**: 批次生产完成后,批次状态为quality_check时
**检测人员**: 质检员
**检测项目**:
- 感官检查:色泽、气味、外观、口感
- 理化指标:蛋白质含量(≥15%)、脂肪含量(≤5%)、水分含量
- 微生物检测:大肠菌群(≤100CFU/g)、沙门氏菌(不得检出)
- 重量检测:单位重量是否符合标准
- 包装检查:包装是否完整、标签是否正确

**判定标准**:
- **合格(pass)**: 所有检测项达标,批次变为completed,允许出库
- **不合格(fail)**: 有关键项不达标,批次变为failed,产品报废或返工
- **条件合格(conditional_pass)**: 部分轻微问题,可降级处理(A级→B级)

**业务意义**: 确保成品质量,决定批次能否进入市场,保护品牌声誉和食品安全

#### 3.2.3 质检判定逻辑

**自动评分系统**:
- 系统根据检测项结果自动计算质量评分(0-100分)
- 计算方式:合格检测项数量÷总检测项数量×100
- 示例:10个检测项,9个合格,质量评分=90分

**结果判定规则**:
- **规则1**: 如果所有检测项都合格,判定为"合格(pass)",评分100分
- **规则2**: 如果有严重不合格项(大肠菌群、沙门氏菌、重金属超标),判定为"不合格(fail)",无论其他项是否合格
- **规则3**: 如果轻微不合格项≤2项,且无严重不合格项,判定为"条件合格(conditional_pass)"
- **规则4**: 如果不合格项>2项,判定为"不合格(fail)"

**质检员操作**:
- 录入所有检测项的实际值
- 系统自动判定单个检测项的合格/不合格(对比标准值)
- 系统自动计算总体结果和评分
- 质检员可以手动调整总体结果(需要填写调整原因)

#### 3.2.4 优化方向

**1. 质检模板功能** (优先级: P1)
- 按产品类型预设检测项模板
- 创建质检时自动加载对应模板
- 减少质检员手动输入,提高效率
- 示例:"速冻鱼排"自动加载10个标准检测项

**2. 照片AI识别** (优先级: P3)
- 上传质检照片后,AI自动识别可见缺陷
- AI辅助判定质检结果,提供参考建议
- 减少主观判断,提高质检一致性
- 用户场景:质检员拍摄产品照片,AI提示"检测到色泽异常"

**3. 质检提醒功能** (优先级: P2)
- 过程质检到期提醒:生产2小时后提醒质检员进行过程质检
- 质检不合格自动通知主管:质检fail时立即推送通知
- 成品质检待处理提醒:批次进入quality_check状态24小时后仍未质检,提醒质检员

1. **质检模板功能** (优先级: P1)
   - 按产品类型预设检测项
   - 快速创建质检记录

2. **照片AI识别** (优先级: P3)
   - 上传照片自动识别缺陷
   - AI辅助判定质检结果

3. **质检提醒功能** (优先级: P2)
   - 过程质检到期提醒
   - 质检不合格自动通知主管

---

### 3.3 员工工作管理模块 (Employee Work Management)

#### 3.3.1 功能概述

员工工作管理模块负责员工打卡、工时统计和工作记录管理。

**现有功能**:
- ✅ 后端API: 7个API全部完成
- ✅ 数据库表: employee_time_clocks, employee_work_sessions表完善
- ✅ 前端UI: 2/3页面完成 (TimeClockScreen, ClockHistoryScreen)

**缺失页面**:
- ❌ WorkRecordScreen - 工作记录页

#### 3.3.2 打卡流程


#### 3.3.3 数据模型


#### 3.3.4 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/timeclock/clock-in` | POST | 上班打卡 | operator+ | ✅ |
| `/api/mobile/timeclock/clock-out` | POST | 下班打卡 | operator+ | ✅ |
| `/api/mobile/timeclock/status` | GET | 当前打卡状态 | operator+ | ✅ |
| `/api/mobile/timeclock/history` | GET | 打卡历史记录 | operator+ | ✅ |
| `/api/mobile/time-stats/daily` | GET | 日工时统计 | operator+ | ✅ |
| `/api/mobile/time-stats/weekly` | GET | 周工时统计 | operator+ | ✅ |
| `/api/mobile/time-stats/monthly` | GET | 月工时统计 | department_admin+ | ✅ |

#### 3.3.5 工时统计逻辑


#### 3.3.6 优化方向

1. **GPS围栏优化** (优先级: P1)
   - 支持多个打卡点(不同车间)
   - GPS信号弱时允许手动打卡+审批

2. **班次管理** (优先级: P2)
   - 支持多班次(早班、中班、夜班)
   - 自动识别班次并计算工时

3. **工时导出** (优先级: P2)
   - 导出月度工时报表(Excel)
   - 用于薪资计算

---

### 3.4 设备监控模块 (Equipment Monitoring)

#### 3.4.1 功能概述

设备监控模块负责实时监控生产设备状态,记录设备使用情况,管理设备告警。

**现有功能**:
- ✅ 后端API: 5个API全部完成
- ✅ 数据库表: factory_equipment, device_monitoring_data, alert_notifications表完善
- ❌ 前端UI: 0/4页面完成

**缺失页面**:
- ❌ EquipmentListScreen - 设备列表页
- ❌ EquipmentMonitoringScreen - 实时监控页
- ❌ EquipmentDetailScreen - 设备详情页
- ❌ EquipmentAlertsScreen - 设备告警页

#### 3.4.2 数据模型


#### 3.4.3 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/equipment/monitoring` | GET | 设备实时监控列表 | operator+ | ✅ |
| `/api/mobile/processing/equipment/:id/metrics` | GET | 设备历史指标数据 | operator+ | ✅ |
| `/api/mobile/processing/equipment/:id/data` | POST | 上报设备监控数据 | operator+ | ✅ |
| `/api/mobile/processing/equipment/alerts` | GET | 设备告警列表 | operator+ | ✅ |
| `/api/mobile/processing/equipment/:id/status` | GET | 单个设备状态 | operator+ | ✅ |
| `/api/mobile/alerts` | GET | 所有告警列表 | operator+ | ✅ |
| `/api/mobile/alerts/:id/acknowledge` | POST | 确认告警 | department_admin+ | ✅ |
| `/api/mobile/alerts/:id/resolve` | POST | 解决告警 | department_admin+ | ✅ |

#### 3.4.4 告警触发逻辑


#### 3.4.5 优化方向

1. **实时数据推送** (优先级: P1)
   - WebSocket连接实时推送监控数据
   - 前端图表实时更新

2. **设备维护提醒** (优先级: P2)
   - 定期维护到期提醒
   - 运行时长达标提醒

3. **设备使用分析** (优先级: P2)
   - 设备利用率统计
   - 设备故障率分析

---

### 3.5 成本核算模块 (Cost Analysis)

#### 3.5.1 功能概述

成本核算模块负责自动计算批次成本,提供成本分析和AI优化建议。

**现有功能**:
- ✅ 后端API: 3个API,其中AI分析使用Mock数据
- ✅ 数据库表: processing_batches包含成本字段
- ✅ 前端UI: 1/3页面完成 (CostAnalysisDashboard)

**缺失页面**:
- ❌ BatchCostDetailScreen - 批次成本详情页
- ❌ CostTrendScreen - 成本趋势分析页

**需要优化**:
- ❌ DeepSeek AI真实集成(当前使用Mock数据)
- ❌ 成本计算公式优化
- ❌ 历史成本对比功能

#### 3.5.2 成本构成分析


#### 3.5.3 成本计算示例


#### 3.5.4 AI成本分析 (DeepSeek集成)

**当前状态**: 使用Mock数据,未集成真实DeepSeek API

**优化方案**:
1. 集成DeepSeek API
2. 成本控制在¥30/月以内
3. 使用5分钟缓存策略
4. 月预算用完后降级到规则引擎

**详细设计**: 参见 `PRD-认证与生产模块优化方案.md` 的阶段3(DeepSeek AI集成)章节

#### 3.5.5 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/batches/:id/cost-analysis` | GET | 批次成本分析 | operator+ | ✅ |
| `/api/mobile/processing/batches/:id/recalculate-cost` | POST | 重新计算成本 | department_admin+ | ✅ |
| `/api/mobile/analysis/deepseek` | POST | AI成本分析 | department_admin+ | 🟡 Mock |

#### 3.5.6 优化方向

1. **DeepSeek真实集成** (优先级: P0)
   - 替换Mock数据
   - 实现缓存策略
   - 月度预算控制

2. **成本对比功能** (优先级: P1)
   - 与目标成本对比
   - 与历史平均对比
   - 与同类批次对比

3. **成本预测功能** (优先级: P2)
   - 基于历史数据预测成本
   - 提前发现成本超标风险

---

### 3.6 生产仪表板模块 (Production Dashboard)

#### 3.6.1 功能概述

生产仪表板是生产模块的主入口,提供生产数据的可视化展示。

**现有功能**:
- ✅ 后端API: 6个API全部完成
- ✅ 数据库表: 无需额外表,聚合查询现有表
- ✅ 前端UI: 1/2页面完成 (ProcessingDashboardScreen)

**缺失页面**:
- ❌ ProductionStatisticsScreen - 生产统计详情页

#### 3.6.2 仪表板指标


#### 3.6.3 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/dashboard/overview` | GET | 仪表板概览数据 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/production` | GET | 生产统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/quality` | GET | 质量统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/equipment` | GET | 设备状态统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/alerts` | GET | 告警统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/trends` | GET | 趋势分析 | department_admin+ | ✅ |

#### 3.6.4 优化方向

1. **实时数据刷新** (优先级: P1)
   - 定时自动刷新(30秒/次)
   - 支持手动下拉刷新

2. **自定义仪表板** (优先级: P2)
   - 用户自定义显示指标
   - 拖拽调整组件顺序

3. **数据导出** (优先级: P2)
   - 导出生产报表(PDF/Excel)
   - 邮件定时发送报表

---

## 数据库设计

### 4.1 核心表结构

生产模块使用8个核心数据表:


### 4.2 数据关系ER图


### 4.3 索引优化建议


---

## API接口清单

### 5.1 API分类汇总

生产模块共计**29个API端点**:

| 模块 | API数量 | 完成状态 |
|-----|---------|---------|
| 批次管理 | 8 | ✅ 100% |
| 质量检验 | 6 | ✅ 100% |
| 员工工作 | 7 | ✅ 100% |
| 设备监控 | 5 | ✅ 100% |
| 成本分析 | 3 | 🟡 80% (AI Mock) |
| 生产仪表板 | 6 | ✅ 100% |
| **总计** | **35** | **97%** |

### 5.2 完整API清单

#### 5.2.1 批次管理API (8个)


#### 5.2.2 质量检验API (6个)


#### 5.2.3 员工工作API (7个)


#### 5.2.4 设备监控API (5个)


#### 5.2.5 成本分析API (3个)


#### 5.2.6 生产仪表板API (6个)


#### 5.2.7 告警管理API (6个)


### 5.3 API请求/响应示例

详见各子模块的API使用示例部分。

---

## 前端页面设计

### 6.1 页面总览

生产模块共需开发**20个前端页面**,当前仅完成**5个页面**(25%完成度)。

**页面分类**:

| 模块 | 页面数 | 已完成 | 待开发 | 优先级 |
|-----|--------|--------|--------|--------|
| **批次管理** | 5 | 0 | 5 | P0 |
| **质量检验** | 4 | 0 | 4 | P0 |
| **员工工作** | 3 | 2 | 1 | P1 |
| **设备监控** | 4 | 0 | 4 | P1 |
| **成本分析** | 3 | 1 | 2 | P1 |
| **生产仪表板** | 2 | 1 | 1 | P0 |
| **数据导出** | 1 | 0 | 1 | P2 |
| **总计** | **22** | **4** | **18** | - |

### 6.2 批次管理页面 (5页)

#### 6.2.1 BatchListScreen - 批次列表页

**路径**: `/src/screens/processing/batch/BatchListScreen.tsx`

**功能清单**:
- [ ] 批次列表展示(卡片式布局)
- [ ] 下拉刷新
- [ ] 上拉加载更多(分页,每页20条)
- [ ] 状态筛选标签页(全部/进行中/已完成等)
- [ ] 日期范围筛选
- [ ] 搜索(批次号、产品类型)
- [ ] 排序(按开始时间、状态、产量)
- [ ] 快捷操作按钮(开始生产、查看详情)
- [ ] 空状态提示

**UI组件**:

**页面跳转**:
- → `BatchDetailScreen` (点击批次卡片)
- → `BatchCreateScreen` (点击创建按钮)
- → `BatchEditScreen` (快捷操作-编辑)

**数据加载**:

---

#### 6.2.2 BatchDetailScreen - 批次详情页

**路径**: `/src/screens/processing/batch/BatchDetailScreen.tsx`

**功能清单**:
- [ ] 批次基本信息展示
- [ ] 批次状态流转可视化
- [ ] 产量进度条
- [ ] 成本构成饼图
- [ ] 关联质检记录列表
- [ ] 关联工时记录列表
- [ ] 关联设备使用记录
- [ ] 批次时间线(可展开)
- [ ] 操作按钮组(根据状态和权限动态显示)
- [ ] 编辑按钮(仅planning状态可编辑)

**UI布局**:

**权限控制**:

**页面跳转**:
- → `BatchEditScreen` (编辑按钮)
- → `BatchTimelineScreen` (查看时间线)
- → `BatchCostDetailScreen` (查看成本详情)
- → `QualityInspectionDetailScreen` (查看质检详情)
- → `QualityInspectionCreateScreen` (创建质检)

---

#### 6.2.3 BatchCreateScreen - 创建批次页

**路径**: `/src/screens/processing/batch/BatchCreateScreen.tsx`

**功能清单**:
- [ ] 表单验证(必填项检查)
- [ ] 产品类型选择器(Picker)
- [ ] 原材料多选
- [ ] 数量输入(数字键盘)
- [ ] 生产线选择
- [ ] 负责人选择(部门筛选)
- [ ] 开始日期选择(DatePicker)
- [ ] 备注输入(多行文本)
- [ ] 提交前确认弹窗
- [ ] 加载状态显示

**表单字段**:

**UI组件**:

**提交逻辑**:

**页面跳转**:
- → `BatchListScreen` (创建成功后返回)
- → `BatchDetailScreen` (创建成功可选跳转到详情)

---

#### 6.2.4 BatchEditScreen - 编辑批次页

**路径**: `/src/screens/processing/batch/BatchEditScreen.tsx`

**功能清单**:
- [ ] 加载现有批次数据
- [ ] 表单预填充
- [ ] 仅允许修改部分字段(根据状态)
- [ ] 表单验证
- [ ] 保存变更
- [ ] 取消编辑确认

**编辑规则**:

**UI与BatchCreateScreen类似,区别**:
- 表单预填充现有数据
- 根据状态禁用部分字段
- 保存按钮文案为"保存修改"

---

#### 6.2.5 BatchTimelineScreen - 批次时间线页

**路径**: `/src/screens/processing/batch/BatchTimelineScreen.tsx`

**功能清单**:
- [ ] 时间线可视化展示
- [ ] 事件详情查看
- [ ] 按时间排序(最新在上)
- [ ] 事件类型图标区分
- [ ] 支持刷新加载最新事件

**事件类型**:

**UI组件**:

---

### 6.3 质量检验页面 (4页)

#### 6.3.1 QualityInspectionListScreen - 质检列表页

**路径**: `/src/screens/quality/QualityInspectionListScreen.tsx`

**功能清单**:
- [ ] 质检记录列表展示
- [ ] 按质检类型筛选(原料/过程/成品)
- [ ] 按质检结果筛选(合格/不合格/条件合格)
- [ ] 搜索(批次号、检测员)
- [ ] 下拉刷新、上拉加载更多
- [ ] 查看质检详情
- [ ] 创建质检记录

**UI组件**:

---

#### 6.3.2 QualityInspectionCreateScreen - 创建质检页

**路径**: `/src/screens/quality/QualityInspectionCreateScreen.tsx`

**功能清单**:
- [ ] 选择批次(批次选择器)
- [ ] 选择质检类型(原料/过程/成品)
- [ ] 根据质检类型加载检测项模板
- [ ] 录入检测结果
- [ ] 拍照上传(最多10张)
- [ ] 不合格项记录
- [ ] 纠正措施记录
- [ ] 质检结果自动判定
- [ ] 提交质检

**表单字段**:

**检测项输入**:

---

#### 6.3.3 QualityInspectionDetailScreen - 质检详情页

**功能清单**:
- [ ] 质检基本信息展示
- [ ] 检测项结果展示
- [ ] 照片查看(支持放大)
- [ ] 质检评分可视化
- [ ] 不合格项展示(如果有)
- [ ] 纠正措施展示
- [ ] 关联批次信息

---

#### 6.3.4 QualityStatisticsScreen - 质检统计页

**功能清单**:
- [ ] 质检合格率趋势图(折线图)
- [ ] 不合格项TOP10(柱状图)
- [ ] 质检员绩效排名
- [ ] 按产品类型统计
- [ ] 按时间段统计(日/周/月)
- [ ] 数据导出

**图表组件**:

---

### 6.4 员工工作页面 (3页)

#### 6.4.1 TimeClockScreen - 打卡主页 (✅ 已完成)

**路径**: `/src/screens/timeclock/TimeClockScreen.tsx`

**现有功能**: 上班/下班打卡、GPS位置记录、打卡照片

---

#### 6.4.2 ClockHistoryScreen - 打卡历史 (✅ 已完成)

**路径**: `/src/screens/timeclock/ClockHistoryScreen.tsx`

**现有功能**: 历史打卡记录查询、日历视图

---

#### 6.4.3 WorkRecordScreen - 工作记录页 (❌ 待开发)

**路径**: `/src/screens/processing/WorkRecordScreen.tsx`

**功能清单**:
- [ ] 个人工作记录列表
- [ ] 按批次筛选
- [ ] 按工作类型筛选
- [ ] 工作效率统计
- [ ] 工时明细
- [ ] 导出工作报表

---

### 6.5 设备监控页面 (4页)

#### 6.5.1 EquipmentListScreen - 设备列表页

**路径**: `/src/screens/equipment/EquipmentListScreen.tsx`

**功能清单**:
- [ ] 设备列表展示
- [ ] 设备状态筛选(正常/警告/故障/维护中)
- [ ] 设备类型筛选
- [ ] 设备实时状态指示灯
- [ ] 快速查看设备详情
- [ ] 跳转到实时监控

---

#### 6.5.2 EquipmentMonitoringScreen - 实时监控页

**路径**: `/src/screens/equipment/EquipmentMonitoringScreen.tsx`

**功能清单**:
- [ ] 多设备监控面板
- [ ] 实时参数展示(温度/湿度/压力/运行时长)
- [ ] 实时曲线图
- [ ] 状态指示灯(正常/警告/故障)
- [ ] 异常告警提示
- [ ] 自动刷新(每30秒)
- [ ] 手动刷新

**UI组件**:

---

#### 6.5.3 EquipmentDetailScreen - 设备详情页

**功能清单**:
- [ ] 设备基本信息
- [ ] 设备规格参数
- [ ] 运行状态历史
- [ ] 维护记录
- [ ] 使用记录
- [ ] 告警历史
- [ ] 报修功能

---

#### 6.5.4 EquipmentAlertsScreen - 设备告警页

**功能清单**:
- [ ] 告警列表
- [ ] 按严重程度筛选(critical/high/medium/low)
- [ ] 按状态筛选(active/acknowledged/resolved)
- [ ] 告警详情查看
- [ ] 告警确认
- [ ] 告警处理记录

**告警卡片**:

---

### 6.6 成本分析页面 (3页)

#### 6.6.1 CostAnalysisDashboard - 成本仪表板 (✅ 已完成)

**路径**: `/src/screens/analysis/CostAnalysisDashboard.tsx`

**现有功能**: 成本概览、成本趋势图

---

#### 6.6.2 BatchCostDetailScreen - 批次成本详情页 (❌ 待开发)

**路径**: `/src/screens/analysis/BatchCostDetailScreen.tsx`

**功能清单**:
- [ ] 成本构成饼图
- [ ] 成本明细表
- [ ] 单位成本计算
- [ ] 利润率计算
- [ ] 成本对比(目标成本、历史平均)
- [ ] AI优化建议
- [ ] 成本分析报告导出

**UI组件**:

---

#### 6.6.3 CostTrendScreen - 成本趋势分析页 (❌ 待开发)

**功能清单**:
- [ ] 成本趋势折线图(近30天)
- [ ] 成本对比柱状图(按产品类型)
- [ ] 成本超标预警
- [ ] 成本优化目标设置
- [ ] 成本分析报告生成

---

### 6.7 生产仪表板页面 (2页)

#### 6.7.1 ProcessingDashboardScreen - 生产仪表板 (✅ 已完成)

**路径**: `/src/screens/processing/ProcessingDashboardScreen.tsx`

**现有功能**: 生产概览、关键指标展示

---

#### 6.7.2 ProductionStatisticsScreen - 生产统计详情页 (❌ 待开发)

**路径**: `/src/screens/processing/ProductionStatisticsScreen.tsx`

**功能清单**:
- [ ] 生产数据详细统计
- [ ] 按时间段统计(日/周/月)
- [ ] 按产品类型统计
- [ ] 按生产线统计
- [ ] 产量趋势图
- [ ] 效率分析
- [ ] 数据导出

---

### 6.8 数据导出页面 (1页)

#### 6.8.1 DataExportScreen - 数据导出页 (❌ 待开发)

**路径**: `/src/screens/processing/DataExportScreen.tsx`

**功能清单**:
- [ ] 选择导出类型(批次报表/质检报表/工时报表/成本报表)
- [ ] 选择时间范围
- [ ] 选择导出格式(PDF/Excel/CSV)
- [ ] 预览报表
- [ ] 导出到本地
- [ ] 分享报表(邮件/微信/其他)

---

## 页面跳转关系图

### 7.1 整体导航架构


### 7.2 批次管理模块导航流程


### 7.3 质检管理模块导航流程


### 7.4 设备监控模块导航流程


### 7.5 成本分析模块导航流程


### 7.6 跨模块跳转关系


### 7.7 页面栈管理

**主导航栈** (Main Stack):

**批次栈** (Batch Stack):

**质检栈** (Quality Stack):

---

## 与其他模块的协作

### 8.1 生产模块在系统中的位置


### 8.2 认证模块集成

**用户权限控制**:

**页面权限守卫**:

### 8.3 员工管理模块集成

#### 8.3.1 集成点1: 批次负责人选择

**前端调用**:

#### 8.3.2 集成点2: 工时记录关联批次

**员工打卡时关联批次**:

#### 8.3.3 集成点3: 成本核算读取工时

**后端成本计算时读取工时数据**:

**数据流向**:

### 8.4 设备监控模块集成

#### 8.4.1 集成点1: 批次执行时启动设备使用

**批次开始生产时自动记录设备使用**:

#### 8.4.2 集成点2: 设备告警影响批次

**设备严重故障时自动暂停关联批次**:

#### 8.4.3 集成点3: 成本核算读取设备数据

**计算设备成本**:

### 8.5 仓储模块集成 (未来规划 - Phase 4+)

#### 8.5.1 集成点1: 批次创建时原料出库

**业务流程**:

**数据同步**:

#### 8.5.2 集成点2: 批次完成时成品入库

**业务流程**:

**追溯码生成**:

### 8.6 销售模块集成 (未来规划 - Phase 5+)

#### 8.6.1 集成点1: 销售订单关联批次

**业务流程**:

#### 8.6.2 集成点2: 成本数据用于定价

**读取批次成本用于产品定价**:

### 8.7 财务模块集成 (未来规划 - Phase 6+)

#### 8.7.1 集成点1: 批次成本数据同步

**数据同步流程**:

#### 8.7.2 集成点2: 利润分析

**财务模块读取生产数据进行利润分析**:

### 8.8 数据流向总览


---

## 优化方向

### 9.1 前端UI开发 (优先级: P0)

**目标**: 完成15-20个缺失页面的开发

**工作量估算**:
- 批次管理页面: 5个 × 4天 = 20天
- 质检管理页面: 4个 × 3天 = 12天
- 设备监控页面: 4个 × 3天 = 12天
- 成���分析页面: 2个 × 3天 = 6天
- 其他页面: 2个 × 2天 = 4天
- **总计**: 54天 (约11周,2人并行开发可缩短到6周)

**技术要求**:
- 遵循Material Design 3设计规范
- 响应式布局(适配不同屏幕尺寸)
- 组件复用(抽取通用组件)
- 性能优化(列表虚拟化、图片懒加载)

### 9.2 DeepSeek AI集成 (优先级: P0)

**当前问题**: AI分析使用Mock数据,无法提供真实的成本优化建议

**优化方案**:
1. 集成真实DeepSeek API
2. 实现5分钟缓存策略(相同查询不重复调用)
3. 月度预算控制(¥30/月)
4. 预算用完后降级到规则引擎

**详细设计**: 参见 `PRD-认证与生产模块优化方案.md` 的阶段3

**实施步骤**:
- Week 1: DeepSeek API集成
- Week 2: 缓存策略实现
- Week 3: 预算控制和降级逻辑
- Week 4: 测试和优化

### 9.3 离线功能支持 (优先级: P1)

**目标**: 核心功能支持离线操作

**离线可操作**:
- ✅ 员工打卡(离线缓存,联网后同步)
- ✅ 质检记录创建(离线保存,联网后提交)
- ✅ 批次列表查看(本地缓存)

**离线不可操作**:
- ❌ 批次状态变更(需实时性)
- ❌ 成本计算(需服务器计算)
- ❌ AI分析(需调用API)

**实现方案**:

### 9.4 性能优化 (优先级: P1)

#### 9.4.1 API性能优化

**问题**: 批次列表查询慢,质检记录多时响应慢

**优化方案**:
1. **数据库索引优化**

2. **查询优化**

3. **Redis缓存**

#### 9.4.2 前端性能优化

**优化项**:
1. **列表虚拟化**

2. **图片懒加载和压缩**

3. **数据缓存**

### 9.5 用户体验优化 (优先级: P2)

#### 9.5.1 操作反馈优化

**优化项**:
1. 加载状态显示
   - 骨架屏(Skeleton Screen)
   - 加载动画(Spinner)
   - 进度条(Progress Bar)

2. 成功/失败提示
   - Toast消息(轻量提示)
   - Alert弹窗(重要操作)
   - 震动反馈(Haptic Feedback)

3. 表单验证提示
   - 实时验证
   - 字段级错误提示
   - 友好的错误消息

#### 9.5.2 智能功能

**优化项**:
1. **批次号智能生成预览**
   - 创建批次时预览批次号
   - 自动检测冲突

2. **表单自动填充**
   - 基于历史记录自动填充
   - 智能推荐原材料

3. **异常预警**
   - 成本超标预警
   - 产量不足预警
   - 质检异常预警

---

## 实施计划

### 10.1 总体时间规划

**实施周期**: 4-6周
**开发人员**: 2名前端开发 + 1名后端开发

| 周次 | 主要任务 | 产出物 | 责任人 |
|-----|---------|--------|--------|
| **Week 1** | 批次管理UI开发(列表、详情) | 2个页面 | 前端1+2 |
| **Week 2** | 批次管理UI开发(创建、编辑、时间线) | 3个页面 | 前端1+2 |
| **Week 3** | 质检管理UI开发 | 4个页面 | 前端1+2 |
| **Week 4** | 设备监控UI开发 | 4个页面 | 前端1+2 |
| **Week 5** | 成本分析页面+DeepSeek集成 | 2个页面+AI集成 | 前端1+后端1 |
| **Week 6** | 性能优化、测试、Bug修复 | 可发布版本 | 全员 |

### 10.2 详细任务分解

#### Week 1: 批次管理UI开发(1)

**前端开发1** (5天):
- Day 1-2: BatchListScreen (批次列表页)
  - 列表组件
  - 筛选功能
  - 搜索功能
  - 分页加载
- Day 3-5: BatchDetailScreen (批次详情页)
  - 基本信息展示
  - 状态流转可视化
  - 成本饼图
  - 操作按钮组

**前端开发2** (5天):
- Day 1-3: 通用组件开发
  - BatchCard (批次卡片)
  - StatusBadge (状态徽章)
  - ProgressBar (进度条)
  - CostPieChart (成本饼图)
- Day 4-5: BatchDetailScreen辅助功能
  - 质检记录列表
  - 工时记录展示
  - 时间线组件

**后端开发** (5天):
- Day 1-2: 优化批次查询API性能
- Day 3-4: 添加缺失的批次API(resume等)
- Day 5: API文档更新

---

#### Week 2: 批次管理UI开发(2)

**前端开发1** (5天):
- Day 1-3: BatchCreateScreen (创建批次页)
  - 表单设计
  - 原材料选择器
  - 负责人选择器
  - 表单验证
- Day 4-5: BatchEditScreen (编辑批次页)
  - 复用创建页面组件
  - 编辑权限控制
  - 数据预填充

**前端开发2** (5天):
- Day 1-3: BatchTimelineScreen (批次时间线页)
  - 时间线组件
  - 事件类型配置
  - 操作人信息展示
- Day 4-5: 批次相关API集成
  - 创建批次API调用
  - 状态变更API调用
  - 错误处理

---

#### Week 3: 质检管理UI开发

**前端开发1** (5天):
- Day 1-2: QualityInspectionListScreen (质检列表)
  - 列表组件
  - 类型筛选
  - 结果筛选
- Day 3-5: QualityInspectionCreateScreen (创建质检)
  - 批次选择器
  - 检测项输入
  - 照片上传
  - 纠正措施输入

**前端开发2** (5天):
- Day 1-2: QualityInspectionDetailScreen (质检详情)
  - 基本信息展示
  - 检测项结果展示
  - 照片查看器
- Day 3-5: QualityStatisticsScreen (质检统计)
  - 合格率趋势图
  - 不合格项TOP10
  - 质检员排名

**后端开发** (5天):
- Day 1-3: 质检API优化和补充
- Day 4-5: 质检统计API开发

---

#### Week 4: 设备监控UI开发

**前端开发1** (5天):
- Day 1-2: EquipmentListScreen (设备列表)
- Day 3-5: EquipmentMonitoringScreen (实时监控)
  - 监控面板
  - 实时曲线图
  - 自动刷新机制

**前端开发2** (5天):
- Day 1-2: EquipmentDetailScreen (设备详情)
- Day 3-5: EquipmentAlertsScreen (设备告警)
  - 告警列表
  - 告警确认
  - 告警处理

**后端开发** (5天):
- Day 1-3: 设备监控API优化
- Day 4-5: 告警推送机制优化

---

#### Week 5: 成本分析+AI集成

**前端开发1** (5天):
- Day 1-3: BatchCostDetailScreen (批次成本详情)
  - 成本构成可视化
  - AI分析结果展示
  - 成本对比
- Day 4-5: CostTrendScreen (成本趋势)

**前端开发2** (5天):
- Day 1-3: DeepSeek AI前端集成
  - AI分析请求
  - 结果展示组件
  - Loading状态
- Day 4-5: 成本相关组件优化

**后端开发** (5天):
- Day 1-4: DeepSeek API集成
  - API调用封装
  - 缓存策略
  - 预算控制
  - 降级逻辑
- Day 5: 成本计算优化

---

#### Week 6: 性能优化+测试

**前端开发1** (5天):
- Day 1-2: 性能优化
  - 列表虚拟化
  - 图片懒加载
  - 缓存优化
- Day 3-5: 功能测试和Bug修复

**前端开发2** (5天):
- Day 1-2: 用户体验优化
  - 加载状态
  - 错误提示
  - 交互反馈
- Day 3-5: 功能测试和Bug修复

**后端开发** (5天):
- Day 1-2: 性能优化
  - 数据库索引
  - Redis缓存
  - API响应优化
- Day 3-5: 集成测试和Bug修复

---

### 10.3 里程碑

| 里程碑 | 时间 | 标志 | 验收标准 |
|-------|------|------|---------|
| **M1: 批次管理完成** | Week 2 结束 | 批次CRUD全部可用 | 5个页面完成,API集成 |
| **M2: 质检管理完成** | Week 3 结束 | 质检流程可用 | 4个页面完成,API集成 |
| **M3: 设备监控完成** | Week 4 结束 | 设备监控可用 | 4个页面完成,API集成 |
| **M4: AI集成完成** | Week 5 结束 | AI分析可用 | DeepSeek真实集成 |
| **M5: 系统优化完成** | Week 6 结束 | 可发布版本 | 性能达标,Bug<10个 |

### 10.4 风险管理

**风险清单**:

| 风险 | 概率 | 影响 | 应对措施 |
|-----|------|------|---------|
| **前端人手不足** | 中 | 高 | 提前1周招聘,或延长周期 |
| **DeepSeek API限制** | 低 | 中 | 准备备用AI服务(如通义千问) |
| **性能不达标** | 中 | 中 | 提前进行性能测试,预留优化时间 |
| **需求变更** | 高 | 中 | 每周review,控制范围蔓延 |
| **数据库迁移** | 低 | 高 | 提前备份,灰度发布 |

---

## 验收标准

### 11.1 功能完整性

| 验收项 | 标准 | 验收方式 |
|-------|------|---------|
| **页面完成度** | 18/18页面完成(100%) | 页面清单逐一检查 |
| **API集成** | 所有页面与后端API正常交互 | 功能测试 |
| **业务流程** | 完整生产流程可走通 | 端到端测试 |
| **权限控制** | 7种角色权限正确 | 权限测试 |
| **离线功能** | 打卡、质检支持离线 | 离线测试 |
| **AI分析** | DeepSeek真实集成,成本<¥30/月 | 成本监控 |

### 11.2 性能指标

| 指标 | 目标值 | 当前值 | 测试方法 |
|-----|-------|--------|---------|
| **App启动时间** | <3秒 | - | 冷启动测试 |
| **API响应时间** | <500ms | - | API性能测试 |
| **列表加载时间** | <2秒 | - | 页面加载测试 |
| **列表滚动帧率** | ≥60fps | - | 性能监控工具 |
| **内存占用** | <200MB | - | 内存监控 |
| **崩溃率** | <1% | - | Crashlytics监控 |

### 11.3 用户体验

| 验收项 | 标准 | 验收方式 |
|-------|------|---------|
| **操作流畅度** | 无明显卡顿,动画流畅 | 用户测试 |
| **错误提示** | 所有错误有友好提示 | 异常场景测试 |
| **加载状态** | 所有异步操作有Loading | UI检查 |
| **表单验证** | 所有必填项有验证,提示清晰 | 表单测试 |
| **空状态** | 所有列表有空状态提示 | UI检查 |
| **网络异常处理** | 断网/超时有提示和重试 | 网络异常测试 |

### 11.4 代码质量

| 验收项 | 标准 | 验收方式 |
|-------|------|---------|
| **代码规范** | ESLint无错误,警告<10个 | 代码检查 |
| **组件复用** | 通用组件提取到components目录 | 代码Review |
| **API封装** | 所有API调用统一封装 | 代码Review |
| **错误处理** | 所有API调用有try-catch | 代码Review |
| **类型安全** | TypeScript strict模式,无any | 类型检查 |
| **注释完整** | 复杂逻辑有注释说明 | 代码Review |

### 11.5 测试覆盖

| 测试类型 | 覆盖率目标 | 当前值 | 测试工具 |
|---------|----------|--------|---------|
| **单元测试** | 核心业务逻辑>80% | - | Jest |
| **集成测试** | 关键API>90% | - | Supertest |
| **UI测试** | 核心页面>70% | - | React Native Testing Library |
| **E2E测试** | 主流程100% | - | Detox |

### 11.6 发布检查清单

**正式发布前检查**:
- [ ] 所有Mock代码已移除
- [ ] 所有console.log已移除或改为生产环境不输出
- [ ] 所有硬编码的测试数据已移除
- [ ] API地址已切换到生产环境
- [ ] 敏感信息(密钥、Token)已环境变量化
- [ ] 应用图标和启动画面已替换为正式版
- [ ] 应用版本号已更新
- [ ] 应用权限申请已完善
- [ ] Crashlytics监控已配置
- [ ] 性能监控已配置
- [ ] 用户反馈渠道已配置

---

## 附录

### A. 相关文档

- **PRD-系统产品需求文档.md** - 系统整体需求
- **PRD-认证规划.md** - 认证系统详细设计
- **PRD-认证与生产模块优化方案.md** - 优化方案(包含DeepSeek集成)
- **API_DOCUMENTATION.md** - 后端API文档
- **backend/prisma/schema.prisma** - 数据库Schema

### B. 术语表

| 术语 | 英文 | 说明 |
|-----|------|------|
| **批次** | Batch | 一次完整的生产过程 |
| **批次号** | Batch Number | 唯一标识一个批次,格式: FAC001-20250105-001 |
| **工时** | Work Hours | 员工工作时长,以小时或分钟计 |
| **工种** | Work Type | 员工工作类型,如生产、质检等 |
| **质检** | Quality Inspection | 质量检验,包括原料、过程、成品三阶段 |
| **合格率** | Pass Rate | 质检合格数/总质检数 |
| **单位成本** | Cost Per Unit | 总成本/产量 |
| **利润率** | Profit Rate | (售价-成本)/售价 |
| **折旧率** | Deprecation Rate | 设备折旧费用/小时 |
| **追溯码** | Traceability Code | 产品追溯二维码,绑定批次ID |

### C. 技术栈

**前端**:
- React Native 0.76+
- Expo 53+
- React Navigation 7+
- Zustand (状态管理)
- React Query (数据缓存)
- Zod (数据验证)
- React Native Chart Kit (图表)
- React Native Fast Image (图片优化)
- @shopify/flash-list (列表虚拟化)

**后端**:
- Node.js 18+
- Express.js 4.18+
- Prisma 5.22+ (ORM)
- MySQL 8.0+
- Redis (可选,用于缓存)
- DeepSeek API (AI分析)

**开发工具**:
- TypeScript 5.0+
- ESLint + Prettier
- Jest (单元测试)
- React Native Testing Library
- Detox (E2E测试)

---

**文档结束**

*最后更新: 2025-01-05*
*文档版本: v1.0*
*作者: 白垩纪食品溯源系统开发团队*

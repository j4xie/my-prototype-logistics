# 白垩纪食品溯源系统 - 生产模块规划文档

**文档版本**: v1.0
**创建日期**: 2025-01-05
**实施周期**: 4-6周
**文档状态**: 待实施

---

## 📋 目录

1. [生产模块概述](#生产模块概述)
2. [业务流程分析](#业务流程分析)
3. [功能模块详细设计](#功能模块详细设计)
4. [数据库设计](#数据库设计)
5. [API接口清单](#api接口清单)
6. [前端页面设计](#前端页面设计)
7. [页面跳转关系图](#页面跳转关系图)
8. [与其他模块的协作](#与其他模块的协作)
9. [优化方向](#优化方向)
10. [实施计划](#实施计划)
11. [验收标准](#验收标准)

---

## 生产模块概述

### 1.1 系统定位

生产模块是白垩纪食品溯源系统的**核心业务模块**,负责管理从原材料接收到成品产出的完整生产流程。

**设计原则**:
- 🎯 **流程完整**: 覆盖生产全生命周期管理
- 📊 **数据驱动**: 实时记录生产数据,支持成本核算和智能分析
- 🔗 **协同工作**: 与员工管理、设备监控、仓储等模块深度集成
- 💰 **成本可控**: 精细化成本核算,AI智能分析优化建议
- 📱 **移动优先**: 优化移动端操作体验,支持离线功能

### 1.2 核心功能清单

**6大核心子模块**:

1. **批次管理** (Batch Management)
   - ✅ 批次创建、编辑、删除
   - ✅ 批次状态流转(planning → in_progress → quality_check → completed)
   - ✅ 批次时间线追踪
   - ✅ 批次数据查询和筛选

2. **质量检验** (Quality Inspection)
   - ✅ 三阶段质检(原料质检 → 过程质检 → 成品质检)
   - ✅ 质检记录创建和查询
   - ✅ 质检照片上传
   - ✅ 质检统计和趋势分析

3. **员工工作管理** (Employee Work Management)
   - ✅ 员工打卡(上班/下班)
   - ✅ 工作时段记录
   - ✅ 工时统计(日/周/月)
   - ✅ 工作记录关联批次

4. **设备监控** (Equipment Monitoring)
   - ✅ 设备实时监控(温度、湿度、压力、运行时长)
   - ✅ 设备使用记录
   - ✅ 设备告警管理(3级告警)
   - ✅ 设备维护记录

5. **成本核算** (Cost Analysis)
   - ✅ 成本自动计算(原料+人工+设备)
   - ✅ 成本构成分析
   - ✅ AI智能成本分析(DeepSeek集成)
   - ✅ 成本趋势对比

6. **生产仪表板** (Production Dashboard)
   - ✅ 生产概览(今日/本周/本月)
   - ✅ 关键指标展示(产量、合格率、成本、效率)
   - ✅ 告警摘要
   - ✅ 趋势分析

### 1.3 技术架构

```
┌─────────────────────────────────────────────────────────────┐
│                   移动端 (React Native)                      │
│  ┌──────────────────────────────────────────────────────┐  │
│  │                    生产仪表板                         │  │
│  │  ProcessingDashboardScreen (生产概览)                │  │
│  └─────────┬────────────────────────────────────────────┘  │
│            │                                                │
│  ┌─────────┴─────────┬─────────┬─────────┬─────────┬─────┐│
│  │                   │         │         │         │      ││
│  ▼                   ▼         ▼         ▼         ▼      ││
│ ┌──────┐ ┌─────────┐┌────────┐┌────────┐┌────────┐┌─────┐││
│ │批次  │ │ 质检    ││ 员工   ││ 设备   ││ 成本   ││数据 │││
│ │管理  │ │ 管理    ││ 工作   ││ 监控   ││ 分析   ││导出 │││
│ │(5页) │ │ (4页)   ││ (3页)  ││ (4页)  ││ (3页)  ││(1页)│││
│ └──────┘ └─────────┘└────────┘└────────┘└────────┘└─────┘││
└─────────────────────────────────────────────────────────────┘
                            │ HTTPS/REST API
                            ↓
┌─────────────────────────────────────────────────────────────┐
│                 后端API (Node.js + Express)                  │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  Processing API (29个生产相关端点)                    │  │
│  ├──────────────────────────────────────────────────────┤  │
│  │  • /api/mobile/processing/* (批次、质检、设备)        │  │
│  │  • /api/mobile/timeclock/* (打卡、工时)              │  │
│  │  • /api/mobile/time-stats/* (工时统计)               │  │
│  │  • /api/mobile/analysis/* (AI成本分析)                │  │
│  └──────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────┘
                            │
                            ↓
┌─────────────────────────────────────────────────────────────┐
│                    数据库 (MySQL)                            │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  • processing_batches (批次主表)                      │  │
│  │  • quality_inspections (质检记录)                     │  │
│  │  • employee_time_clocks (打卡记录)                    │  │
│  │  • employee_work_sessions (工作时段)                  │  │
│  │  • factory_equipment (设备管理)                       │  │
│  │  • device_monitoring_data (监控数据)                  │  │
│  │  • alert_notifications (告警通知)                     │  │
│  │  • ai_analysis_logs (AI分析日志)                      │  │
│  └──────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────┘
```

### 1.4 现有功能完成度评估

| 子模块 | 后端API | 数据库表 | 前端UI | 整体完成度 | 状态 |
|-------|---------|---------|--------|-----------|------|
| **批次管理** | 100% (8个API) | 100% | 30% (1/5页) | 77% | 🟡 需要大量前端开发 |
| **质量检验** | 100% (6个API) | 100% | 20% (0/4页) | 73% | 🟡 需要全部前端页面 |
| **员工工作** | 100% (7个API) | 100% | 70% (2/3页) | 90% | 🟢 接近完成 |
| **设备监控** | 100% (5个API) | 100% | 10% (0/4页) | 70% | 🟡 需要全部前端页面 |
| **成本核算** | 80% (3个API) | 100% | 40% (1/3页) | 73% | 🟡 AI集成待完善 |
| **生产仪表板** | 100% (6个API) | 100% | 50% (1/2页) | 83% | 🟡 需要优化 |

**总体完成度**: **约78%**

**核心问题**:
- ✅ 后端API已完成95%以上,数据库表结构完善
- ❌ 前端UI缺失严重,20个页面中仅完成5个(25%)
- ❌ AI分析功能使用Mock数据,未集成真实DeepSeek API
- ❌ 缺少离线功能支持
- ❌ 性能优化不足(缓存、分页)

---

## 业务流程分析

### 2.1 完整生产业务线

```
┌────────────────────────────────────────────────────────────────┐
│                        生产业务全流程                           │
└────────────────────────────────────────────────────────────────┘

步骤1: 原材料接收 (Material Receipt)
  ↓
  操作: 接收部门录入原材料信息
  页面: MaterialReceiptScreen
  数据: raw_material_category, raw_material_weight, raw_material_cost
  验证: 原材料质检(质检员)

步骤2: 批次创建 (Batch Creation)
  ↓
  操作: 生产主管创建生产批次
  页面: BatchCreateScreen
  数据: 产品类型、目标产量、生产线、负责人
  权限: department_admin及以上

步骤3: 员工打卡上班 (Clock In)
  ↓
  操作: 生产员工开始工作
  页面: TimeClockScreen
  数据: 打卡时间、GPS位置、工作类型
  关联: 创建work_session记录

步骤4: 设备使用开始 (Equipment Usage Start)
  ↓
  操作: 记录设备使用开始时间
  API: POST /processing/equipment-usage/start
  数据: equipment_id, batch_id, start_time

步骤5: 批次生产执行 (Production Execution)
  ↓
  操作: 生产主管点击"开始生产"
  页面: BatchDetailScreen
  API: POST /processing/batches/:id/start
  状态变更: planning → in_progress

步骤6: 过程质检 (Process Quality Inspection)
  ↓
  操作: 质检员定期进行过程质检
  页面: QualityInspectionCreateScreen
  数据: 温度、pH、微生物检测结果
  频率: 根据产品类型,建议2-4小时/次

步骤7: 设备监控和告警 (Equipment Monitoring)
  ↓
  自动: 系统自动采集设备监控数据
  页面: EquipmentMonitoringScreen
  告警: 参数超标时触发告警
  处理: 告警确认 → 纠正措施

步骤8: 批次完成 (Batch Completion)
  ↓
  操作: 生产主管点击"完成生产"
  页面: BatchDetailScreen
  API: POST /processing/batches/:id/complete
  状态变更: in_progress → quality_check

步骤9: 成品质检 (Final Quality Inspection)
  ↓
  操作: 质检员进行成品质检
  页面: QualityInspectionCreateScreen
  结果: pass → completed | fail → failed
  状态变更: quality_check → completed/failed

步骤10: 设备使用结束 (Equipment Usage End)
  ↓
  操作: 记录设备使用结束时间
  API: POST /processing/equipment-usage/end
  计算: 设备使用时长、设备成本

步骤11: 员工下班打卡 (Clock Out)
  ↓
  操作: 生产员工下班打卡
  页面: TimeClockScreen
  计算: 工时、加班时长
  关联: 更新work_session记录

步骤12: 成本核算 (Cost Calculation)
  ↓
  自动: 系统自动计算批次总成本
  API: POST /processing/batches/:batchId/recalculate-cost
  公式: 总成本 = 原料成本 + 人工成本 + 设备成本 + 其他成本
  数据:
    - 原料成本: raw_material_cost (手动输入)
    - 人工成本: Σ(工时 × 时薪) (自动计算)
    - 设备成本: Σ(设备使用时长 × 折旧费率) (自动计算)

步骤13: AI成本分析 (AI Cost Analysis - 可选)
  ↓
  操作: 生产主管请求AI分析
  页面: BatchCostDetailScreen
  API: POST /analysis/deepseek
  输出: 成本分析报告 + 优化建议

步骤14: 数据归档和追溯 (Data Archive)
  ↓
  自动: 批次状态为completed后自动归档
  用途: 质量追溯、成本分析、历史对比

┌────────────────────────────────────────────────────────────────┐
│                      关键业务节点总结                           │
└────────────────────────────────────────────────────────────────┘

必须节点 (M - Mandatory):
  M1. 批次创建
  M2. 开始生产
  M3. 完成生产
  M4. 成品质检

可选节点 (O - Optional):
  O1. 原材料质检
  O2. 过程质检
  O3. AI成本分析

自动节点 (A - Automatic):
  A1. 成本自动计算
  A2. 设备监控数据采集
  A3. 告警自动触发
```

### 2.2 批次状态流转规则

```
批次状态机 (Batch Status State Machine):

[planning] 计划中
  │
  │ 操作: 开始生产 (Start Production)
  │ 权限: department_admin及以上
  │ 前置条件:
  │   - 原料已准备
  │   - 生产线可用
  │   - 负责人已分配
  ↓
[in_progress] 进行中
  │
  │ 操作: 暂停生产 (Pause Production)
  │ 权限: department_admin及以上
  │ 原因: 设备故障、原料不足等
  ↓
[paused] 已暂停
  │
  │ 操作: 恢复生产 (Resume Production)
  │ 权限: department_admin及以上
  │ 前置条件: 问题已解决
  ↓
[in_progress] 进行中
  │
  │ 操作: 完成生产 (Complete Production)
  │ 权限: department_admin及以上
  │ 必填数据: actualQuantity (实际产量)
  ↓
[quality_check] 质检中
  │
  ├─ 操作: 质检通过 (Quality Pass)
  │  权限: department_admin及以上
  │  前置条件: 质检记录已创建,结果为pass
  │  ↓
  │ [completed] 已完成 ✅
  │
  └─ 操作: 质检不通过 (Quality Fail)
     权限: department_admin及以上
     前置条件: 质检记录已创建,结果为fail
     ↓
    [failed] 已失败 ❌

特殊状态:
  - [cancelled] 已取消: 只能从planning状态取消
  - [deleted] 已删除: 只能删除planning状态的批次

状态权限矩阵:

| 当前状态 | operator | department_admin | factory_super_admin |
|---------|---------|-----------------|---------------------|
| planning | 查看 | 编辑、删除、开始 | 所有操作 |
| in_progress | 查看、记录工时 | 暂停、完成 | 所有操作 |
| paused | 查看 | 恢复、取消 | 所有操作 |
| quality_check | 查看 | 通过、不通过 | 所有操作 |
| completed | 查看 | 查看 | 查看、删除 |
| failed | 查看 | 查看 | 查看、删除 |
```

### 2.3 跨模块协作关系

#### 2.3.1 与员工管理模块的集成

**集成点1: 批次负责人选择**
```typescript
// 批次创建时选择负责人
API调用: GET /api/mobile/users?department=processing&role=operator
返回数据: [{ id, fullName, department, currentLoad }]
用途: BatchCreateScreen的负责人选择器
```

**集成点2: 工时记录关联批次**
```typescript
// 员工打卡时关联批次
API调用: POST /api/mobile/timeclock/clock-in
请求数据: {
  workType: 'production',
  relatedBatchId: 'batch_123'  // 关联批次ID
}
用途: 成本核算时计算人工成本
```

**集成点3: 成本核算读取工时数据**
```typescript
// 计算批次人工成本
API调用: GET /api/mobile/time-stats/batch/:batchId
返回数据: {
  totalWorkMinutes: 480,  // 总工时(分钟)
  employeeCount: 5,       // 参与员工数
  workSessions: [...]     // 工作时段明细
}
计算公式: laborCost = totalWorkMinutes * avgHourlyRate / 60
```

#### 2.3.2 与设备监控模块的集成

**集成点1: 批次执行时记录设备使用**
```typescript
// 开始生产时启动设备使用记录
API调用: POST /api/mobile/processing/equipment-usage/start
请求数据: {
  equipmentId: 'EQ001',
  batchId: 'batch_123',
  startTime: '2025-01-05T08:00:00Z'
}
```

**集成点2: 成本核算读取设备数据**
```typescript
// 计算设备成本
API调用: GET /api/mobile/processing/equipment-usage?batchId=batch_123
返回数据: {
  totalUsageMinutes: 360,  // 设备总使用时长
  equipmentList: [
    { equipmentId, usageMinutes, deprecationRate }
  ]
}
计算公式: equipmentCost = Σ(usageMinutes * deprecationRate / 60)
```

**集成点3: 设备异常影响批次状态**
```typescript
// 设备告警触发批次暂停
事件: device_critical_alert
触发条件: 设备故障、参数超标严重
动作: 自动暂停关联批次 (status → paused)
通知: 推送通知给批次负责人和生产主管
```

#### 2.3.3 与仓储模块的集成 (未来规划)

**集成点1: 批次创建时原料出库**
```typescript
// 原料出库单
API调用: POST /api/warehouse/outbound
请求数据: {
  batchId: 'batch_123',
  materials: [
    { materialId, quantity, unit }
  ],
  purpose: 'production'
}
效果:
  - 仓库库存减少
  - 批次关联原料批次号(用于追溯)
```

**集成点2: 批次完成时成品入库**
```typescript
// 成品入库单
API调用: POST /api/warehouse/inbound
请求数据: {
  batchId: 'batch_123',
  productType: '速冻鱼排',
  quantity: 500,  // actualQuantity
  qualityGrade: 'A',
  expiryDate: '2025-07-05'
}
效果:
  - 成品库库存增加
  - 生成追溯码(batch_123关联)
```

#### 2.3.4 与销售模块的集成 (未来规划)

**集成点1: 销售出库关联批次**
```typescript
// 成品出库时生成追溯码
API调用: POST /api/sales/outbound
请求数据: {
  productId: 'PROD001',
  quantity: 100,
  batchId: 'batch_123'  // 批次追溯
}
效果:
  - 生成追溯二维码
  - 扫码可查询批次信息(原料、生产日期、质检报告)
```

**集成点2: 成本数据用于定价**
```typescript
// 读取批次成本用于产品定价
API调用: GET /api/mobile/processing/batches/:id/cost-analysis
返回数据: {
  costPerKg: 12.50,  // 单位成本
  suggestedPrice: costPerKg * (1 + profitMargin)  // 建议售价
}
```

#### 2.3.5 与财务模块的集成 (未来规划)

**集成点1: 批次成本数据同步**
```typescript
// 批次完成后成本数据同步到财务
事件: batch_completed
数据同步:
  - 原料成本 → 成本会计科目
  - 人工成本 → 薪资成本
  - 设备成本 → 折旧摊销
用途: 财务报表、成本核算
```

**集成点2: 利润分析**
```typescript
// 财务模块读取生产数据进行利润分析
API调用: GET /api/mobile/processing/batches?status=completed&startDate=2025-01-01
返回数据: [
  { batchId, totalCost, totalRevenue, profitMargin }
]
用途: 管理会计报表
```

### 2.4 关键业务规则

#### 规则1: 批次创建规则
- **规则**: 同一生产线同一时间只能有一个批次在进行
- **验证**: 创建批次时检查生产线是否被占用
- **实现**:
```sql
SELECT COUNT(*) FROM processing_batches
WHERE production_line = '生产线A'
  AND status IN ('in_progress', 'paused')
  AND factory_id = 'FAC001'
```

#### 规则2: 质检必须规则
- **规则**: 成品质检必须通过才能完成批次
- **验证**: 批次状态从quality_check → completed时,必须有质检记录且结果为pass
- **异常处理**: 质检不通过时批次状态变更为failed

#### 规则3: 成本计算时机
- **自动计算时机**:
  1. 批次状态变更为completed时
  2. 手动调用recalculate-cost API时
- **成本构成**:
  - 原料成本: 手动输入(来自采购数据)
  - 人工成本: 自动计算(工时 × 时薪)
  - 设备成本: 自动计算(使用时长 × 折旧率)
- **成本审核**:
  - factory_super_admin可以调整成本数据
  - 调整需要记录审计日志

#### 规则4: 数据权限规则
- **operator (操作员)**:
  - 只能查看自己参与的批次
  - 只能录入自己的工作记录
- **department_admin (部门管理员)**:
  - 可以查看本部门所有批次
  - 可以创建、编辑、删除批次
- **factory_super_admin (工厂超管)**:
  - 可以查看本工厂所有批次
  - 可以执行所有操作

#### 规则5: 离线数据同步规则
- **离线可操作**: 员工打卡、质检记录创建
- **离线不可操作**: 批次状态变更、成本计算
- **同步策略**:
  - 网络恢复时自动同步
  - 冲突检测: 时间戳判断,后提交的覆盖
  - 失败重试: 最多重试3次

---

## 功能模块详细设计

### 3.1 批次管理模块 (Batch Management)

#### 3.1.1 功能概述

批次管理是生产模块的核心,负责管理生产批次的完整生命周期。

**现有功能**:
- ✅ 后端API: 8个API全部完成
- ✅ 数据库表: processing_batches表完善
- ❌ 前端UI: 仅1/5页面完成(MaterialReceiptScreen)

**缺失页面**:
- ❌ BatchListScreen - 批次列表页
- ❌ BatchDetailScreen - 批次详情页
- ❌ BatchCreateScreen - 创建批次页
- ❌ BatchEditScreen - 编辑批次页
- ❌ BatchTimelineScreen - 批次时间线页

#### 3.1.2 数据模型

```typescript
interface ProcessingBatch {
  // 基本信息
  id: string;                    // 批次ID (UUID)
  factoryId: string;             // 工厂ID
  batchNumber: string;           // 批次号 (自动生成,格式: FAC001-20250105-001)
  productType: string;           // 产品类型 (如: 速冻鱼排、鱼丸等)
  productCategory: ProductCategory; // 产品分类

  // 原材料信息
  rawMaterials: RawMaterial[];   // 原材料列表 (JSON)
  rawMaterialCost: number;       // 原料总成本
  rawMaterialWeight: number;     // 原料总重量(kg)
  rawMaterialCategory: string;   // 原料分类

  // 生产信息
  startDate: Date;               // 开始日期
  endDate?: Date;                // 结束日期
  status: BatchStatus;           // 批次状态
  productionLine: string;        // 生产线
  supervisorId: number;          // 负责人ID
  supervisor?: User;             // 负责人信息(关联查询)

  // 产量信息
  targetQuantity: number;        // 目标产量(kg)
  actualQuantity: number;        // 实际产量(kg)
  qualityGrade: QualityGrade;    // 质量等级 (A/B/C/D)

  // 成本信息
  laborCost: number;             // 人工成本
  equipmentCost: number;         // 设备成本
  totalCost: number;             // 总成本
  profitMargin: number;          // 利润额
  profitRate: number;            // 利润率(%)
  expectedPrice: number;         // 预期售价

  // 其他
  notes: string;                 // 备注
  createdAt: Date;               // 创建时间
  updatedAt: Date;               // 更新时间

  // 关联数据
  qualityInspections?: QualityInspection[];  // 质检记录
  workSessions?: EmployeeWorkSession[];      // 工作时段
  equipmentUsage?: EquipmentUsage[];         // 设备使用记录
}

type BatchStatus =
  | 'planning'       // 计划中
  | 'in_progress'    // 进行中
  | 'paused'         // 已暂停
  | 'quality_check'  // 质检中
  | 'completed'      // 已完成
  | 'failed'         // 已失败
  | 'cancelled';     // 已取消

type ProductCategory =
  | 'frozen_fish'    // 速冻鱼类
  | 'fish_balls'     // 鱼丸类
  | 'surimi'         // 鱼糜类
  | 'dried_fish'     // 鱼干类
  | 'other';         // 其他

type QualityGrade = 'A' | 'B' | 'C' | 'D';

interface RawMaterial {
  materialId: string;     // 原料ID
  materialName: string;   // 原料名称
  quantity: number;       // 数量
  unit: string;          // 单位 (kg, ton等)
  cost: number;          // 成本
  supplier?: string;     // 供应商
  batchNumber?: string;  // 原料批次号(追溯用)
}
```

#### 3.1.3 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/batches` | POST | 创建批次 | department_admin+ | ✅ |
| `/api/mobile/processing/batches` | GET | 批次列表(分页、筛选) | operator+ | ✅ |
| `/api/mobile/processing/batches/:id` | GET | 批次详情 | operator+ | ✅ |
| `/api/mobile/processing/batches/:id` | PUT | 更新批次 | department_admin+ | ✅ |
| `/api/mobile/processing/batches/:id` | DELETE | 删除批次(仅planning) | department_admin+ | ✅ |
| `/api/mobile/processing/batches/:id/start` | POST | 开始生产 | department_admin+ | ✅ |
| `/api/mobile/processing/batches/:id/complete` | POST | 完成生产 | department_admin+ | ✅ |
| `/api/mobile/processing/batches/:id/pause` | POST | 暂停生产 | department_admin+ | ✅ |
| `/api/mobile/processing/batches/:id/resume` | POST | 恢复生产 | department_admin+ | ❌ 待开发 |
| `/api/mobile/processing/batches/:id/timeline` | GET | 批次时间线 | operator+ | ✅ |

**API使用示例**:

```typescript
// 创建批次
POST /api/mobile/processing/batches
{
  "productType": "速冻鱼排",
  "productCategory": "frozen_fish",
  "rawMaterials": [
    {
      "materialName": "鲈鱼",
      "quantity": 500,
      "unit": "kg",
      "cost": 15000,
      "supplier": "海洋渔业公司"
    }
  ],
  "targetQuantity": 400,
  "productionLine": "生产线A",
  "supervisorId": 5,
  "startDate": "2025-01-06",
  "notes": "春节订单"
}

// 批次列表查询
GET /api/mobile/processing/batches?page=1&limit=20&status=in_progress&startDate=2025-01-01&endDate=2025-01-31

// 批次状态变更
POST /api/mobile/processing/batches/batch_123/start
{} // 无需body
```

#### 3.1.4 批次编号生成规则

```javascript
// 批次号格式: {工厂代码}-{日期YYYYMMDD}-{当日序号}
// 示例: FAC001-20250105-001

async function generateBatchNumber(factoryId, productType) {
  const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');

  // 查询今日已有批次数
  const count = await prisma.processingBatch.count({
    where: {
      factoryId,
      batchNumber: {
        startsWith: `${factoryId}-${today}-`
      }
    }
  });

  const sequence = String(count + 1).padStart(3, '0');
  return `${factoryId}-${today}-${sequence}`;
}

// 示例:
// FAC001-20250105-001  (2025年1月5日FAC001工厂的第1个批次)
// FAC001-20250105-002  (2025年1月5日FAC001工厂的第2个批次)
```

#### 3.1.5 优化方向

1. **批次模板功能** (优先级: P1)
   - 保存常用批次配置为模板
   - 快速创建批次(选择模板+调整参数)
   - 减少重复输入

2. **批次复制功能** (优先级: P2)
   - 复制现有批次创建新批次
   - 自动生成新批次号
   - 保留原批次的配置参数

3. **批次预测功能** (优先级: P2)
   - 基于历史数据预测产量
   - 基于历史数据预测成本
   - AI推荐最优生产参数

---

### 3.2 质量检验模块 (Quality Inspection)

#### 3.2.1 功能概述

质量检验模块负责管理生产过程中的质量控制,支持三阶段质检。

**现有功能**:
- ✅ 后端API: 6个API全部完成
- ✅ 数据库表: quality_inspections表完善
- ❌ 前端UI: 0/4页面完成

**缺失页面**:
- ❌ QualityInspectionListScreen - 质检列表页
- ❌ QualityInspectionCreateScreen - 创建质检页
- ❌ QualityInspectionDetailScreen - 质检详情页
- ❌ QualityStatisticsScreen - 质检统计页

#### 3.2.2 三阶段质检流程

```
阶段1: 原料质检 (Raw Material Inspection)
  时机: 原料接收时
  检测项:
    - 感官检查(外观、气味、色泽)
    - 温度检测
    - 微生物检测(部分批次抽检)
  判定标准:
    - pass: 允许入库
    - fail: 拒收退货
    - conditional_pass: 降级使用

阶段2: 过程质检 (Process Inspection)
  时机: 生产过程中(建议2-4小时/次)
  检测项:
    - 加工温度
    - pH值
    - 水分含量
    - 加工时间
  判定标准:
    - pass: 继续生产
    - fail: 停止生产,查找原因

阶段3: 成品质检 (Final Product Inspection)
  时机: 批次完成后
  检测项:
    - 感官检查
    - 理化指标(水分、蛋白质、脂肪等)
    - 微生物检测(必检)
    - 重量检测
    - 包装检查
  判定标准:
    - pass: 批次completed,允许出库
    - fail: 批次failed,报废或降级处理
    - conditional_pass: 降级处理(A级→B级)
```

#### 3.2.3 数据模型

```typescript
interface QualityInspection {
  // 基本信息
  id: string;                      // 质检ID
  factoryId: string;               // 工厂ID
  batchId: string;                 // 关联批次ID
  batch?: ProcessingBatch;         // 批次信息(关联查询)

  // 质检类型
  inspectionType: InspectionType;  // 质检类型
  inspectionDate: Date;            // 质检日期
  inspectorId: number;             // 质检员ID
  inspector?: User;                // 质检员信息

  // 检测项目
  testItems: TestItem[];           // 检测项目列表 (JSON)

  // 检测结果
  overallResult: InspectionResult; // 总体结果
  qualityScore: number;            // 质量评分 (0-100)
  defectDetails: string;           // 缺陷详情
  defectTypes: string[];           // 缺陷类型列表

  // 纠正措施
  correctiveActions: string;       // 纠正措施
  followUpRequired: boolean;       // 是否需要跟进
  followUpDate?: Date;             // 跟进日期

  // 照片证据
  photos: string[];                // 照片URL列表

  // 其他
  notes: string;                   // 备注
  createdAt: Date;                 // 创建时间
}

type InspectionType =
  | 'raw_material'    // 原料质检
  | 'process'         // 过程质检
  | 'final_product';  // 成品质检

type InspectionResult =
  | 'pass'            // 合格
  | 'fail'            // 不合格
  | 'conditional_pass'; // 条件合格

interface TestItem {
  itemName: string;       // 检测项名称
  standard: string;       // 标准值/范围
  actualValue: string;    // 实际值
  result: 'pass' | 'fail'; // 单项结果
  unit?: string;          // 单位
}

// 常见检测项配置
const COMMON_TEST_ITEMS = {
  raw_material: [
    { itemName: '外观', standard: '新鲜、无腐败', type: 'text' },
    { itemName: '气味', standard: '无异味', type: 'text' },
    { itemName: '温度', standard: '≤4°C', unit: '°C', type: 'number' },
  ],
  process: [
    { itemName: '加工温度', standard: '85-95°C', unit: '°C', type: 'number' },
    { itemName: 'pH值', standard: '6.5-7.5', unit: 'pH', type: 'number' },
    { itemName: '水分', standard: '≤75%', unit: '%', type: 'number' },
  ],
  final_product: [
    { itemName: '感官', standard: '色泽正常、无异味', type: 'text' },
    { itemName: '蛋白质', standard: '≥15%', unit: '%', type: 'number' },
    { itemName: '脂肪', standard: '≤5%', unit: '%', type: 'number' },
    { itemName: '大肠菌群', standard: '≤100CFU/g', unit: 'CFU/g', type: 'number' },
  ]
};
```

#### 3.2.4 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/quality/inspections` | POST | 创建质检记录 | operator+ | ✅ |
| `/api/mobile/processing/quality/inspections` | GET | 质检列表(分页、筛选) | operator+ | ✅ |
| `/api/mobile/processing/quality/inspections/:id` | GET | 质检详情 | operator+ | ✅ |
| `/api/mobile/processing/quality/inspections/:id` | PUT | 更新质检记录 | department_admin+ | ✅ |
| `/api/mobile/processing/quality/statistics` | GET | 质检统计数据 | operator+ | ✅ |
| `/api/mobile/processing/quality/trends` | GET | 质量趋势分析 | department_admin+ | ✅ |

#### 3.2.5 质检判定逻辑

```javascript
// 质检结果自动判定逻辑
function determineInspectionResult(testItems) {
  const failedItems = testItems.filter(item => item.result === 'fail');

  // 规则1: 无不合格项 → 合格
  if (failedItems.length === 0) {
    return {
      overallResult: 'pass',
      qualityScore: 100
    };
  }

  // 规则2: 有严重不合格项 → 不合格
  const criticalItems = ['大肠菌群', '沙门氏菌', '重金属'];
  const hasCriticalFailure = failedItems.some(item =>
    criticalItems.includes(item.itemName)
  );

  if (hasCriticalFailure) {
    return {
      overallResult: 'fail',
      qualityScore: calculateScore(testItems)
    };
  }

  // 规则3: 轻微不合格项 → 条件合格
  if (failedItems.length <= 2) {
    return {
      overallResult: 'conditional_pass',
      qualityScore: calculateScore(testItems)
    };
  }

  // 规则4: 多项不合格 → 不合格
  return {
    overallResult: 'fail',
    qualityScore: calculateScore(testItems)
  };
}

function calculateScore(testItems) {
  const totalItems = testItems.length;
  const passedItems = testItems.filter(item => item.result === 'pass').length;
  return Math.round((passedItems / totalItems) * 100);
}
```

#### 3.2.6 优化方向

1. **质检模板功能** (优先级: P1)
   - 按产品类型预设检测项
   - 快速创建质检记录

2. **照片AI识别** (优先级: P3)
   - 上传照片自动识别缺陷
   - AI辅助判定质检结果

3. **质检提醒功能** (优先级: P2)
   - 过程质检到期提醒
   - 质检不合格自动通知主管

---

### 3.3 员工工作管理模块 (Employee Work Management)

#### 3.3.1 功能概述

员工工作管理模块负责员工打卡、工时统计和工作记录管理。

**现有功能**:
- ✅ 后端API: 7个API全部完成
- ✅ 数据库表: employee_time_clocks, employee_work_sessions表完善
- ✅ 前端UI: 2/3页面完成 (TimeClockScreen, ClockHistoryScreen)

**缺失页面**:
- ❌ WorkRecordScreen - 工作记录页

#### 3.3.2 打卡流程

```
上班打卡流程:
  1. 员工打开App → TimeClockScreen
  2. 点击"上班打卡"按钮
  3. 系统获取GPS位置
  4. 验证位置是否在工厂范围内(geofencing)
  5. 拍摄打卡照片(可选)
  6. 选择工作类型(生产、质检、设备维护等)
  7. 选择关联批次(如果工作类型是生产)
  8. 提交打卡
  9. 后端创建time_clock记录和work_session记录
  10. 返回打卡成功信息

下班打卡流程:
  1. 员工打开App → TimeClockScreen
  2. 点击"下班打卡"按钮
  3. 系统获取GPS位置
  4. 拍摄打卡照片(可选)
  5. 填写工作总结(可选)
  6. 提交打卡
  7. 后端更新work_session记录(结束时间、工时)
  8. 计算工时和加班时间
  9. 返回打卡成功信息

工时计算规则:
  - 正常工时: 8小时/天
  - 加班工时: 超过8小时的部分
  - 迟到: 9:00后打卡
  - 早退: 17:00前打卡
  - 工时计算: (下班时间 - 上班时间) / 60 分钟
```

#### 3.3.3 数据模型

```typescript
interface EmployeeTimeClock {
  id: string;               // 打卡ID
  factoryId: string;        // 工厂ID
  userId: number;           // 员工ID
  user?: User;              // 员工信息

  clockType: ClockType;     // 打卡类型
  clockTime: Date;          // 打卡时间
  location: GeoLocation;    // GPS位置 (JSON)
  photo?: string;           // 打卡照片URL

  workType: WorkType;       // 工作类型
  relatedBatchId?: string;  // 关联批次ID (工作类型为production时)

  status: ClockStatus;      // 打卡状态
  notes?: string;           // 备注
  createdAt: Date;          // 创建时间
}

type ClockType = 'in' | 'out';  // 上班 | 下班

type WorkType =
  | 'production'           // 生产
  | 'quality_inspection'   // 质检
  | 'equipment_maintenance' // 设备维护
  | 'material_handling'    // 物料搬运
  | 'cleaning'             // 清洁卫生
  | 'training'             // 培训
  | 'other';               // 其他

type ClockStatus =
  | 'normal'       // 正常
  | 'late'         // 迟到
  | 'early_leave'  // 早退
  | 'overtime'     // 加班
  | 'forgot';      // 补卡

interface GeoLocation {
  latitude: number;   // 纬度
  longitude: number;  // 经度
  accuracy: number;   // 精度(米)
  address?: string;   // 地址
}

interface EmployeeWorkSession {
  id: string;               // 工作时段ID
  factoryId: string;        // 工厂ID
  userId: number;           // 员工ID
  user?: User;              // 员工信息

  clockInId: string;        // 上班打卡ID
  clockOutId?: string;      // 下班打卡ID

  workType: WorkType;       // 工作类型
  relatedBatchId?: string;  // 关联批次ID
  batch?: ProcessingBatch;  // 批次信息

  startTime: Date;          // 开始时间
  endTime?: Date;           // 结束时间
  totalMinutes?: number;    // 总工时(分钟)
  overtimeMinutes?: number; // 加班时长(分钟)

  efficiency?: number;      // 工作效率评分 (0-100)
  workSummary?: string;     // 工作总结

  createdAt: Date;          // 创建时间
}
```

#### 3.3.4 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/timeclock/clock-in` | POST | 上班打卡 | operator+ | ✅ |
| `/api/mobile/timeclock/clock-out` | POST | 下班打卡 | operator+ | ✅ |
| `/api/mobile/timeclock/status` | GET | 当前打卡状态 | operator+ | ✅ |
| `/api/mobile/timeclock/history` | GET | 打卡历史记录 | operator+ | ✅ |
| `/api/mobile/time-stats/daily` | GET | 日工时统计 | operator+ | ✅ |
| `/api/mobile/time-stats/weekly` | GET | 周工时统计 | operator+ | ✅ |
| `/api/mobile/time-stats/monthly` | GET | 月工时统计 | department_admin+ | ✅ |

#### 3.3.5 工时统计逻辑

```javascript
// 日工时统计
async function getDailyStats(userId, date) {
  const workSessions = await prisma.employeeWorkSession.findMany({
    where: {
      userId,
      startTime: {
        gte: new Date(date + 'T00:00:00'),
        lt: new Date(date + 'T23:59:59')
      },
      endTime: { not: null }
    }
  });

  const totalMinutes = workSessions.reduce(
    (sum, session) => sum + session.totalMinutes,
    0
  );
  const overtimeMinutes = workSessions.reduce(
    (sum, session) => sum + (session.overtimeMinutes || 0),
    0
  );

  return {
    date,
    totalHours: (totalMinutes / 60).toFixed(2),
    overtimeHours: (overtimeMinutes / 60).toFixed(2),
    sessionCount: workSessions.length,
    workSessions
  };
}

// 月工时统计
async function getMonthlyStats(userId, year, month) {
  // 统计本月所有工作日
  const dailyStats = [];
  const daysInMonth = new Date(year, month, 0).getDate();

  for (let day = 1; day <= daysInMonth; day++) {
    const date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    const stats = await getDailyStats(userId, date);
    dailyStats.push(stats);
  }

  const totalHours = dailyStats.reduce(
    (sum, day) => sum + parseFloat(day.totalHours),
    0
  );
  const overtimeHours = dailyStats.reduce(
    (sum, day) => sum + parseFloat(day.overtimeHours),
    0
  );

  return {
    year,
    month,
    totalHours: totalHours.toFixed(2),
    overtimeHours: overtimeHours.toFixed(2),
    workDays: dailyStats.filter(d => parseFloat(d.totalHours) > 0).length,
    dailyStats
  };
}
```

#### 3.3.6 优化方向

1. **GPS围栏优化** (优先级: P1)
   - 支持多个打卡点(不同车间)
   - GPS信号弱时允许手动打卡+审批

2. **班次管理** (优先级: P2)
   - 支持多班次(早班、中班、夜班)
   - 自动识别班次并计算工时

3. **工时导出** (优先级: P2)
   - 导出月度工时报表(Excel)
   - 用于薪资计算

---

### 3.4 设备监控模块 (Equipment Monitoring)

#### 3.4.1 功能概述

设备监控模块负责实时监控生产设备状态,记录设备使用情况,管理设备告警。

**现有功能**:
- ✅ 后端API: 5个API全部完成
- ✅ 数据库表: factory_equipment, device_monitoring_data, alert_notifications表完善
- ❌ 前端UI: 0/4页面完成

**缺失页面**:
- ❌ EquipmentListScreen - 设备列表页
- ❌ EquipmentMonitoringScreen - 实时监控页
- ❌ EquipmentDetailScreen - 设备详情页
- ❌ EquipmentAlertsScreen - 设备告警页

#### 3.4.2 数据模型

```typescript
interface FactoryEquipment {
  id: string;                  // 设备ID
  factoryId: string;           // 工厂ID
  equipmentCode: string;       // 设备编号 (如: EQ001)
  equipmentName: string;       // 设备名称
  equipmentType: EquipmentType; // 设备类型
  location: string;            // 安装位置

  // 设备参数
  specifications: any;         // 设备规格 (JSON)
  purchaseDate: Date;          // 购买日期
  purchasePrice: number;       // 购买价格
  deprecationRate: number;     // 折旧率(元/小时)

  // 运行状态
  status: EquipmentStatus;     // 设备状态
  lastMaintenanceDate?: Date;  // 上次维护日期
  nextMaintenanceDate?: Date;  // 下次维护日期

  // 监控配置
  monitoringEnabled: boolean;  // 是否启用监控
  alertThresholds: AlertThreshold[]; // 告警阈值配置 (JSON)

  createdAt: Date;             // 创建时间
}

type EquipmentType =
  | 'freezer'          // 速冻机
  | 'cooler'           // 冷却机
  | 'mixer'            // 搅拌机
  | 'cutter'           // 切割机
  | 'packing_machine'  // 包装机
  | 'conveyor'         // 传送带
  | 'other';           // 其他

type EquipmentStatus =
  | 'normal'       // 正常运行
  | 'warning'      // 警告(参数接近阈值)
  | 'error'        // 故障
  | 'maintenance'  // 维护中
  | 'offline';     // 离线

interface AlertThreshold {
  metric: string;       // 指标名称 (temperature, humidity, pressure等)
  minValue?: number;    // 最小值
  maxValue?: number;    // 最大值
  warningLevel: number; // 警告级别 (1-3)
}

interface DeviceMonitoringData {
  id: string;              // 监控数据ID
  equipmentId: string;     // 设备ID
  equipment?: FactoryEquipment; // 设备信息

  timestamp: Date;         // 采集时间

  // 监控指标
  temperature?: number;    // 温度(°C)
  humidity?: number;       // 湿度(%)
  pressure?: number;       // 压力(Pa)
  voltage?: number;        // 电压(V)
  current?: number;        // 电流(A)
  runtime?: number;        // 运行时长(分钟)

  // 其他指标(JSON)
  customMetrics?: any;     // 自定义指标

  // 状态
  isNormal: boolean;       // 是否正常
  abnormalMetrics?: string[]; // 异常指标列表

  createdAt: Date;         // 创建时间
}

interface AlertNotification {
  id: string;              // 告警ID
  factoryId: string;       // 工厂ID
  equipmentId?: string;    // 设备ID (设备告警)
  batchId?: string;        // 批次ID (批次告警)

  alertType: AlertType;    // 告警类型
  severity: AlertSeverity; // 严重程度
  title: string;           // 告警标题
  message: string;         // 告警消息

  // 告警数据
  triggeredAt: Date;       // 触发时间
  acknowledgedAt?: Date;   // 确认时间
  resolvedAt?: Date;       // 解决时间

  // 处理信息
  acknowledgedBy?: number; // 确认人ID
  resolvedBy?: number;     // 解决人ID
  resolutionNotes?: string; // 处理说明

  status: AlertStatus;     // 告警状态
  createdAt: Date;         // 创建时间
}

type AlertType =
  | 'temperature_high'     // 温度过高
  | 'temperature_low'      // 温度过低
  | 'equipment_failure'    // 设备故障
  | 'quality_issue'        // 质量问题
  | 'cost_overrun'         // 成本超标
  | 'batch_delayed'        // 批次延期
  | 'maintenance_due';     // 维护到期

type AlertSeverity =
  | 'critical'  // 严重(红色)
  | 'high'      // 高(橙色)
  | 'medium'    // 中(黄色)
  | 'low';      // 低(蓝色)

type AlertStatus =
  | 'active'        // 活动中
  | 'acknowledged'  // 已确认
  | 'resolved';     // 已解决
```

#### 3.4.3 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/equipment/monitoring` | GET | 设备实时监控列表 | operator+ | ✅ |
| `/api/mobile/processing/equipment/:id/metrics` | GET | 设备历史指标数据 | operator+ | ✅ |
| `/api/mobile/processing/equipment/:id/data` | POST | 上报设备监控数据 | operator+ | ✅ |
| `/api/mobile/processing/equipment/alerts` | GET | 设备告警列表 | operator+ | ✅ |
| `/api/mobile/processing/equipment/:id/status` | GET | 单个设备状态 | operator+ | ✅ |
| `/api/mobile/alerts` | GET | 所有告警列表 | operator+ | ✅ |
| `/api/mobile/alerts/:id/acknowledge` | POST | 确认告警 | department_admin+ | ✅ |
| `/api/mobile/alerts/:id/resolve` | POST | 解决告警 | department_admin+ | ✅ |

#### 3.4.4 告警触发逻辑

```javascript
// 监控数据上报时检查告警阈值
async function checkAlertThresholds(equipmentId, monitoringData) {
  const equipment = await prisma.factoryEquipment.findUnique({
    where: { id: equipmentId }
  });

  const alerts = [];

  for (const threshold of equipment.alertThresholds) {
    const value = monitoringData[threshold.metric];
    if (!value) continue;

    let triggered = false;
    let message = '';

    // 检查是否超过阈值
    if (threshold.maxValue && value > threshold.maxValue) {
      triggered = true;
      message = `${threshold.metric}过高: ${value} (阈值: ${threshold.maxValue})`;
    } else if (threshold.minValue && value < threshold.minValue) {
      triggered = true;
      message = `${threshold.metric}过低: ${value} (阈值: ${threshold.minValue})`;
    }

    if (triggered) {
      // 创建告警
      const alert = await prisma.alertNotification.create({
        data: {
          factoryId: equipment.factoryId,
          equipmentId,
          alertType: `${threshold.metric}_${value > threshold.maxValue ? 'high' : 'low'}`,
          severity: getSeverityLevel(threshold.warningLevel),
          title: `设备${equipment.equipmentName}告警`,
          message,
          status: 'active',
          triggeredAt: new Date()
        }
      });

      alerts.push(alert);

      // 发送推送通知
      await sendPushNotification(equipment.factoryId, alert);
    }
  }

  return alerts;
}

function getSeverityLevel(warningLevel) {
  if (warningLevel >= 3) return 'critical';
  if (warningLevel === 2) return 'high';
  if (warningLevel === 1) return 'medium';
  return 'low';
}
```

#### 3.4.5 优化方向

1. **实时数据推送** (优先级: P1)
   - WebSocket连接实时推送监控数据
   - 前端图表实时更新

2. **设备维护提醒** (优先级: P2)
   - 定期维护到期提醒
   - 运行时长达标提醒

3. **设备使用分析** (优先级: P2)
   - 设备利用率统计
   - 设备故障率分析

---

### 3.5 成本核算模块 (Cost Analysis)

#### 3.5.1 功能概述

成本核算模块负责自动计算批次成本,提供成本分析和AI优化建议。

**现有功能**:
- ✅ 后端API: 3个API,其中AI分析使用Mock数据
- ✅ 数据库表: processing_batches包含成本字段
- ✅ 前端UI: 1/3页面完成 (CostAnalysisDashboard)

**缺失页面**:
- ❌ BatchCostDetailScreen - 批次成本详情页
- ❌ CostTrendScreen - 成本趋势分析页

**需要优化**:
- ❌ DeepSeek AI真实集成(当前使用Mock数据)
- ❌ 成本计算公式优化
- ❌ 历史成本对比功能

#### 3.5.2 成本构成分析

```
批次总成本 = 原料成本 + 人工成本 + 设备成本 + 其他成本

1. 原料成本 (Raw Material Cost)
   - 来源: 手动输入(来自采购数据)
   - 计算: rawMaterialCost = Σ(原料数量 × 原料单价)
   - 占比: 通常40-50%

2. 人工成本 (Labor Cost)
   - 来源: 自动计算(工时记录)
   - 计算: laborCost = Σ(工时 × 员工时薪)
   - 详细公式:
     laborCost = Σ(workSession.totalMinutes × employee.hourlyRate / 60)
     其中,hourlyRate根据员工工种和级别确定:
       - 普通操作员: ¥20/小时
       - 熟练操作员: ¥25/小时
       - 班长: ¥30/小时
     加班工时按1.5倍计算
   - 占比: 通常30-40%

3. 设备成本 (Equipment Cost)
   - 来源: 自动计算(设备使用记录)
   - 计算: equipmentCost = Σ(设备使用时长 × 设备折旧率)
   - 详细公式:
     equipmentCost = Σ(equipmentUsage.usageMinutes × equipment.deprecationRate / 60)
     其中,deprecationRate = 设备购买价格 / (预计使用年限 × 365 × 24)
     例如: 100万设备,使用10年
       deprecationRate = 1000000 / (10 × 365 × 24) = ¥11.42/小时
   - 占比: 通常10-20%

4. 其他成本 (Other Cost)
   - 能耗成本: 电费、水费
   - 包装成本: 包装材料
   - 物流成本: 原料运输、成品运输
   - 占比: 通常5-10%

单位成本 = 总成本 / 实际产量
  costPerKg = totalCost / actualQuantity

利润率 = (预期售价 - 单位成本) / 预期售价 × 100%
  profitRate = (expectedPrice - costPerKg) / expectedPrice × 100%

利润额 = 实际产量 × (预期售价 - 单位成本)
  profitMargin = actualQuantity × (expectedPrice - costPerKg)
```

#### 3.5.3 成本计算示例

```javascript
// 批次成本自动计算
async function calculateBatchCost(batchId) {
  const batch = await prisma.processingBatch.findUnique({
    where: { id: batchId }
  });

  // 1. 原料成本(已手动输入)
  const rawMaterialCost = batch.rawMaterialCost || 0;

  // 2. 人工成本
  const workSessions = await prisma.employeeWorkSession.findMany({
    where: { relatedBatchId: batchId, endTime: { not: null } },
    include: { user: true }
  });

  let laborCost = 0;
  for (const session of workSessions) {
    const hourlyRate = session.user.hourlyRate || 20;  // 默认¥20/小时
    const hours = session.totalMinutes / 60;
    const overtimeHours = (session.overtimeMinutes || 0) / 60;

    laborCost += hours * hourlyRate;
    laborCost += overtimeHours * hourlyRate * 1.5;  // 加班1.5倍
  }

  // 3. 设备成本
  const equipmentUsage = await prisma.equipmentUsage.findMany({
    where: { batchId },
    include: { equipment: true }
  });

  let equipmentCost = 0;
  for (const usage of equipmentUsage) {
    const hours = usage.usageMinutes / 60;
    const deprecationRate = usage.equipment.deprecationRate || 10;
    equipmentCost += hours * deprecationRate;
  }

  // 4. 其他成本(暂时固定比例,后续可配置)
  const otherCostRate = 0.05;  // 5%
  const otherCost = (rawMaterialCost + laborCost + equipmentCost) * otherCostRate;

  // 5. 总成本
  const totalCost = rawMaterialCost + laborCost + equipmentCost + otherCost;

  // 6. 单位成本
  const costPerKg = batch.actualQuantity > 0
    ? totalCost / batch.actualQuantity
    : 0;

  // 7. 利润计算
  const profitRate = batch.expectedPrice && batch.expectedPrice > 0
    ? ((batch.expectedPrice - costPerKg) / batch.expectedPrice * 100)
    : 0;

  const profitMargin = batch.actualQuantity * (batch.expectedPrice - costPerKg);

  // 8. 更新批次成本数据
  await prisma.processingBatch.update({
    where: { id: batchId },
    data: {
      rawMaterialCost,
      laborCost: Math.round(laborCost * 100) / 100,
      equipmentCost: Math.round(equipmentCost * 100) / 100,
      totalCost: Math.round(totalCost * 100) / 100,
      costPerKg: Math.round(costPerKg * 100) / 100,
      profitRate: Math.round(profitRate * 100) / 100,
      profitMargin: Math.round(profitMargin * 100) / 100
    }
  });

  return {
    rawMaterialCost,
    laborCost,
    equipmentCost,
    otherCost,
    totalCost,
    costPerKg,
    profitRate,
    profitMargin
  };
}
```

#### 3.5.4 AI成本分析 (DeepSeek集成)

**当前状态**: 使用Mock数据,未集成真实DeepSeek API

**优化方案**:
1. 集成DeepSeek API
2. 成本控制在¥30/月以内
3. 使用5分钟缓存策略
4. 月预算用完后降级到规则引擎

**详细设计**: 参见 `PRD-认证与生产模块优化方案.md` 的阶段3(DeepSeek AI集成)章节

#### 3.5.5 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/batches/:id/cost-analysis` | GET | 批次成本分析 | operator+ | ✅ |
| `/api/mobile/processing/batches/:id/recalculate-cost` | POST | 重新计算成本 | department_admin+ | ✅ |
| `/api/mobile/analysis/deepseek` | POST | AI成本分析 | department_admin+ | 🟡 Mock |

#### 3.5.6 优化方向

1. **DeepSeek真实集成** (优先级: P0)
   - 替换Mock数据
   - 实现缓存策略
   - 月度预算控制

2. **成本对比功能** (优先级: P1)
   - 与目标成本对比
   - 与历史平均对比
   - 与同类批次对比

3. **成本预测功能** (优先级: P2)
   - 基于历史数据预测成本
   - 提前发现成本超标风险

---

### 3.6 生产仪表板模块 (Production Dashboard)

#### 3.6.1 功能概述

生产仪表板是生产模块的主入口,提供生产数据的可视化展示。

**现有功能**:
- ✅ 后端API: 6个API全部完成
- ✅ 数据库表: 无需额外表,聚合查询现有表
- ✅ 前端UI: 1/2页面完成 (ProcessingDashboardScreen)

**缺失页面**:
- ❌ ProductionStatisticsScreen - 生产统计详情页

#### 3.6.2 仪表板指标

```
核心指标 (KPIs):

1. 生产概览
   - 今日生产批次数
   - 今日完成批次数
   - 今日产量(kg)
   - 今日合格率(%)

2. 质量概览
   - 质检次数
   - 质检合格率
   - 不合格项TOP5

3. 成本概览
   - 今日总成本
   - 平均单位成本
   - 成本超标批次数

4. 人员概览
   - 在岗人数
   - 总工时
   - 平均效率

5. 设备概览
   - 设备在线数
   - 设备故障数
   - 活动告警数

时间维度:
   - 今日 (Today)
   - 本周 (This Week)
   - 本月 (This Month)
   - 自定义时间段 (Custom Range)

图表类型:
   - 折线图: 产量趋势、成本趋势
   - 柱状图: 批次数对比、部门产量对比
   - 饼图: 成本构成、产品类型分布
   - 仪表盘: 合格率、设备利用率
```

#### 3.6.3 API接口清单

| API端点 | 方法 | 功能 | 权限 | 状态 |
|--------|------|------|------|------|
| `/api/mobile/processing/dashboard/overview` | GET | 仪表板概览数据 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/production` | GET | 生产统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/quality` | GET | 质量统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/equipment` | GET | 设备状态统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/alerts` | GET | 告警统计 | operator+ | ✅ |
| `/api/mobile/processing/dashboard/trends` | GET | 趋势分析 | department_admin+ | ✅ |

#### 3.6.4 优化方向

1. **实时数据刷新** (优先级: P1)
   - 定时自动刷新(30秒/次)
   - 支持手动下拉刷新

2. **自定义仪表板** (优先级: P2)
   - 用户自定义显示指标
   - 拖拽调整组件顺序

3. **数据导出** (优先级: P2)
   - 导出生产报表(PDF/Excel)
   - 邮件定时发送报表

---

## 数据库设计

### 4.1 核心表结构

生产模块使用8个核心数据表:

```sql
-- 1. processing_batches (批次主表)
CREATE TABLE processing_batches (
  id VARCHAR(50) PRIMARY KEY,
  factory_id VARCHAR(50) NOT NULL,
  batch_number VARCHAR(100) UNIQUE NOT NULL,
  product_type VARCHAR(100),
  raw_materials JSON,
  start_date DATE,
  end_date DATE,
  status ENUM('planning', 'in_progress', 'paused', 'quality_check', 'completed', 'failed', 'cancelled'),
  production_line VARCHAR(100),
  supervisor_id INT,
  target_quantity DECIMAL(10,2),
  actual_quantity DECIMAL(10,2),
  quality_grade ENUM('A', 'B', 'C', 'D'),
  notes TEXT,

  -- 原料成本
  raw_material_cost DECIMAL(12,2),
  raw_material_weight DECIMAL(10,2),
  raw_material_category VARCHAR(100),
  product_category VARCHAR(50),
  expected_price DECIMAL(12,2),

  -- 成本核算
  labor_cost DECIMAL(12,2),
  equipment_cost DECIMAL(12,2),
  total_cost DECIMAL(12,2),
  profit_margin DECIMAL(12,2),
  profit_rate DECIMAL(5,2),

  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  FOREIGN KEY (factory_id) REFERENCES factories(id),
  FOREIGN KEY (supervisor_id) REFERENCES users(id),
  INDEX idx_factory_status (factory_id, status, start_date DESC),
  INDEX idx_batch_number (batch_number)
);

-- 2. quality_inspections (质检记录表)
CREATE TABLE quality_inspections (
  id VARCHAR(50) PRIMARY KEY,
  factory_id VARCHAR(50) NOT NULL,
  batch_id VARCHAR(50) NOT NULL,
  inspection_type ENUM('raw_material', 'process', 'final_product'),
  inspection_date DATE,
  inspector_id INT,

  -- 检测项目 (JSON)
  test_items JSON,

  -- 检测结果
  overall_result ENUM('pass', 'fail', 'conditional_pass'),
  quality_score DECIMAL(5,2),
  defect_details TEXT,
  defect_types JSON,

  -- 纠正措施
  corrective_actions TEXT,
  follow_up_required BOOLEAN DEFAULT FALSE,
  follow_up_date DATE,

  -- 照片证据
  photos JSON,
  notes TEXT,

  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (batch_id) REFERENCES processing_batches(id) ON DELETE CASCADE,
  FOREIGN KEY (inspector_id) REFERENCES users(id),
  INDEX idx_batch_inspection (batch_id, inspection_date DESC),
  INDEX idx_factory_date (factory_id, inspection_date DESC)
);

-- 3. employee_time_clocks (打卡记录表)
CREATE TABLE employee_time_clocks (
  id VARCHAR(50) PRIMARY KEY,
  factory_id VARCHAR(50) NOT NULL,
  user_id INT NOT NULL,
  clock_type ENUM('in', 'out'),
  clock_time TIMESTAMP,
  location JSON,
  photo VARCHAR(500),

  work_type VARCHAR(50),
  related_batch_id VARCHAR(50),

  status ENUM('normal', 'late', 'early_leave', 'overtime', 'forgot'),
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (factory_id) REFERENCES factories(id),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (related_batch_id) REFERENCES processing_batches(id) ON DELETE SET NULL,
  INDEX idx_user_time (user_id, clock_time DESC),
  INDEX idx_factory_time (factory_id, clock_time DESC)
);

-- 4. employee_work_sessions (工作时段表)
CREATE TABLE employee_work_sessions (
  id VARCHAR(50) PRIMARY KEY,
  factory_id VARCHAR(50) NOT NULL,
  user_id INT NOT NULL,
  clock_in_id VARCHAR(50) NOT NULL,
  clock_out_id VARCHAR(50),

  work_type VARCHAR(50),
  related_batch_id VARCHAR(50),

  start_time TIMESTAMP,
  end_time TIMESTAMP,
  total_minutes INT,
  overtime_minutes INT,

  efficiency DECIMAL(5,2),
  work_summary TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (clock_in_id) REFERENCES employee_time_clocks(id) ON DELETE CASCADE,
  FOREIGN KEY (clock_out_id) REFERENCES employee_time_clocks(id) ON DELETE CASCADE,
  FOREIGN KEY (related_batch_id) REFERENCES processing_batches(id) ON DELETE SET NULL,
  INDEX idx_user_session (user_id, start_time DESC),
  INDEX idx_batch_session (related_batch_id, start_time DESC)
);

-- 5. factory_equipment (设备管理表)
CREATE TABLE factory_equipment (
  id VARCHAR(50) PRIMARY KEY,
  factory_id VARCHAR(50) NOT NULL,
  equipment_code VARCHAR(50) UNIQUE NOT NULL,
  equipment_name VARCHAR(100) NOT NULL,
  equipment_type VARCHAR(50),
  location VARCHAR(100),

  specifications JSON,
  purchase_date DATE,
  purchase_price DECIMAL(12,2),
  deprecation_rate DECIMAL(10,2),

  status ENUM('normal', 'warning', 'error', 'maintenance', 'offline'),
  last_maintenance_date DATE,
  next_maintenance_date DATE,

  monitoring_enabled BOOLEAN DEFAULT TRUE,
  alert_thresholds JSON,

  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (factory_id) REFERENCES factories(id),
  INDEX idx_factory_equipment (factory_id, equipment_code)
);

-- 6. device_monitoring_data (设备监控数据表)
CREATE TABLE device_monitoring_data (
  id VARCHAR(50) PRIMARY KEY,
  equipment_id VARCHAR(50) NOT NULL,
  timestamp TIMESTAMP,

  -- 监控指标
  temperature DECIMAL(5,2),
  humidity DECIMAL(5,2),
  pressure DECIMAL(8,2),
  voltage DECIMAL(8,2),
  current DECIMAL(8,2),
  runtime INT,

  custom_metrics JSON,

  is_normal BOOLEAN DEFAULT TRUE,
  abnormal_metrics JSON,

  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (equipment_id) REFERENCES factory_equipment(id) ON DELETE CASCADE,
  INDEX idx_equipment_time (equipment_id, timestamp DESC)
);

-- 7. alert_notifications (告警通知表)
CREATE TABLE alert_notifications (
  id VARCHAR(50) PRIMARY KEY,
  factory_id VARCHAR(50) NOT NULL,
  equipment_id VARCHAR(50),
  batch_id VARCHAR(50),

  alert_type VARCHAR(50),
  severity ENUM('critical', 'high', 'medium', 'low'),
  title VARCHAR(200),
  message TEXT,

  triggered_at TIMESTAMP,
  acknowledged_at TIMESTAMP,
  resolved_at TIMESTAMP,

  acknowledged_by INT,
  resolved_by INT,
  resolution_notes TEXT,

  status ENUM('active', 'acknowledged', 'resolved'),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (factory_id) REFERENCES factories(id),
  FOREIGN KEY (equipment_id) REFERENCES factory_equipment(id) ON DELETE SET NULL,
  FOREIGN KEY (batch_id) REFERENCES processing_batches(id) ON DELETE SET NULL,
  FOREIGN KEY (acknowledged_by) REFERENCES users(id) ON DELETE SET NULL,
  FOREIGN KEY (resolved_by) REFERENCES users(id) ON DELETE SET NULL,
  INDEX idx_factory_status (factory_id, status, triggered_at DESC),
  INDEX idx_severity (severity, triggered_at DESC)
);

-- 8. ai_analysis_logs (AI分析日志表) - 新增
CREATE TABLE ai_analysis_logs (
  id VARCHAR(50) PRIMARY KEY,
  batch_id VARCHAR(50),
  service VARCHAR(50) DEFAULT 'deepseek',
  cost DECIMAL(10,4),
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (batch_id) REFERENCES processing_batches(id) ON DELETE SET NULL,
  INDEX idx_service_time (service, timestamp DESC),
  INDEX idx_batch_analysis (batch_id)
);
```

### 4.2 数据关系ER图

```
┌─────────────────┐
│   factories     │
└────────┬────────┘
         │ 1
         │
         │ N
┌────────┴────────────┐      ┌──────────────────┐
│processing_batches   │ 1..N │quality_inspections│
│─────────────────────│◄─────┤──────────────────│
│ id (PK)             │      │ batch_id (FK)    │
│ factory_id (FK)     │      └──────────────────┘
│ batch_number        │
│ status              │      ┌──────────────────────┐
│ supervisor_id (FK)  │ 1..N │employee_work_sessions│
└─────────┬───────────┘◄─────┤──────────────────────│
          │                  │ related_batch_id (FK)│
          │                  └──────────────────────┘
          │
          │ N                ┌──────────────────┐
          └──────────────────┤ users            │
                        1    │──────────────────│
                             │ id (PK)          │
                             │ factory_id (FK)  │
                             │ role_code        │
                             └────────┬─────────┘
                                      │ 1
                                      │
                                      │ N
                             ┌────────┴────────────┐
                             │employee_time_clocks │
                             │─────────────────────│
                             │ user_id (FK)        │
                             │ clock_type          │
                             └─────────────────────┘

┌─────────────────────┐      ┌─────────────────────────┐
│ factory_equipment   │ 1..N │device_monitoring_data   │
│─────────────────────│◄─────┤─────────────────────────│
│ id (PK)             │      │ equipment_id (FK)       │
│ factory_id (FK)     │      │ temperature, humidity..│
│ equipment_code      │      └─────────────────────────┘
│ status              │
└─────────┬───────────┘      ┌─────────────────────┐
          │ 1..N             │ alert_notifications │
          └──────────────────┤─────────────────────│
                             │ equipment_id (FK)   │
                             │ batch_id (FK)       │
                             │ severity            │
                             └─────────────────────┘
```

### 4.3 索引优化建议

```sql
-- 批次查询优化
CREATE INDEX idx_batch_composite
ON processing_batches(factory_id, status, start_date DESC, created_at DESC);

-- 质检查询优化
CREATE INDEX idx_inspection_composite
ON quality_inspections(factory_id, batch_id, inspection_type, inspection_date DESC);

-- 工时统计优化
CREATE INDEX idx_worksession_stats
ON employee_work_sessions(user_id, start_time DESC, end_time DESC);

-- 设备监控查询优化
CREATE INDEX idx_monitoring_composite
ON device_monitoring_data(equipment_id, timestamp DESC, is_normal);

-- 告警查询优化
CREATE INDEX idx_alert_composite
ON alert_notifications(factory_id, status, severity, triggered_at DESC);
```

---

## API接口清单

### 5.1 API分类汇总

生产模块共计**29个API端点**:

| 模块 | API数量 | 完成状态 |
|-----|---------|---------|
| 批次管理 | 8 | ✅ 100% |
| 质量检验 | 6 | ✅ 100% |
| 员工工作 | 7 | ✅ 100% |
| 设备监控 | 5 | ✅ 100% |
| 成本分析 | 3 | 🟡 80% (AI Mock) |
| 生产仪表板 | 6 | ✅ 100% |
| **总计** | **35** | **97%** |

### 5.2 完整API清单

#### 5.2.1 批次管理API (8个)

```
POST   /api/mobile/processing/batches                    创建批次
GET    /api/mobile/processing/batches                    批次列表(分页、筛选)
GET    /api/mobile/processing/batches/:id                批次详情
PUT    /api/mobile/processing/batches/:id                更新批次
DELETE /api/mobile/processing/batches/:id                删除批次
POST   /api/mobile/processing/batches/:id/start          开始生产
POST   /api/mobile/processing/batches/:id/complete       完成生产
POST   /api/mobile/processing/batches/:id/pause          暂停生产
GET    /api/mobile/processing/batches/:id/timeline       批次时间线
```

#### 5.2.2 质量检验API (6个)

```
POST   /api/mobile/processing/quality/inspections        创建质检记录
GET    /api/mobile/processing/quality/inspections        质检列表(分页、筛选)
GET    /api/mobile/processing/quality/inspections/:id    质检详情
PUT    /api/mobile/processing/quality/inspections/:id    更新质检记录
GET    /api/mobile/processing/quality/statistics         质检统计数据
GET    /api/mobile/processing/quality/trends             质量趋势分析
```

#### 5.2.3 员工工作API (7个)

```
POST   /api/mobile/timeclock/clock-in                    上班打卡
POST   /api/mobile/timeclock/clock-out                   下班打卡
GET    /api/mobile/timeclock/status                      当前打卡状态
GET    /api/mobile/timeclock/history                     打卡历史记录
GET    /api/mobile/time-stats/daily                      日工时统计
GET    /api/mobile/time-stats/weekly                     周工时统计
GET    /api/mobile/time-stats/monthly                    月工时统计
```

#### 5.2.4 设备监控API (5个)

```
GET    /api/mobile/processing/equipment/monitoring       设备实时监控列表
GET    /api/mobile/processing/equipment/:id/metrics      设备历史指标数据
POST   /api/mobile/processing/equipment/:id/data         上报设备监控数据
GET    /api/mobile/processing/equipment/alerts           设备告警列表
GET    /api/mobile/processing/equipment/:id/status       单个设备状态
```

#### 5.2.5 成本分析API (3个)

```
GET    /api/mobile/processing/batches/:id/cost-analysis  批次成本分析
POST   /api/mobile/processing/batches/:id/recalculate-cost 重新计算成本
POST   /api/mobile/analysis/deepseek                     AI成本分析 (🟡 Mock)
```

#### 5.2.6 生产仪表板API (6个)

```
GET    /api/mobile/processing/dashboard/overview         仪表板概览数据
GET    /api/mobile/processing/dashboard/production       生产统计
GET    /api/mobile/processing/dashboard/quality          质量统计
GET    /api/mobile/processing/dashboard/equipment        设备状态统计
GET    /api/mobile/processing/dashboard/alerts           告警统计
GET    /api/mobile/processing/dashboard/trends           趋势分析
```

#### 5.2.7 告警管理API (6个)

```
GET    /api/mobile/alerts                                所有告警列表
POST   /api/mobile/alerts/:id/acknowledge                确认告警
POST   /api/mobile/alerts/:id/resolve                    解决告警
GET    /api/mobile/alerts/statistics                     告警统计数据
GET    /api/mobile/alerts/summary                        告警摘要
```

### 5.3 API请求/响应示例

详见各子模块的API使用示例部分。

---

## 前端页面设计

### 6.1 页面总览

生产模块共需开发**20个前端页面**,当前仅完成**5个页面**(25%完成度)。

**页面分类**:

| 模块 | 页面数 | 已完成 | 待开发 | 优先级 |
|-----|--------|--------|--------|--------|
| **批次管理** | 5 | 0 | 5 | P0 |
| **质量检验** | 4 | 0 | 4 | P0 |
| **员工工作** | 3 | 2 | 1 | P1 |
| **设备监控** | 4 | 0 | 4 | P1 |
| **成本分析** | 3 | 1 | 2 | P1 |
| **生产仪表板** | 2 | 1 | 1 | P0 |
| **数据导出** | 1 | 0 | 1 | P2 |
| **总计** | **22** | **4** | **18** | - |

### 6.2 批次管理页面 (5页)

#### 6.2.1 BatchListScreen - 批次列表页

**路径**: `/src/screens/processing/batch/BatchListScreen.tsx`

**功能清单**:
- [ ] 批次列表展示(卡片式布局)
- [ ] 下拉刷新
- [ ] 上拉加载更多(分页,每页20条)
- [ ] 状态筛选标签页(全部/进行中/已完成等)
- [ ] 日期范围筛选
- [ ] 搜索(批次号、产品类型)
- [ ] 排序(按开始时间、状态、产量)
- [ ] 快捷操作按钮(开始生产、查看详情)
- [ ] 空状态提示

**UI组件**:
```typescript
<View style={styles.container}>
  {/* 顶部搜索栏 */}
  <SearchBar
    placeholder="搜索批次号或产品类型..."
    onSearch={handleSearch}
    onClear={clearSearch}
  />

  {/* 状态筛选标签页 */}
  <ScrollView horizontal showsHorizontalScrollIndicator={false}>
    <FilterTabs
      tabs={[
        { key: 'all', label: '全部', count: totalCount },
        { key: 'planning', label: '计划中', count: planningCount },
        { key: 'in_progress', label: '进行中', count: inProgressCount },
        { key: 'completed', label: '已完成', count: completedCount }
      ]}
      activeTab={activeTab}
      onTabChange={setActiveTab}
    />
  </ScrollView>

  {/* 高级筛选按钮 */}
  <TouchableOpacity onPress={showFilterModal}>
    <Icon name="filter" />
    <Text>筛选</Text>
  </TouchableOpacity>

  {/* 批次列表 */}
  <FlatList
    data={batches}
    renderItem={({ item }) => (
      <BatchCard
        batch={item}
        onPress={() => navigation.navigate('BatchDetail', { batchId: item.id })}
        onActionPress={handleQuickAction}
      />
    )}
    keyExtractor={item => item.id}
    onRefresh={handleRefresh}
    refreshing={isRefreshing}
    onEndReached={loadMore}
    onEndReachedThreshold={0.5}
    ListEmptyComponent={<EmptyState message="暂无批次数据" />}
  />

  {/* 创建批次FAB */}
  <FAB
    icon="plus"
    onPress={() => navigation.navigate('BatchCreate')}
    style={styles.fab}
  />

  {/* 筛选弹窗 */}
  <FilterModal
    visible={filterModalVisible}
    onClose={hideFilterModal}
    onApply={applyFilters}
  />
</View>
```

**页面跳转**:
- → `BatchDetailScreen` (点击批次卡片)
- → `BatchCreateScreen` (点击创建按钮)
- → `BatchEditScreen` (快捷操作-编辑)

**数据加载**:
```typescript
// API调用
const fetchBatches = async (page = 1, status = '', search = '') => {
  const response = await apiClient.get('/api/mobile/processing/batches', {
    params: {
      page,
      limit: 20,
      status,
      search,
      orderBy: 'startDate',
      order: 'desc'
    }
  });

  return response.data.batches;
};
```

---

#### 6.2.2 BatchDetailScreen - 批次详情页

**路径**: `/src/screens/processing/batch/BatchDetailScreen.tsx`

**功能清单**:
- [ ] 批次基本信息展示
- [ ] 批次状态流转可视化
- [ ] 产量进度条
- [ ] 成本构成饼图
- [ ] 关联质检记录列表
- [ ] 关联工时记录列表
- [ ] 关联设备使用记录
- [ ] 批次时间线(可展开)
- [ ] 操作按钮组(根据状态和权限动态显示)
- [ ] 编辑按钮(仅planning状态可编辑)

**UI布局**:
```typescript
<ScrollView style={styles.container}>
  {/* 头部:批次号+状态 */}
  <BatchHeader batch={batch}>
    <Text style={styles.batchNumber}>{batch.batchNumber}</Text>
    <StatusBadge status={batch.status} />
    <Text style={styles.productType}>{batch.productType}</Text>
  </BatchHeader>

  {/* 状态流转可视化 */}
  <BatchStatusFlow currentStatus={batch.status} />

  {/* 基本信息卡片 */}
  <Card title="基本信息">
    <InfoRow label="负责人" value={batch.supervisor?.fullName} />
    <InfoRow label="生产线" value={batch.productionLine} />
    <InfoRow label="开始日期" value={formatDate(batch.startDate)} />
    <InfoRow label="结束日期" value={formatDate(batch.endDate)} />
  </Card>

  {/* 产量信息卡片 */}
  <Card title="产量信息">
    <ProgressBar
      label="生产进度"
      current={batch.actualQuantity}
      target={batch.targetQuantity}
      unit="kg"
      color={getProgressColor(batch.actualQuantity / batch.targetQuantity)}
    />
    <InfoRow label="目标产量" value={`${batch.targetQuantity} kg`} />
    <InfoRow label="实际产量" value={`${batch.actualQuantity || 0} kg`} />
    <InfoRow label="质量等级" value={batch.qualityGrade || '-'} />
  </Card>

  {/* 成本分析卡片 */}
  <Card title="成本分析">
    <CostPieChart
      data={[
        { label: '原料', value: batch.rawMaterialCost, color: '#FF6B6B' },
        { label: '人工', value: batch.laborCost, color: '#4ECDC4' },
        { label: '设备', value: batch.equipmentCost, color: '#45B7D1' },
      ]}
    />
    <InfoRow label="总成本" value={`¥${batch.totalCost?.toFixed(2)}`} bold />
    <InfoRow label="单位成本" value={`¥${batch.costPerKg?.toFixed(2)}/kg`} />
    <TouchableOpacity onPress={navigateToCostDetail}>
      <Text style={styles.link}>查看成本详情 →</Text>
    </TouchableOpacity>
  </Card>

  {/* 质检记录卡片 */}
  <Card title="质检记录">
    {batch.qualityInspections?.length > 0 ? (
      batch.qualityInspections.map(inspection => (
        <InspectionItem
          key={inspection.id}
          inspection={inspection}
          onPress={() => navigateToInspectionDetail(inspection.id)}
        />
      ))
    ) : (
      <EmptyState message="暂无质检记录" />
    )}
    <TouchableOpacity onPress={createInspection}>
      <Text style={styles.link}>+ 创建质检记录</Text>
    </TouchableOpacity>
  </Card>

  {/* 工时记录卡片 */}
  <Card title="工时记录">
    <InfoRow label="总工时" value={`${totalHours} 小时`} />
    <InfoRow label="参与员工" value={`${employeeCount} 人`} />
    <TouchableOpacity onPress={viewWorkSessions}>
      <Text style={styles.link}>查看详细工时 →</Text>
    </TouchableOpacity>
  </Card>

  {/* 批次时间线(可折叠) */}
  <Card title="批次时间线" collapsible>
    <Timeline events={batch.timeline} />
  </Card>

  {/* 备注 */}
  {batch.notes && (
    <Card title="备注">
      <Text>{batch.notes}</Text>
    </Card>
  )}
</ScrollView>

{/* 底部操作按钮组 */}
<ActionButtonGroup>
  {canEdit && (
    <Button
      mode="outlined"
      onPress={navigateToEdit}
      icon="pencil"
    >
      编辑
    </Button>
  )}
  {canStart && (
    <Button
      mode="contained"
      onPress={startProduction}
      icon="play"
    >
      开始生产
    </Button>
  )}
  {canPause && (
    <Button
      mode="outlined"
      onPress={pauseProduction}
      icon="pause"
    >
      暂停
    </Button>
  )}
  {canComplete && (
    <Button
      mode="contained"
      onPress={completeProduction}
      icon="check"
    >
      完成生产
    </Button>
  )}
</ActionButtonGroup>
```

**权限控制**:
```typescript
// 根据批次状态和用户权限决定可见按钮
const canEdit = batch.status === 'planning' && hasPermission('batch:edit');
const canStart = batch.status === 'planning' && hasPermission('batch:start');
const canPause = batch.status === 'in_progress' && hasPermission('batch:pause');
const canComplete = batch.status === 'in_progress' && hasPermission('batch:complete');
```

**页面跳转**:
- → `BatchEditScreen` (编辑按钮)
- → `BatchTimelineScreen` (查看时间线)
- → `BatchCostDetailScreen` (查看成本详情)
- → `QualityInspectionDetailScreen` (查看质检详情)
- → `QualityInspectionCreateScreen` (创建质检)

---

#### 6.2.3 BatchCreateScreen - 创建批次页

**路径**: `/src/screens/processing/batch/BatchCreateScreen.tsx`

**功能清单**:
- [ ] 表单验证(必填项检查)
- [ ] 产品类型选择器(Picker)
- [ ] 原材料多选
- [ ] 数量输入(数字键盘)
- [ ] 生产线选择
- [ ] 负责人选择(部门筛选)
- [ ] 开始日期选择(DatePicker)
- [ ] 备注输入(多行文本)
- [ ] 提交前确认弹窗
- [ ] 加载状态显示

**表单字段**:
```typescript
interface BatchFormData {
  productType: string;        // 产品类型 (必填)
  productCategory: string;    // 产品分类 (必填)
  rawMaterials: RawMaterial[]; // 原材料列表 (必填)
  targetQuantity: number;     // 目标产量 (必填)
  productionLine: string;     // 生产线 (必填)
  supervisorId: number;       // 负责人ID (必填)
  startDate: Date;            // 开始日期 (必填)
  expectedPrice?: number;     // 预期售价 (可选)
  notes?: string;             // 备注 (可选)
}

// 表单验证规则
const validationSchema = {
  productType: { required: true, message: '请选择产品类型' },
  rawMaterials: { required: true, minLength: 1, message: '请至少添加一种原材料' },
  targetQuantity: { required: true, min: 1, message: '目标产量必须大于0' },
  productionLine: { required: true, message: '请选择生产线' },
  supervisorId: { required: true, message: '请选择负责人' },
  startDate: { required: true, message: '请选择开始日期' }
};
```

**UI组件**:
```typescript
<KeyboardAvoidingView>
  <ScrollView>
    <Form>
      {/* 产品类型 */}
      <FormField label="产品类型*" error={errors.productType}>
        <Picker
          items={PRODUCT_TYPES}
          selectedValue={formData.productType}
          onValueChange={value => setFormData({ ...formData, productType: value })}
        />
      </FormField>

      {/* 原材料选择 */}
      <FormField label="原材料*" error={errors.rawMaterials}>
        <RawMaterialSelector
          selectedMaterials={formData.rawMaterials}
          onSelectionChange={handleMaterialsChange}
        />
        <TouchableOpacity onPress={addMaterial}>
          <Text style={styles.addButton}>+ 添加原材料</Text>
        </TouchableOpacity>
      </FormField>

      {/* 目标产量 */}
      <FormField label="目标产量(kg)*" error={errors.targetQuantity}>
        <TextInput
          keyboardType="numeric"
          placeholder="请输入目标产量"
          value={formData.targetQuantity?.toString()}
          onChangeText={value => setFormData({ ...formData, targetQuantity: Number(value) })}
        />
      </FormField>

      {/* 生产线 */}
      <FormField label="生产线*" error={errors.productionLine}>
        <Picker
          items={PRODUCTION_LINES}
          selectedValue={formData.productionLine}
          onValueChange={value => setFormData({ ...formData, productionLine: value })}
        />
      </FormField>

      {/* 负责人 */}
      <FormField label="负责人*" error={errors.supervisorId}>
        <UserPicker
          department="processing"
          role={['department_admin', 'operator']}
          selectedUserId={formData.supervisorId}
          onSelect={user => setFormData({ ...formData, supervisorId: user.id })}
        />
      </FormField>

      {/* 开始日期 */}
      <FormField label="开始日期*" error={errors.startDate}>
        <DatePicker
          value={formData.startDate}
          onChange={date => setFormData({ ...formData, startDate: date })}
          minimumDate={new Date()}
        />
      </FormField>

      {/* 预期售价 */}
      <FormField label="预期售价(元/kg)">
        <TextInput
          keyboardType="numeric"
          placeholder="可选,用于成本分析"
          value={formData.expectedPrice?.toString()}
          onChangeText={value => setFormData({ ...formData, expectedPrice: Number(value) })}
        />
      </FormField>

      {/* 备注 */}
      <FormField label="备注">
        <TextInput
          multiline
          numberOfLines={4}
          placeholder="请输入备注信息"
          value={formData.notes}
          onChangeText={value => setFormData({ ...formData, notes: value })}
        />
      </FormField>
    </Form>
  </ScrollView>

  {/* 底部提交按钮 */}
  <View style={styles.footer}>
    <Button
      mode="outlined"
      onPress={handleCancel}
      disabled={isSubmitting}
    >
      取消
    </Button>
    <Button
      mode="contained"
      onPress={handleSubmit}
      disabled={!isFormValid || isSubmitting}
      loading={isSubmitting}
    >
      创建批次
    </Button>
  </View>
</KeyboardAvoidingView>
```

**提交逻辑**:
```typescript
const handleSubmit = async () => {
  // 1. 表单验证
  const errors = validateForm(formData, validationSchema);
  if (Object.keys(errors).length > 0) {
    setErrors(errors);
    Alert.alert('提示', '请检查表单输入');
    return;
  }

  // 2. 确认弹窗
  Alert.alert(
    '确认创建批次?',
    `产品类型: ${formData.productType}\n目标产量: ${formData.targetQuantity} kg`,
    [
      { text: '取消', style: 'cancel' },
      { text: '确认', onPress: submitForm }
    ]
  );
};

const submitForm = async () => {
  setIsSubmitting(true);
  try {
    // 3. API调用
    const response = await apiClient.post('/api/mobile/processing/batches', formData);

    // 4. 成功提示
    Alert.alert('成功', '批次创建成功', [
      { text: '确定', onPress: () => navigation.goBack() }
    ]);
  } catch (error) {
    Alert.alert('错误', error.message || '创建失败,请重试');
  } finally {
    setIsSubmitting(false);
  }
};
```

**页面跳转**:
- → `BatchListScreen` (创建成功后返回)
- → `BatchDetailScreen` (创建成功可选跳转到详情)

---

#### 6.2.4 BatchEditScreen - 编辑批次页

**路径**: `/src/screens/processing/batch/BatchEditScreen.tsx`

**功能清单**:
- [ ] 加载现有批次数据
- [ ] 表单预填充
- [ ] 仅允许修改部分字段(根据状态)
- [ ] 表单验证
- [ ] 保存变更
- [ ] 取消编辑确认

**编辑规则**:
```typescript
// planning状态:所有字段可编辑
const editableFieldsForPlanning = [
  'productType', 'rawMaterials', 'targetQuantity',
  'productionLine', 'supervisorId', 'startDate', 'notes'
];

// in_progress状态:仅部分字段可编辑
const editableFieldsForInProgress = [
  'actualQuantity', 'notes'
];

// completed/failed状态:不允许编辑
const editableFieldsForCompleted = [];
```

**UI与BatchCreateScreen类似,区别**:
- 表单预填充现有数据
- 根据状态禁用部分字段
- 保存按钮文案为"保存修改"

---

#### 6.2.5 BatchTimelineScreen - 批次时间线页

**路径**: `/src/screens/processing/batch/BatchTimelineScreen.tsx`

**功能清单**:
- [ ] 时间线可视化展示
- [ ] 事件详情查看
- [ ] 按时间排序(最新在上)
- [ ] 事件类型图标区分
- [ ] 支持刷新加载最新事件

**事件类型**:
```typescript
const EVENT_TYPES = {
  CREATED: { label: '创建批次', icon: 'file-plus', color: '#4ECDC4' },
  STARTED: { label: '开始生产', icon: 'play', color: '#45B7D1' },
  PAUSED: { label: '暂停生产', icon: 'pause', color: '#FFA07A' },
  RESUMED: { label: '恢复生产', icon: 'play', color: '#45B7D1' },
  QUALITY_CHECK: { label: '质检', icon: 'check-circle', color: '#95E1D3' },
  QUALITY_PASS: { label: '质检通过', icon: 'check-circle', color: '#50C878' },
  QUALITY_FAIL: { label: '质检不通过', icon: 'x-circle', color: '#FF6B6B' },
  COMPLETED: { label: '完成生产', icon: 'check', color: '#50C878' },
  FAILED: { label: '生产失败', icon: 'x', color: '#FF6B6B' },
  UPDATED: { label: '更新信息', icon: 'edit', color: '#95A5A6' }
};
```

**UI组件**:
```typescript
<ScrollView style={styles.container}>
  <Timeline>
    {events.map((event, index) => (
      <TimelineItem
        key={event.id}
        isFirst={index === 0}
        isLast={index === events.length - 1}
      >
        <TimelineDot
          icon={EVENT_TYPES[event.type].icon}
          color={EVENT_TYPES[event.type].color}
        />
        <TimelineContent>
          <Text style={styles.eventType}>
            {EVENT_TYPES[event.type].label}
          </Text>
          <Text style={styles.eventTime}>
            {formatDateTime(event.timestamp)}
          </Text>
          {event.description && (
            <Text style={styles.eventDetail}>
              {event.description}
            </Text>
          )}
          {event.operator && (
            <Text style={styles.operator}>
              操作人: {event.operator.fullName}
            </Text>
          )}
          {event.metadata && (
            <View style={styles.metadata}>
              {Object.entries(event.metadata).map(([key, value]) => (
                <Text key={key} style={styles.metadataItem}>
                  {key}: {value}
                </Text>
              ))}
            </View>
          )}
        </TimelineContent>
      </TimelineItem>
    ))}
  </Timeline>
</ScrollView>
```

---

### 6.3 质量检验页面 (4页)

#### 6.3.1 QualityInspectionListScreen - 质检列表页

**路径**: `/src/screens/quality/QualityInspectionListScreen.tsx`

**功能清单**:
- [ ] 质检记录列表展示
- [ ] 按质检类型筛选(原料/过程/成品)
- [ ] 按质检结果筛选(合格/不合格/条件合格)
- [ ] 搜索(批次号、检测员)
- [ ] 下拉刷新、上拉加载更多
- [ ] 查看质检详情
- [ ] 创建质检记录

**UI组件**:
```typescript
<View style={styles.container}>
  <SearchBar placeholder="搜索批次号或检测员..." />

  <FilterTabs
    tabs={[
      { key: 'all', label: '全部' },
      { key: 'raw_material', label: '原料质检' },
      { key: 'process', label: '过程质检' },
      { key: 'final_product', label: '成品质检' }
    ]}
  />

  <FlatList
    data={inspections}
    renderItem={({ item }) => (
      <InspectionCard
        inspection={item}
        onPress={() => navigateToDetail(item.id)}
      />
    )}
  />

  <FAB
    icon="clipboard-check"
    onPress={() => navigation.navigate('QualityInspectionCreate')}
  />
</View>
```

---

#### 6.3.2 QualityInspectionCreateScreen - 创建质检页

**路径**: `/src/screens/quality/QualityInspectionCreateScreen.tsx`

**功能清单**:
- [ ] 选择批次(批次选择器)
- [ ] 选择质检类型(原料/过程/成品)
- [ ] 根据质检类型加载检测项模板
- [ ] 录入检测结果
- [ ] 拍照上传(最多10张)
- [ ] 不合格项记录
- [ ] 纠正措施记录
- [ ] 质检结果自动判定
- [ ] 提交质检

**表单字段**:
```typescript
interface QualityInspectionFormData {
  batchId: string;              // 批次ID
  inspectionType: InspectionType; // 质检类型
  testItems: TestItem[];        // 检测项列表
  overallResult: InspectionResult; // 总体结果(自动判定)
  qualityScore: number;         // 质量评分(自动计算)
  defectDetails?: string;       // 缺陷详情
  defectTypes?: string[];       // 缺陷类型
  correctiveActions?: string;   // 纠正措施
  photos: string[];             // 照片URL列表
  notes?: string;               // 备注
}
```

**检测项输入**:
```typescript
<View>
  <FormField label="质检类型*">
    <SegmentedControl
      values={['原料质检', '过程质检', '成品质检']}
      selectedIndex={inspectionTypeIndex}
      onChange={handleInspectionTypeChange}
    />
  </FormField>

  <FormField label="检测项">
    {testItems.map((item, index) => (
      <TestItemInput
        key={index}
        item={item}
        onChange={value => updateTestItem(index, value)}
      />
    ))}
  </FormField>

  <FormField label="照片上传">
    <PhotoUploader
      photos={formData.photos}
      onPhotosChange={setPhotos}
      maxPhotos={10}
    />
  </FormField>

  {/* 不合格时显示 */}
  {hasDefects && (
    <>
      <FormField label="缺陷详情*">
        <TextInput
          multiline
          placeholder="请描述具体缺陷..."
        />
      </FormField>
      <FormField label="纠正措施*">
        <TextInput
          multiline
          placeholder="请说明纠正措施..."
        />
      </FormField>
    </>
  )}
</View>
```

---

#### 6.3.3 QualityInspectionDetailScreen - 质检详情页

**功能清单**:
- [ ] 质检基本信息展示
- [ ] 检测项结果展示
- [ ] 照片查看(支持放大)
- [ ] 质检评分可视化
- [ ] 不合格项展示(如果有)
- [ ] 纠正措施展示
- [ ] 关联批次信息

---

#### 6.3.4 QualityStatisticsScreen - 质检统计页

**功能清单**:
- [ ] 质检合格率趋势图(折线图)
- [ ] 不合格项TOP10(柱状图)
- [ ] 质检员绩效排名
- [ ] 按产品类型统计
- [ ] 按时间段统计(日/周/月)
- [ ] 数据导出

**图表组件**:
```typescript
<ScrollView>
  <StatCard title="今日合格率" value="98.5%" trend="+2.3%" />
  <StatCard title="本周质检次数" value="156" trend="+12" />

  <LineChart
    title="质检合格率趋势(近7天)"
    data={qualityTrends}
    yAxisSuffix="%"
  />

  <BarChart
    title="不合格项TOP10"
    data={defectTypes}
    horizontal
  />

  <RankingList
    title="质检员绩效排名"
    data={inspectorPerformance}
    renderItem={item => (
      <View>
        <Text>{item.name}</Text>
        <Text>合格率: {item.passRate}%</Text>
        <Text>质检次数: {item.count}</Text>
      </View>
    )}
  />
</ScrollView>
```

---

### 6.4 员工工作页面 (3页)

#### 6.4.1 TimeClockScreen - 打卡主页 (✅ 已完成)

**路径**: `/src/screens/timeclock/TimeClockScreen.tsx`

**现有功能**: 上班/下班打卡、GPS位置记录、打卡照片

---

#### 6.4.2 ClockHistoryScreen - 打卡历史 (✅ 已完成)

**路径**: `/src/screens/timeclock/ClockHistoryScreen.tsx`

**现有功能**: 历史打卡记录查询、日历视图

---

#### 6.4.3 WorkRecordScreen - 工作记录页 (❌ 待开发)

**路径**: `/src/screens/processing/WorkRecordScreen.tsx`

**功能清单**:
- [ ] 个人工作记录列表
- [ ] 按批次筛选
- [ ] 按工作类型筛选
- [ ] 工作效率统计
- [ ] 工时明细
- [ ] 导出工作报表

---

### 6.5 设备监控页面 (4页)

#### 6.5.1 EquipmentListScreen - 设备列表页

**路径**: `/src/screens/equipment/EquipmentListScreen.tsx`

**功能清单**:
- [ ] 设备列表展示
- [ ] 设备状态筛选(正常/警告/故障/维护中)
- [ ] 设备类型筛选
- [ ] 设备实时状态指示灯
- [ ] 快速查看设备详情
- [ ] 跳转到实时监控

---

#### 6.5.2 EquipmentMonitoringScreen - 实时监控页

**路径**: `/src/screens/equipment/EquipmentMonitoringScreen.tsx`

**功能清单**:
- [ ] 多设备监控面板
- [ ] 实时参数展示(温度/湿度/压力/运行时长)
- [ ] 实时曲线图
- [ ] 状态指示灯(正常/警告/故障)
- [ ] 异常告警提示
- [ ] 自动刷新(每30秒)
- [ ] 手动刷新

**UI组件**:
```typescript
<ScrollView>
  <RefreshControl onRefresh={fetchData} />

  {equipmentList.map(equipment => (
    <MonitoringCard key={equipment.id}>
      <EquipmentHeader>
        <Text>{equipment.equipmentName}</Text>
        <StatusIndicator status={equipment.status} />
      </EquipmentHeader>

      <MetricsGrid>
        <MetricItem
          label="温度"
          value={equipment.metrics.temperature}
          unit="°C"
          isNormal={checkRange(equipment.metrics.temperature, equipment.tempRange)}
        />
        <MetricItem label="湿度" value={equipment.metrics.humidity} unit="%" />
        <MetricItem label="压力" value={equipment.metrics.pressure} unit="Pa" />
        <MetricItem label="运行时长" value={equipment.metrics.runtime} unit="h" />
      </MetricsGrid>

      <RealtimeChart
        data={equipment.historyData}
        interval={30000}
      />
    </MonitoringCard>
  ))}
</ScrollView>
```

---

#### 6.5.3 EquipmentDetailScreen - 设备详情页

**功能清单**:
- [ ] 设备基本信息
- [ ] 设备规格参数
- [ ] 运行状态历史
- [ ] 维护记录
- [ ] 使用记录
- [ ] 告警历史
- [ ] 报修功能

---

#### 6.5.4 EquipmentAlertsScreen - 设备告警页

**功能清单**:
- [ ] 告警列表
- [ ] 按严重程度筛选(critical/high/medium/low)
- [ ] 按状态筛选(active/acknowledged/resolved)
- [ ] 告警详情查看
- [ ] 告警确认
- [ ] 告警处理记录

**告警卡片**:
```typescript
<AlertCard alert={alert}>
  <SeverityBadge severity={alert.severity} />
  <Text style={styles.title}>{alert.title}</Text>
  <Text>{alert.message}</Text>
  <Text>设备: {alert.equipment?.name}</Text>
  <Text>时间: {formatDateTime(alert.triggeredAt)}</Text>

  {alert.status === 'active' && (
    <Button onPress={() => acknowledgeAlert(alert.id)}>
      确认告警
    </Button>
  )}
  {alert.status === 'acknowledged' && (
    <Button onPress={() => resolveAlert(alert.id)}>
      标记已解决
    </Button>
  )}
</AlertCard>
```

---

### 6.6 成本分析页面 (3页)

#### 6.6.1 CostAnalysisDashboard - 成本仪表板 (✅ 已完成)

**路径**: `/src/screens/analysis/CostAnalysisDashboard.tsx`

**现有功能**: 成本概览、成本趋势图

---

#### 6.6.2 BatchCostDetailScreen - 批次成本详情页 (❌ 待开发)

**路径**: `/src/screens/analysis/BatchCostDetailScreen.tsx`

**功能清单**:
- [ ] 成本构成饼图
- [ ] 成本明细表
- [ ] 单位成本计算
- [ ] 利润率计算
- [ ] 成本对比(目标成本、历史平均)
- [ ] AI优化建议
- [ ] 成本分析报告导出

**UI组件**:
```typescript
<ScrollView>
  <CostSummary>
    <SummaryCard label="总成本" value={batch.totalCost} unit="元" />
    <SummaryCard label="单位成本" value={batch.costPerKg} unit="元/kg" />
    <SummaryCard label="利润率" value={batch.profitRate} unit="%" />
  </CostSummary>

  <CostPieChart
    data={[
      { label: '原料', value: batch.rawMaterialCost },
      { label: '人工', value: batch.laborCost },
      { label: '设备', value: batch.equipmentCost }
    ]}
  />

  <CostBreakdown>
    <BreakdownItem
      label="原料成本"
      value={batch.rawMaterialCost}
      percentage={calculatePercentage(batch.rawMaterialCost, batch.totalCost)}
    />
    <BreakdownItem
      label="人工成本"
      value={batch.laborCost}
      details={`${batch.totalWorkMinutes}分钟 × ¥${batch.avgHourlyRate}/小时`}
    />
    <BreakdownItem
      label="设备成本"
      value={batch.equipmentCost}
      details={`${batch.totalEquipmentMinutes}分钟 × ¥${batch.avgEquipmentCost}/小时`}
    />
  </CostBreakdown>

  <OptimizationSuggestions batchId={batch.id} />
</ScrollView>
```

---

#### 6.6.3 CostTrendScreen - 成本趋势分析页 (❌ 待开发)

**功能清单**:
- [ ] 成本趋势折线图(近30天)
- [ ] 成本对比柱状图(按产品类型)
- [ ] 成本超标预警
- [ ] 成本优化目标设置
- [ ] 成本分析报告生成

---

### 6.7 生产仪表板页面 (2页)

#### 6.7.1 ProcessingDashboardScreen - 生产仪表板 (✅ 已完成)

**路径**: `/src/screens/processing/ProcessingDashboardScreen.tsx`

**现有功能**: 生产概览、关键指标展示

---

#### 6.7.2 ProductionStatisticsScreen - 生产统计详情页 (❌ 待开发)

**路径**: `/src/screens/processing/ProductionStatisticsScreen.tsx`

**功能清单**:
- [ ] 生产数据详细统计
- [ ] 按时间段统计(日/周/月)
- [ ] 按产品类型统计
- [ ] 按生产线统计
- [ ] 产量趋势图
- [ ] 效率分析
- [ ] 数据导出

---

### 6.8 数据导出页面 (1页)

#### 6.8.1 DataExportScreen - 数据导出页 (❌ 待开发)

**路径**: `/src/screens/processing/DataExportScreen.tsx`

**功能清单**:
- [ ] 选择导出类型(批次报表/质检报表/工时报表/成本报表)
- [ ] 选择时间范围
- [ ] 选择导出格式(PDF/Excel/CSV)
- [ ] 预览报表
- [ ] 导出到本地
- [ ] 分享报表(邮件/微信/其他)

---

## 页面跳转关系图

### 7.1 整体导航架构

```
┌──────────────────────────────────────────────────────────────────┐
│                        生产仪表板 (入口)                          │
│               ProcessingDashboardScreen                          │
└──────────────┬───────────────────────────────────────────────────┘
               │
    ┌──────────┼──────────┬──────────┬──────────┬──────────┐
    │          │          │          │          │          │
    ▼          ▼          ▼          ▼          ▼          ▼
┌────────┐┌────────┐┌────────┐┌────────┐┌────────┐┌────────┐
│批次管理││质检管理││员工工作││设备监控││成本分析││数据导出│
│5个页面 ││4个页面 ││3个页面 ││4个页面 ││3个页面 ││1个页面 │
└────────┘└────────┘└────────┘└────────┘└────────┘└────────┘
```

### 7.2 批次管理模块导航流程

```
BatchListScreen (批次列表)
  │
  ├─ [点击批次] → BatchDetailScreen (批次详情)
  │                    │
  │                    ├─ [编辑] → BatchEditScreen
  │                    │                │
  │                    │                └─ [保存] → BatchDetailScreen
  │                    │
  │                    ├─ [查看时间线] → BatchTimelineScreen
  │                    │
  │                    ├─ [查看成本详情] → BatchCostDetailScreen
  │                    │                         │
  │                    │                         └─ [AI分析] → (显示AI分析结果)
  │                    │
  │                    ├─ [创建质检] → QualityInspectionCreateScreen
  │                    │                    │
  │                    │                    └─ [提交] → BatchDetailScreen
  │                    │
  │                    ├─ [开始生产] → (API调用,状态变更)
  │                    ├─ [暂停生产] → (API调用,状态变更)
  │                    └─ [完成生产] → (API调用,状态变更)
  │
  └─ [创建批次] → BatchCreateScreen
                       │
                       └─ [提交] → BatchListScreen (或 BatchDetailScreen)
```

### 7.3 质检管理模块导航流程

```
QualityInspectionListScreen (质检列表)
  │
  ├─ [点击质检记录] → QualityInspectionDetailScreen (质检详情)
  │                          │
  │                          └─ [关联批次] → BatchDetailScreen
  │
  ├─ [创建质检] → QualityInspectionCreateScreen
  │                    │
  │                    ├─ [选择批次] → 批次选择器
  │                    ├─ [上传照片] → 相机/相册
  │                    └─ [提交] → QualityInspectionListScreen
  │
  └─ [统计分析] → QualityStatisticsScreen
```

### 7.4 设备监控模块导航流程

```
EquipmentListScreen (设备列表)
  │
  ├─ [点击设备] → EquipmentDetailScreen (设备详情)
  │                    │
  │                    ├─ [查看监控数据] → (显示历史曲线图)
  │                    ├─ [维护记录] → (显示维护历史)
  │                    └─ [告警历史] → EquipmentAlertsScreen
  │
  ├─ [实时监控] → EquipmentMonitoringScreen
  │                    │
  │                    └─ [点击设备] → EquipmentDetailScreen
  │
  └─ [告警管理] → EquipmentAlertsScreen
                       │
                       ├─ [确认告警] → (API调用,状态变更)
                       └─ [解决告警] → (API调用,状态变更)
```

### 7.5 成本分析模块导航流程

```
CostAnalysisDashboard (成本仪表板)
  │
  ├─ [点击批次] → BatchCostDetailScreen (批次成本详情)
  │                    │
  │                    ├─ [AI智能分析] → (调用DeepSeek API,显示分析结果)
  │                    ├─ [成本对比] → (显示与目标成本、历史对比)
  │                    └─ [导出报表] → DataExportScreen
  │
  └─ [成本趋势] → CostTrendScreen
                       │
                       └─ [选择时间范围] → (更新趋势图)
```

### 7.6 跨模块跳转关系

```
批次详情页 (BatchDetailScreen)
  │
  ├→ 质检模块: QualityInspectionCreateScreen
  ├→ 成本模块: BatchCostDetailScreen
  ├→ 员工模块: WorkRecordScreen (查看工时)
  └→ 设备模块: EquipmentDetailScreen (查看设备使用)

质检详情页 (QualityInspectionDetailScreen)
  │
  └→ 批次模块: BatchDetailScreen (关联批次)

成本详情页 (BatchCostDetailScreen)
  │
  ├→ 批次模块: BatchDetailScreen (返回批次)
  └→ 质检模块: QualityInspectionListScreen (查看质检影响)

设备详情页 (EquipmentDetailScreen)
  │
  └→ 批次模块: BatchListScreen (查看相关批次)
```

### 7.7 页面栈管理

**主导航栈** (Main Stack):
```
Stack.Navigator initialRouteName="ProcessingDashboard">
  <Stack.Screen name="ProcessingDashboard" component={ProcessingDashboardScreen} />
  <Stack.Screen name="BatchList" component={BatchListScreen} />
  <Stack.Screen name="QualityInspectionList" component={QualityInspectionListScreen} />
  <Stack.Screen name="EquipmentList" component={EquipmentListScreen} />
  <Stack.Screen name="CostAnalysisDashboard" component={CostAnalysisDashboardScreen} />
</Stack.Navigator>
```

**批次栈** (Batch Stack):
```
Stack.Navigator>
  <Stack.Screen name="BatchDetail" component={BatchDetailScreen} />
  <Stack.Screen name="BatchCreate" component={BatchCreateScreen} />
  <Stack.Screen name="BatchEdit" component={BatchEditScreen} />
  <Stack.Screen name="BatchTimeline" component={BatchTimelineScreen} />
</Stack.Navigator>
```

**质检栈** (Quality Stack):
```
Stack.Navigator>
  <Stack.Screen name="QualityInspectionCreate" component={QualityInspectionCreateScreen} />
  <Stack.Screen name="QualityInspectionDetail" component={QualityInspectionDetailScreen} />
  <Stack.Screen name="QualityStatistics" component={QualityStatisticsScreen} />
</Stack.Navigator>
```

---

## 与其他模块的协作

### 8.1 生产模块在系统中的位置

```
┌────────────────────────────────────────────────────────────┐
│                   白垩纪食品溯源系统                         │
└────────────────────────────────────────────────────────────┘
            │
    ┌───────┼───────┬───────┬───────┬───────┬───────┐
    │       │       │       │       │       │       │
    ▼       ▼       ▼       ▼       ▼       ▼       ▼
┌──────┐┌──────┐┌──────┐┌──────┐┌──────┐┌──────┐┌──────┐
│认证  ││生产  ││仓储  ││销售  ││财务  ││统计  ││平台  │
│模块  ││模块  ││模块  ││模块  ││模块  ││模块  ││管理  │
│      ││(核心)││(未来)││(未来)││(未来)││      ││      │
└──────┘└──┬───┘└──────┘└──────┘└──────┘└──────┘└──────┘
           │
      ┌────┴────┬────┬────┬────┬────┐
      │         │    │    │    │    │
   批次管理  质检  员工  设备  成本  仪表板
```

### 8.2 认证模块集成

**用户权限控制**:
```typescript
// 生产模块权限定义
const PROCESSING_PERMISSIONS = {
  // 批次管理
  'batch:view': ['operator', 'department_admin', 'factory_super_admin', 'platform_admin'],
  'batch:create': ['department_admin', 'factory_super_admin', 'platform_admin'],
  'batch:edit': ['department_admin', 'factory_super_admin', 'platform_admin'],
  'batch:delete': ['factory_super_admin', 'platform_admin'],
  'batch:start': ['department_admin', 'factory_super_admin', 'platform_admin'],
  'batch:complete': ['department_admin', 'factory_super_admin', 'platform_admin'],

  // 质检管理
  'quality:view': ['operator', 'department_admin', 'factory_super_admin', 'platform_admin'],
  'quality:create': ['operator', 'department_admin', 'factory_super_admin'],
  'quality:edit': ['department_admin', 'factory_super_admin'],

  // 设备监控
  'equipment:view': ['operator', 'department_admin', 'factory_super_admin'],
  'equipment:control': ['department_admin', 'factory_super_admin'],

  // 成本分析
  'cost:view': ['department_admin', 'factory_super_admin', 'platform_admin'],
  'cost:ai_analysis': ['factory_super_admin', 'platform_admin']
};

// 权限检查函数
const hasPermission = (permission) => {
  const userRole = authStore.user?.roleCode;
  return PROCESSING_PERMISSIONS[permission]?.includes(userRole) || false;
};
```

**页面权限守卫**:
```typescript
// 批次创建页面权限守卫
const BatchCreateScreen = () => {
  const user = useAuthStore(state => state.user);

  // 检查权限
  if (!hasPermission('batch:create')) {
    return (
      <PermissionDenied
        message="您没有权限创建批次"
        requiredRoles={['department_admin', 'factory_super_admin']}
      />
    );
  }

  // 正常渲染
  return <BatchCreateForm />;
};
```

### 8.3 员工管理模块集成

#### 8.3.1 集成点1: 批次负责人选择

**前端调用**:
```typescript
// BatchCreateScreen中选择负责人
const SupervisorSelector = () => {
  const [supervisors, setSupervisors] = useState([]);

  useEffect(() => {
    // 调用员工管理模块API获取可用负责人
    const fetchSupervisors = async () => {
      const response = await apiClient.get('/api/mobile/users', {
        params: {
          department: 'processing',
          role: ['department_admin', 'operator'],
          isActive: true
        }
      });
      setSupervisors(response.data.users);
    };

    fetchSupervisors();
  }, []);

  return (
    <Picker
      items={supervisors.map(user => ({
        label: `${user.fullName} (${user.department})`,
        value: user.id
      }))}
    />
  );
};
```

#### 8.3.2 集成点2: 工时记录关联批次

**员工打卡时关联批次**:
```typescript
// TimeClockScreen中打卡时选择关联批次
const ClockInForm = () => {
  const [workType, setWorkType] = useState('production');
  const [relatedBatchId, setRelatedBatchId] = useState(null);

  const handleClockIn = async () => {
    const clockData = {
      workType,
      relatedBatchId: workType === 'production' ? relatedBatchId : null,
      location: await getCurrentLocation(),
      photo: await capturePhoto()
    };

    await apiClient.post('/api/mobile/timeclock/clock-in', clockData);
  };

  return (
    <Form>
      <FormField label="工作类型">
        <Picker
          items={WORK_TYPES}
          selectedValue={workType}
          onValueChange={setWorkType}
        />
      </FormField>

      {workType === 'production' && (
        <FormField label="关联批次">
          <BatchPicker
            onSelect={setRelatedBatchId}
            filter={{ status: 'in_progress' }}
          />
        </FormField>
      )}

      <Button onPress={handleClockIn}>上班打卡</Button>
    </Form>
  );
};
```

#### 8.3.3 集成点3: 成本核算读取工时

**后端成本计算时读取工时数据**:
```javascript
// 计算批次人工成本
const calculateLaborCost = async (batchId) => {
  // 调用员工管理模块API
  const workSessions = await prisma.employeeWorkSession.findMany({
    where: {
      relatedBatchId: batchId,
      endTime: { not: null }
    },
    include: {
      user: {
        select: {
          id: true,
          fullName: true,
          hourlyRate: true  // 员工时薪
        }
      }
    }
  });

  let totalLaborCost = 0;
  for (const session of workSessions) {
    const hours = session.totalMinutes / 60;
    const overtimeHours = (session.overtimeMinutes || 0) / 60;
    const hourlyRate = session.user.hourlyRate || 20;

    totalLaborCost += hours * hourlyRate;
    totalLaborCost += overtimeHours * hourlyRate * 1.5; // 加班1.5倍
  }

  return totalLaborCost;
};
```

**数据流向**:
```
员工打卡 → employee_time_clocks表
          ↓
    创建工作时段 → employee_work_sessions表 (relatedBatchId)
          ↓
    批次完成时读取工时 → 计算人工成本
          ↓
    更新批次成本 → processing_batches.labor_cost
```

### 8.4 设备监控模块集成

#### 8.4.1 集成点1: 批次执行时启动设备使用

**批次开始生产时自动记录设备使用**:
```javascript
// 批次开始生产
export const startProduction = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { equipmentIds } = req.body;  // 使用的设备列表

    // 1. 更新批次状态
    const batch = await prisma.processingBatch.update({
      where: { id },
      data: { status: 'in_progress' }
    });

    // 2. 启动设备使用记录
    for (const equipmentId of equipmentIds) {
      await prisma.equipmentUsage.create({
        data: {
          equipmentId,
          batchId: id,
          startTime: new Date(),
          usageType: 'production'
        }
      });
    }

    res.json(createSuccessResponse(batch, '生产已开始'));
  } catch (error) {
    next(error);
  }
};
```

#### 8.4.2 集成点2: 设备告警影响批次

**设备严重故障时自动暂停关联批次**:
```javascript
// 设备告警处理逻辑
export const handleEquipmentAlert = async (equipmentId, alertData) => {
  // 1. 创建告警记录
  const alert = await prisma.alertNotification.create({
    data: {
      equipmentId,
      severity: alertData.severity,
      title: alertData.title,
      message: alertData.message,
      status: 'active'
    }
  });

  // 2. 如果是严重告警,暂停相关批次
  if (alertData.severity === 'critical') {
    // 查找正在使用该设备的批次
    const activeBatches = await prisma.processingBatch.findMany({
      where: {
        status: 'in_progress',
        equipmentUsage: {
          some: {
            equipmentId,
            endTime: null  // 正在使用
          }
        }
      }
    });

    // 自动暂停批次
    for (const batch of activeBatches) {
      await prisma.processingBatch.update({
        where: { id: batch.id },
        data: { status: 'paused' }
      });

      // 通知批次负责人
      await sendPushNotification(batch.supervisorId, {
        title: '批次已自动暂停',
        message: `设备${equipmentId}故障,批次${batch.batchNumber}已暂停`
      });
    }
  }

  return alert;
};
```

#### 8.4.3 集成点3: 成本核算读取设备数据

**计算设备成本**:
```javascript
const calculateEquipmentCost = async (batchId) => {
  // 读取设备使用记录
  const equipmentUsage = await prisma.equipmentUsage.findMany({
    where: { batchId, endTime: { not: null } },
    include: {
      equipment: {
        select: {
          id: true,
          equipmentName: true,
          deprecationRate: true  // 折旧率(元/小时)
        }
      }
    }
  });

  let totalEquipmentCost = 0;
  for (const usage of equipmentUsage) {
    const hours = usage.usageMinutes / 60;
    const deprecationRate = usage.equipment.deprecationRate || 10;
    totalEquipmentCost += hours * deprecationRate;
  }

  return totalEquipmentCost;
};
```

### 8.5 仓储模块集成 (未来规划 - Phase 4+)

#### 8.5.1 集成点1: 批次创建时原料出库

**业务流程**:
```
1. 用户创建批次
   ↓
2. 选择原材料(从仓储库存中选择)
   ↓
3. 批次创建成功 → 触发原料出库
   ↓
4. 调用仓储模块API: POST /api/warehouse/outbound
   请求数据:
   {
     batchId: 'batch_123',
     materials: [
       { materialId: 'MAT001', quantity: 500, unit: 'kg' }
     ],
     purpose: 'production',
     warehouseId: 'WH001'
   }
   ↓
5. 仓储模块:
   - 检查库存是否充足
   - 创建出库单
   - 减少库存
   - 返回出库单号
   ↓
6. 生产模块保存出库单号到批次
```

**数据同步**:
```typescript
// 批次创建时触发原料出库
const createBatchWithMaterialOutbound = async (batchData) => {
  // 1. 创建批次
  const batch = await apiClient.post('/api/mobile/processing/batches', batchData);

  // 2. 触发原料出库
  try {
    const outbound = await apiClient.post('/api/warehouse/outbound', {
      batchId: batch.id,
      materials: batchData.rawMaterials,
      purpose: 'production'
    });

    // 3. 更新批次关联出库单
    await apiClient.put(`/api/mobile/processing/batches/${batch.id}`, {
      outboundOrderId: outbound.id
    });
  } catch (error) {
    // 出库失败,提示用户
    Alert.alert('警告', '原料出库失败,请手动处理');
  }

  return batch;
};
```

#### 8.5.2 集成点2: 批次完成时成品入库

**业务流程**:
```
1. 批次质检通过,状态变更为completed
   ↓
2. 自动触发成品入库
   ↓
3. 调用仓储模块API: POST /api/warehouse/inbound
   请求数据:
   {
     batchId: 'batch_123',
     productId: 'PROD001',
     productType: '速冻鱼排',
     quantity: 400,  // actualQuantity
     qualityGrade: 'A',
     productionDate: '2025-01-05',
     expiryDate: '2025-07-05',  // 生产日期+6个月
     warehouseId: 'WH002'
   }
   ↓
4. 仓储模块:
   - 创建入库单
   - 增加库存
   - 生成追溯码(绑定batchId)
   - 返回入库单号
   ↓
5. 生产模块保存入库单号到批次
```

**追溯码生成**:
```
追溯码格式: {batchNumber}-{QRCode}
示例: FAC001-20250105-001-QR123456

扫描追溯码可查询:
  - 批次信息(产品类型、产量、日期)
  - 原料信息(供应商、批次号)
  - 质检信息(质检结果、照片)
  - 生产信息(负责人、工时)
  - 成本信息(单位成本、成本构成)
```

### 8.6 销售模块集成 (未来规划 - Phase 5+)

#### 8.6.1 集成点1: 销售订单关联批次

**业务流程**:
```
1. 销售人员创建订单
   ↓
2. 选择产品(从仓储库存选择)
   ↓
3. 系统显示产品的批次追溯信息
   - 批次号
   - 生产日期
   - 质量等级
   - 剩余保质期
   ↓
4. 订单发货时记录批次号
   ↓
5. 客户收到产品,扫码查询批次信息
```

#### 8.6.2 集成点2: 成本数据用于定价

**读取批次成本用于产品定价**:
```typescript
// 销售模块调用生产模块API获取成本数据
const getSuggestedPrice = async (productType) => {
  // 1. 查询近30天该产品的平均成本
  const response = await apiClient.get('/api/mobile/processing/batches/cost-average', {
    params: {
      productType,
      startDate: getDateBefore(30),
      endDate: new Date()
    }
  });

  const avgCostPerKg = response.data.avgCostPerKg;

  // 2. 计算建议售价(成本+30%利润)
  const suggestedPrice = avgCostPerKg * 1.3;

  return {
    avgCost: avgCostPerKg,
    suggestedPrice,
    profitMargin: 0.3
  };
};
```

### 8.7 财务模块集成 (未来规划 - Phase 6+)

#### 8.7.1 集成点1: 批次成本数据同步

**数据同步流程**:
```
批次状态变更为completed
  ↓
触发成本数据同步到财务模块
  ↓
调用财务模块API: POST /api/finance/cost-sync
请求数据:
{
  batchId: 'batch_123',
  batchNumber: 'FAC001-20250105-001',
  productType: '速冻鱼排',
  productionDate: '2025-01-05',
  costs: {
    rawMaterial: 15000,  // 原料成本
    labor: 4800,         // 人工成本
    equipment: 1200,     // 设备成本
    other: 1000,         // 其他成本
    total: 22000         // 总成本
  },
  quantity: 400,  // 产量(kg)
  costPerUnit: 55  // 单位成本(元/kg)
}
  ↓
财务模块:
  - 创建成本记录
  - 分配到成本会计科目
  - 用于财务报表生成
```

#### 8.7.2 集成点2: 利润分析

**财务模块读取生产数据进行利润分析**:
```typescript
// 财务模块调用生产模块API
const getProfitAnalysis = async (year, month) => {
  // 1. 获取指定月份所有完成批次
  const batches = await apiClient.get('/api/mobile/processing/batches', {
    params: {
      status: 'completed',
      startDate: `${year}-${month}-01`,
      endDate: `${year}-${month}-31`
    }
  });

  // 2. 汇总成本和收入
  let totalCost = 0;
  let totalRevenue = 0;

  for (const batch of batches) {
    totalCost += batch.totalCost;
    totalRevenue += batch.actualQuantity * batch.expectedPrice;
  }

  // 3. 计算利润
  const profit = totalRevenue - totalCost;
  const profitMargin = (profit / totalRevenue) * 100;

  return {
    totalCost,
    totalRevenue,
    profit,
    profitMargin,
    batchCount: batches.length
  };
};
```

### 8.8 数据流向总览

```
┌─────────────────────────────────────────────────────────────┐
│                     完整数据流向图                           │
└─────────────────────────────────────────────────────────────┘

1. 认证模块 → 生产模块
   - 用户登录 → 权限数据 → 页面权限控制
   - 用户信息 → 批次负责人、质检员、操作人

2. 员工管理模块 ↔ 生产模块
   - 员工列表 → 批次负责人选择
   - 打卡记录 → 工时数据 → 人工成本计算
   - 批次ID → 工作记录关联

3. 设备监控模块 ↔ 生产模块
   - 设备列表 → 批次使用设备选择
   - 设备使用记录 → 设备成本计算
   - 设备告警 → 批次状态变更(暂停)

4. 生产模块 → 仓储模块 (未来)
   - 批次创建 → 原料出库
   - 批次完成 → 成品入库
   - 批次ID → 追溯码绑定

5. 生产模块 → 销售模块 (未来)
   - 批次成本 → 产品定价建议
   - 批次信息 → 产品追溯信息

6. 生产模块 → 财务模块 (未来)
   - 批次成本数据 → 财务成本核算
   - 批次利润数据 → 利润分析报表
```

---

## 优化方向

### 9.1 前端UI开发 (优先级: P0)

**目标**: 完成15-20个缺失页面的开发

**工作量估算**:
- 批次管理页面: 5个 × 4天 = 20天
- 质检管理页面: 4个 × 3天 = 12天
- 设备监控页面: 4个 × 3天 = 12天
- 成���分析页面: 2个 × 3天 = 6天
- 其他页面: 2个 × 2天 = 4天
- **总计**: 54天 (约11周,2人并行开发可缩短到6周)

**技术要求**:
- 遵循Material Design 3设计规范
- 响应式布局(适配不同屏幕尺寸)
- 组件复用(抽取通用组件)
- 性能优化(列表虚拟化、图片懒加载)

### 9.2 DeepSeek AI集成 (优先级: P0)

**当前问题**: AI分析使用Mock数据,无法提供真实的成本优化建议

**优化方案**:
1. 集成真实DeepSeek API
2. 实现5分钟缓存策略(相同查询不重复调用)
3. 月度预算控制(¥30/月)
4. 预算用完后降级到规则引擎

**详细设计**: 参见 `PRD-认证与生产模块优化方案.md` 的阶段3

**实施步骤**:
- Week 1: DeepSeek API集成
- Week 2: 缓存策略实现
- Week 3: 预算控制和降级逻辑
- Week 4: 测试和优化

### 9.3 离线功能支持 (优先级: P1)

**目标**: 核心功能支持离线操作

**离线可操作**:
- ✅ 员工打卡(离线缓存,联网后同步)
- ✅ 质检记录创建(离线保存,联网后提交)
- ✅ 批次列表查看(本地缓存)

**离线不可操作**:
- ❌ 批次状态变更(需实时性)
- ❌ 成本计算(需服务器计算)
- ❌ AI分析(需调用API)

**实现方案**:
```typescript
// 离线数据管理
class OfflineDataManager {
  // 保存离线打卡记录
  async saveOfflineClockRecord(record) {
    const key = `offline_clock_${Date.now()}`;
    await AsyncStorage.setItem(key, JSON.stringify(record));
  }

  // 同步离线数据
  async syncOfflineData() {
    const keys = await AsyncStorage.getAllKeys();
    const offlineKeys = keys.filter(k => k.startsWith('offline_'));

    for (const key of offlineKeys) {
      const data = await AsyncStorage.getItem(key);
      try {
        await this.uploadToServer(JSON.parse(data));
        await AsyncStorage.removeItem(key);  // 同步成功,删除本地数据
      } catch (error) {
        console.log('同步失败,保留离线数据');
      }
    }
  }
}
```

### 9.4 性能优化 (优先级: P1)

#### 9.4.1 API性能优化

**问题**: 批次列表查询慢,质检记录多时响应慢

**优化方案**:
1. **数据库索引优化**
   ```sql
   -- 复合索引
   CREATE INDEX idx_batch_composite
   ON processing_batches(factory_id, status, start_date DESC);

   CREATE INDEX idx_inspection_batch_date
   ON quality_inspections(batch_id, inspection_date DESC);
   ```

2. **查询优化**
   ```javascript
   // 使用select减少数据传输
   const batches = await prisma.processingBatch.findMany({
     where: { factoryId, status },
     select: {
       id: true,
       batchNumber: true,
       productType: true,
       status: true,
       startDate: true,
       targetQuantity: true,
       actualQuantity: true,
       supervisor: {
         select: { id: true, fullName: true }
       }
     },
     take: 20
   });
   ```

3. **Redis缓存**
   ```javascript
   // 仪表板数据缓存5分钟
   const cacheKey = `dashboard_${factoryId}`;
   let data = await redisClient.get(cacheKey);

   if (!data) {
     data = await calculateDashboardData(factoryId);
     await redisClient.setex(cacheKey, 300, JSON.stringify(data));
   }

   return JSON.parse(data);
   ```

#### 9.4.2 前端性能优化

**优化项**:
1. **列表虚拟化**
   ```typescript
   import { FlashList } from "@shopify/flash-list";

   <FlashList
     data={batches}
     renderItem={renderBatchCard}
     estimatedItemSize={120}
     onEndReached={loadMore}
   />
   ```

2. **图片懒加载和压缩**
   ```typescript
   import FastImage from 'react-native-fast-image';

   <FastImage
     source={{ uri: imageUrl, priority: FastImage.priority.normal }}
     resizeMode={FastImage.resizeMode.cover}
   />
   ```

3. **数据缓存**
   ```typescript
   import { useQuery } from '@tanstack/react-query';

   const { data, isLoading } = useQuery(
     ['batches', status, page],
     () => fetchBatches(status, page),
     { staleTime: 5 * 60 * 1000 }  // 5分钟缓存
   );
   ```

### 9.5 用户体验优化 (优先级: P2)

#### 9.5.1 操作反馈优化

**优化项**:
1. 加载状态显示
   - 骨架屏(Skeleton Screen)
   - 加载动画(Spinner)
   - 进度条(Progress Bar)

2. 成功/失败提示
   - Toast消息(轻量提示)
   - Alert弹窗(重要操作)
   - 震动反馈(Haptic Feedback)

3. 表单验证提示
   - 实时验证
   - 字段级错误提示
   - 友好的错误消息

#### 9.5.2 智能功能

**优化项**:
1. **批次号智能生成预览**
   - 创建批次时预览批次号
   - 自动检测冲突

2. **表单自动填充**
   - 基于历史记录自动填充
   - 智能推荐原材料

3. **异常预警**
   - 成本超标预警
   - 产量不足预警
   - 质检异常预警

---

## 实施计划

### 10.1 总体时间规划

**实施周期**: 4-6周
**开发人员**: 2名前端开发 + 1名后端开发

| 周次 | 主要任务 | 产出物 | 责任人 |
|-----|---------|--------|--------|
| **Week 1** | 批次管理UI开发(列表、详情) | 2个页面 | 前端1+2 |
| **Week 2** | 批次管理UI开发(创建、编辑、时间线) | 3个页面 | 前端1+2 |
| **Week 3** | 质检管理UI开发 | 4个页面 | 前端1+2 |
| **Week 4** | 设备监控UI开发 | 4个页面 | 前端1+2 |
| **Week 5** | 成本分析页面+DeepSeek集成 | 2个页面+AI集成 | 前端1+后端1 |
| **Week 6** | 性能优化、测试、Bug修复 | 可发布版本 | 全员 |

### 10.2 详细任务分解

#### Week 1: 批次管理UI开发(1)

**前端开发1** (5天):
- Day 1-2: BatchListScreen (批次列表页)
  - 列表组件
  - 筛选功能
  - 搜索功能
  - 分页加载
- Day 3-5: BatchDetailScreen (批次详情页)
  - 基本信息展示
  - 状态流转可视化
  - 成本饼图
  - 操作按钮组

**前端开发2** (5天):
- Day 1-3: 通用组件开发
  - BatchCard (批次卡片)
  - StatusBadge (状态徽章)
  - ProgressBar (进度条)
  - CostPieChart (成本饼图)
- Day 4-5: BatchDetailScreen辅助功能
  - 质检记录列表
  - 工时记录展示
  - 时间线组件

**后端开发** (5天):
- Day 1-2: 优化批次查询API性能
- Day 3-4: 添加缺失的批次API(resume等)
- Day 5: API文档更新

---

#### Week 2: 批次管理UI开发(2)

**前端开发1** (5天):
- Day 1-3: BatchCreateScreen (创建批次页)
  - 表单设计
  - 原材料选择器
  - 负责人选择器
  - 表单验证
- Day 4-5: BatchEditScreen (编辑批次页)
  - 复用创建页面组件
  - 编辑权限控制
  - 数据预填充

**前端开发2** (5天):
- Day 1-3: BatchTimelineScreen (批次时间线页)
  - 时间线组件
  - 事件类型配置
  - 操作人信息展示
- Day 4-5: 批次相关API集成
  - 创建批次API调用
  - 状态变更API调用
  - 错误处理

---

#### Week 3: 质检管理UI开发

**前端开发1** (5天):
- Day 1-2: QualityInspectionListScreen (质检列表)
  - 列表组件
  - 类型筛选
  - 结果筛选
- Day 3-5: QualityInspectionCreateScreen (创建质检)
  - 批次选择器
  - 检测项输入
  - 照片上传
  - 纠正措施输入

**前端开发2** (5天):
- Day 1-2: QualityInspectionDetailScreen (质检详情)
  - 基本信息展示
  - 检测项结果展示
  - 照片查看器
- Day 3-5: QualityStatisticsScreen (质检统计)
  - 合格率趋势图
  - 不合格项TOP10
  - 质检员排名

**后端开发** (5天):
- Day 1-3: 质检API优化和补充
- Day 4-5: 质检统计API开发

---

#### Week 4: 设备监控UI开发

**前端开发1** (5天):
- Day 1-2: EquipmentListScreen (设备列表)
- Day 3-5: EquipmentMonitoringScreen (实时监控)
  - 监控面板
  - 实时曲线图
  - 自动刷新机制

**前端开发2** (5天):
- Day 1-2: EquipmentDetailScreen (设备详情)
- Day 3-5: EquipmentAlertsScreen (设备告警)
  - 告警列表
  - 告警确认
  - 告警处理

**后端开发** (5天):
- Day 1-3: 设备监控API优化
- Day 4-5: 告警推送机制优化

---

#### Week 5: 成本分析+AI集成

**前端开发1** (5天):
- Day 1-3: BatchCostDetailScreen (批次成本详情)
  - 成本构成可视化
  - AI分析结果展示
  - 成本对比
- Day 4-5: CostTrendScreen (成本趋势)

**前端开发2** (5天):
- Day 1-3: DeepSeek AI前端集成
  - AI分析请求
  - 结果展示组件
  - Loading状态
- Day 4-5: 成本相关组件优化

**后端开发** (5天):
- Day 1-4: DeepSeek API集成
  - API调用封装
  - 缓存策略
  - 预算控制
  - 降级逻辑
- Day 5: 成本计算优化

---

#### Week 6: 性能优化+测试

**前端开发1** (5天):
- Day 1-2: 性能优化
  - 列表虚拟化
  - 图片懒加载
  - 缓存优化
- Day 3-5: 功能测试和Bug修复

**前端开发2** (5天):
- Day 1-2: 用户体验优化
  - 加载状态
  - 错误提示
  - 交互反馈
- Day 3-5: 功能测试和Bug修复

**后端开发** (5天):
- Day 1-2: 性能优化
  - 数据库索引
  - Redis缓存
  - API响应优化
- Day 3-5: 集成测试和Bug修复

---

### 10.3 里程碑

| 里程碑 | 时间 | 标志 | 验收标准 |
|-------|------|------|---------|
| **M1: 批次管理完成** | Week 2 结束 | 批次CRUD全部可用 | 5个页面完成,API集成 |
| **M2: 质检管理完成** | Week 3 结束 | 质检流程可用 | 4个页面完成,API集成 |
| **M3: 设备监控完成** | Week 4 结束 | 设备监控可用 | 4个页面完成,API集成 |
| **M4: AI集成完成** | Week 5 结束 | AI分析可用 | DeepSeek真实集成 |
| **M5: 系统优化完成** | Week 6 结束 | 可发布版本 | 性能达标,Bug<10个 |

### 10.4 风险管理

**风险清单**:

| 风险 | 概率 | 影响 | 应对措施 |
|-----|------|------|---------|
| **前端人手不足** | 中 | 高 | 提前1周招聘,或延长周期 |
| **DeepSeek API限制** | 低 | 中 | 准备备用AI服务(如通义千问) |
| **性能不达标** | 中 | 中 | 提前进行性能测试,预留优化时间 |
| **需求变更** | 高 | 中 | 每周review,控制范围蔓延 |
| **数据库迁移** | 低 | 高 | 提前备份,灰度发布 |

---

## 验收标准

### 11.1 功能完整性

| 验收项 | 标准 | 验收方式 |
|-------|------|---------|
| **页面完成度** | 18/18页面完成(100%) | 页面清单逐一检查 |
| **API集成** | 所有页面与后端API正常交互 | 功能测试 |
| **业务流程** | 完整生产流程可走通 | 端到端测试 |
| **权限控制** | 7种角色权限正确 | 权限测试 |
| **离线功能** | 打卡、质检支持离线 | 离线测试 |
| **AI分析** | DeepSeek真实集成,成本<¥30/月 | 成本监控 |

### 11.2 性能指标

| 指标 | 目标值 | 当前值 | 测试方法 |
|-----|-------|--------|---------|
| **App启动时间** | <3秒 | - | 冷启动测试 |
| **API响应时间** | <500ms | - | API性能测试 |
| **列表加载时间** | <2秒 | - | 页面加载测试 |
| **列表滚动帧率** | ≥60fps | - | 性能监控工具 |
| **内存占用** | <200MB | - | 内存监控 |
| **崩溃率** | <1% | - | Crashlytics监控 |

### 11.3 用户体验

| 验收项 | 标准 | 验收方式 |
|-------|------|---------|
| **操作流畅度** | 无明显卡顿,动画流畅 | 用户测试 |
| **错误提示** | 所有错误有友好提示 | 异常场景测试 |
| **加载状态** | 所有异步操作有Loading | UI检查 |
| **表单验证** | 所有必填项有验证,提示清晰 | 表单测试 |
| **空状态** | 所有列表有空状态提示 | UI检查 |
| **网络异常处理** | 断网/超时有提示和重试 | 网络异常测试 |

### 11.4 代码质量

| 验收项 | 标准 | 验收方式 |
|-------|------|---------|
| **代码规范** | ESLint无错误,警告<10个 | 代码检查 |
| **组件复用** | 通用组件提取到components目录 | 代码Review |
| **API封装** | 所有API调用统一封装 | 代码Review |
| **错误处理** | 所有API调用有try-catch | 代码Review |
| **类型安全** | TypeScript strict模式,无any | 类型检查 |
| **注释完整** | 复杂逻辑有注释说明 | 代码Review |

### 11.5 测试覆盖

| 测试类型 | 覆盖率目标 | 当前值 | 测试工具 |
|---------|----------|--------|---------|
| **单元测试** | 核心业务逻辑>80% | - | Jest |
| **集成测试** | 关键API>90% | - | Supertest |
| **UI测试** | 核心页面>70% | - | React Native Testing Library |
| **E2E测试** | 主流程100% | - | Detox |

### 11.6 发布检查清单

**正式发布前检查**:
- [ ] 所有Mock代码已移除
- [ ] 所有console.log已移除或改为生产环境不输出
- [ ] 所有硬编码的测试数据已移除
- [ ] API地址已切换到生产环境
- [ ] 敏感信息(密钥、Token)已环境变量化
- [ ] 应用图标和启动画面已替换为正式版
- [ ] 应用版本号已更新
- [ ] 应用权限申请已完善
- [ ] Crashlytics监控已配置
- [ ] 性能监控已配置
- [ ] 用户反馈渠道已配置

---

## 附录

### A. 相关文档

- **PRD-系统产品需求文档.md** - 系统整体需求
- **PRD-认证规划.md** - 认证系统详细设计
- **PRD-认证与生产模块优化方案.md** - 优化方案(包含DeepSeek集成)
- **API_DOCUMENTATION.md** - 后端API文档
- **backend/prisma/schema.prisma** - 数据库Schema

### B. 术语表

| 术语 | 英文 | 说明 |
|-----|------|------|
| **批次** | Batch | 一次完整的生产过程 |
| **批次号** | Batch Number | 唯一标识一个批次,格式: FAC001-20250105-001 |
| **工时** | Work Hours | 员工工作时长,以小时或分钟计 |
| **工种** | Work Type | 员工工作类型,如生产、质检等 |
| **质检** | Quality Inspection | 质量检验,包括原料、过程、成品三阶段 |
| **合格率** | Pass Rate | 质检合格数/总质检数 |
| **单位成本** | Cost Per Unit | 总成本/产量 |
| **利润率** | Profit Rate | (售价-成本)/售价 |
| **折旧率** | Deprecation Rate | 设备折旧费用/小时 |
| **追溯码** | Traceability Code | 产品追溯二维码,绑定批次ID |

### C. 技术栈

**前端**:
- React Native 0.76+
- Expo 53+
- React Navigation 7+
- Zustand (状态管理)
- React Query (数据缓存)
- Zod (数据验证)
- React Native Chart Kit (图表)
- React Native Fast Image (图片优化)
- @shopify/flash-list (列表虚拟化)

**后端**:
- Node.js 18+
- Express.js 4.18+
- Prisma 5.22+ (ORM)
- MySQL 8.0+
- Redis (可选,用于缓存)
- DeepSeek API (AI分析)

**开发工具**:
- TypeScript 5.0+
- ESLint + Prettier
- Jest (单元测试)
- React Native Testing Library
- Detox (E2E测试)

---

**文档结束**

*最后更新: 2025-01-05*
*文档版本: v1.0*
*作者: 白垩纪食品溯源系统开发团队*

#!/usr/bin/env tsx
/**
 * Day 6: 环境适配工具
 * 支持开发/测试/生产环境的Mock配置管理
 */

import fs from 'fs'
import path from 'path'

interface EnvironmentConfig {
  name: string
  mockEnabled: boolean
  apiBaseUrl: string
  mockEnvironment: string
  description: string
}

const ENVIRONMENTS: Record<string, EnvironmentConfig> = {
  development: {
    name: 'Development',
    mockEnabled: true,
    apiBaseUrl: 'http://localhost:3000/api',
    mockEnvironment: 'development',
    description: 'MSW Mock服务完全启用，用于本地开发'
  },
  testing: {
    name: 'Testing',
    mockEnabled: true,
    apiBaseUrl: 'http://localhost:3000/api',
    mockEnvironment: 'testing',
    description: 'MSW Mock服务启用，使用测试数据集'
  },
  staging: {
    name: 'Staging',
    mockEnabled: false,
    apiBaseUrl: 'https://api-staging.example.com',
    mockEnvironment: 'production',
    description: '连接到Staging API，Mock服务禁用'
  },
  production: {
    name: 'Production',
    mockEnabled: false,
    apiBaseUrl: 'https://api.production.com',
    mockEnvironment: 'production',
    description: '连接到生产API，Mock服务完全禁用'
  }
}

/**
 * 生成环境配置文件
 */
function generateEnvFile(environment: string): string {
  const config = ENVIRONMENTS[environment]
  if (!config) {
    throw new Error(`未知环境: ${environment}`)
  }

  return `# ${config.name} Environment Configuration
# Generated by Day 6 Environment Adapter
# Date: ${new Date().toISOString()}

# Core Configuration
NODE_ENV=${environment}
NEXT_PUBLIC_API_BASE_URL=${config.apiBaseUrl}

# MSW Mock Configuration (Day 6 Migration)
NEXT_PUBLIC_MOCK_ENABLED=${config.mockEnabled}
NEXT_PUBLIC_MOCK_ENVIRONMENT=${config.mockEnvironment}

# Environment Description
# ${config.description}

# Day 6 Migration Notes:
# - All App Router APIs have been migrated to MSW
# - Mock data is centrally managed through MSW system
# - Version management ensures schema consistency
# - Use 'npm run mock:status' to verify configuration
`
}

/**
 * 应用环境配置
 */
function applyEnvironment(environment: string): void {
  try {
    const envContent = generateEnvFile(environment)
    const envPath = path.join(process.cwd(), '.env.local')

    // 备份现有配置
    if (fs.existsSync(envPath)) {
      const backupPath = `${envPath}.backup.${Date.now()}`
      fs.copyFileSync(envPath, backupPath)
      console.log(`📁 备份现有配置: ${backupPath}`)
    }

    // 写入新配置
    fs.writeFileSync(envPath, envContent)
    console.log(`✅ 环境配置已更新: ${environment}`)
    console.log(`📄 配置文件: .env.local`)

    // 显示配置详情
    const config = ENVIRONMENTS[environment]
    console.log(`\n📊 环境详情:`)
    console.log(`名称: ${config.name}`)
    console.log(`Mock启用: ${config.mockEnabled ? '是' : '否'}`)
    console.log(`API地址: ${config.apiBaseUrl}`)
    console.log(`描述: ${config.description}`)

  } catch (error) {
    console.error(`❌ 环境配置失败:`, error)
    process.exit(1)
  }
}

/**
 * 显示当前环境状态
 */
function showCurrentEnvironment(): void {
  const envPath = path.join(process.cwd(), '.env.local')

  console.log('\n🌍 当前环境状态')
  console.log('=' .repeat(50))

  if (!fs.existsSync(envPath)) {
    console.log('❌ 未找到 .env.local 文件')
    console.log('💡 使用 --apply <environment> 创建配置')
    return
  }

  try {
    const content = fs.readFileSync(envPath, 'utf-8')
    const lines = content.split('\n')

    let nodeEnv = 'unknown'
    let mockEnabled = 'unknown'
    let apiBaseUrl = 'unknown'

    for (const line of lines) {
      if (line.startsWith('NODE_ENV=')) {
        nodeEnv = line.split('=')[1]
      } else if (line.startsWith('NEXT_PUBLIC_MOCK_ENABLED=')) {
        mockEnabled = line.split('=')[1]
      } else if (line.startsWith('NEXT_PUBLIC_API_BASE_URL=')) {
        apiBaseUrl = line.split('=')[1]
      }
    }

    console.log(`环境: ${nodeEnv}`)
    console.log(`Mock启用: ${mockEnabled}`)
    console.log(`API地址: ${apiBaseUrl}`)

    // 检查配置有效性
    if (ENVIRONMENTS[nodeEnv]) {
      const expectedConfig = ENVIRONMENTS[nodeEnv]
      const isValid =
        mockEnabled === expectedConfig.mockEnabled.toString() &&
        apiBaseUrl === expectedConfig.apiBaseUrl

      console.log(`配置状态: ${isValid ? '✅ 有效' : '⚠️ 不匹配'}`)

      if (!isValid) {
        console.log(`\n💡 建议运行: npm run env:apply ${nodeEnv}`)
      }
    }

  } catch (error) {
    console.error('❌ 读取环境配置失败:', error)
  }
}

/**
 * 显示所有可用环境
 */
function listEnvironments(): void {
  console.log('\n🌍 可用环境配置')
  console.log('=' .repeat(50))

  for (const [key, config] of Object.entries(ENVIRONMENTS)) {
    console.log(`\n📋 ${key}`)
    console.log(`  名称: ${config.name}`)
    console.log(`  Mock: ${config.mockEnabled ? '启用' : '禁用'}`)
    console.log(`  API: ${config.apiBaseUrl}`)
    console.log(`  说明: ${config.description}`)
  }

  console.log(`\n💡 使用方法: npm run env:apply <environment>`)
}

/**
 * 验证环境配置
 */
async function validateEnvironment(): Promise<void> {
  console.log('\n🔍 验证环境配置')
  console.log('=' .repeat(50))

  try {
    // 检查环境变量
    const mockEnabled = process.env.NEXT_PUBLIC_MOCK_ENABLED === 'true'
    const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL

    console.log(`Mock启用: ${mockEnabled}`)
    console.log(`API地址: ${apiBaseUrl}`)

    if (mockEnabled) {
      // 测试MSW状态
      console.log('\n🧪 测试MSW服务...')
      try {
        const response = await fetch(`${apiBaseUrl}/users/profile`)
        if (response.ok) {
          console.log('✅ MSW服务正常')
        } else if (response.status === 410) {
          console.log('✅ App Router API已迁移到MSW (410状态正常)')
        } else {
          console.log(`⚠️ MSW响应异常: ${response.status}`)
        }
      } catch (error) {
        console.log(`❌ MSW服务不可用: ${error}`)
      }
    } else {
      console.log('ℹ️ Mock服务已禁用，将使用外部API')
    }

  } catch (error) {
    console.error('❌ 环境验证失败:', error)
  }
}

/**
 * 主函数
 */
async function main() {
  const args = process.argv.slice(2)

  if (args.includes('--help') || args.length === 0) {
    console.log('\n🌍 环境适配工具 (Day 6)')
    console.log('=' .repeat(50))
    console.log('命令:')
    console.log('  --list       列出所有可用环境')
    console.log('  --status     显示当前环境状态')
    console.log('  --apply <env> 应用指定环境配置')
    console.log('  --validate   验证当前环境配置')
    console.log('  --help       显示帮助信息')
    console.log('\n可用环境: development, testing, staging, production')
    return
  }

  if (args.includes('--list')) {
    listEnvironments()
  }

  if (args.includes('--status')) {
    showCurrentEnvironment()
  }

  if (args.includes('--validate')) {
    await validateEnvironment()
  }

  const applyIndex = args.indexOf('--apply')
  if (applyIndex !== -1 && args[applyIndex + 1]) {
    const environment = args[applyIndex + 1]
    if (ENVIRONMENTS[environment]) {
      applyEnvironment(environment)
    } else {
      console.error(`❌ 未知环境: ${environment}`)
      console.log('可用环境:', Object.keys(ENVIRONMENTS).join(', '))
      process.exit(1)
    }
  }
}

// 执行主函数
main().catch(console.error)

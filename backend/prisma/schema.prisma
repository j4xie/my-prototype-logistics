generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Factory {
  id                   String                 @id @map("id")
  name                 String                 @map("name")
  industry             String?                @map("industry")
  address              String?                @map("address")
  employeeCount        Int?                   @map("employee_count")
  subscriptionPlan     String?                @map("subscription_plan")
  contactName          String?                @map("contact_name")
  contactPhone         String?                @map("contact_phone")
  contactEmail         String?                @map("contact_email")
  isActive             Boolean                @default(true) @map("is_active")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  confidence           Float?                 @map("confidence")
  factoryYear          Int?                   @map("factory_year")
  industryCode         String?                @map("industry_code")
  inferenceData        Json?                  @map("inference_data")
  legacyId             String?                @map("legacy_id")
  manuallyVerified     Boolean                @default(false) @map("manually_verified")
  regionCode           String?                @map("region_code")
  sequenceNumber       Int?                   @map("sequence_number")
  settings             FactorySettings?
  sessions             Session[]
  roleHistory          UserRoleHistory[]
  whitelist            UserWhitelist[]
  users                User[]
  workRecords          EmployeeWorkRecord[]
  equipment            FactoryEquipment[]
  processingBatches    ProcessingBatch[]
  qualityInspections   QualityInspection[]
  deviceMonitoringData DeviceMonitoringData[]
  alertNotifications   AlertNotification[]
  dashboardMetrics     DashboardMetric[]
  activationCodes      ActivationCode[]
  systemLogs           SystemLog[]
  apiAccessLogs        ApiAccessLog[]
  reportTemplates      ReportTemplate[]
  timeClocks                EmployeeTimeClock[]
  workTypes                 WorkType[]
  workSessions              EmployeeWorkSession[]
  rawMaterialTypes          RawMaterialType[]
  productTypes              ProductType[]
  materialProductConversions MaterialProductConversion[]
  merchants                 Merchant[]
  suppliers                 Supplier[]  // 供应商关联
  customers                 Customer[]  // 客户关联
  productionPlans           ProductionPlan[]
  materialBatches           MaterialBatch[]  // 原材料批次关联
  aiWeeklyQuota             Int                       @default(20) @map("ai_weekly_quota")  // AI每周使用配额
  aiUsageLogs               AIUsageLog[]  // AI使用日志

  @@index([industryCode, regionCode, factoryYear], map: "idx_factory_code")
  @@index([legacyId], map: "idx_legacy_id")
  @@index([industryCode], map: "idx_industry")
  @@index([regionCode], map: "idx_region")
  @@index([factoryYear], map: "idx_year")
  @@map("factories")
}

model PlatformAdmin {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  passwordHash   String          @map("password_hash")
  email          String          @unique
  phone          String?
  fullName       String?         @map("full_name")
  role           PlatformRole    @default(platform_admin) @map("role")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  addedWhitelist UserWhitelist[]

  @@index([role], map: "idx_platform_role")
  @@map("platform_admins")
}

model UserWhitelist {
  id                Int             @id @default(autoincrement())
  factoryId         String          @map("factory_id")
  phoneNumber       String          @map("phone_number")
  status            WhitelistStatus @default(PENDING) @map("status")
  addedByUserId     Int?            @map("added_by_user_id")
  expiresAt         DateTime        @map("expires_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  addedByPlatformId Int?            @map("added_by_platform_id")
  addedByPlatform   PlatformAdmin?  @relation(fields: [addedByPlatformId], references: [id])
  addedByUser       User?           @relation(fields: [addedByUserId], references: [id])
  factory           Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@unique([factoryId, phoneNumber])
  @@index([status, factoryId], map: "idx_status_factory")
  @@index([expiresAt], map: "idx_expires_at")
  @@index([addedByPlatformId], map: "idx_whitelist_added_by_platform")
  @@index([addedByUserId], map: "idx_whitelist_added_by_user")
  @@map("user_whitelist")
}

model User {
  id           Int             @id @default(autoincrement())
  factoryId    String          @map("factory_id")
  username     String
  passwordHash String          @map("password_hash")
  email        String
  phone        String?
  fullName     String?         @map("full_name")
  isActive     Boolean         @default(false) @map("is_active")
  roleCode     FactoryUserRole @default(unactivated) @map("role_code")
  department   Department?     @map("department")
  position     String?         @map("position")
  lastLogin    DateTime?       @map("last_login")

  // 新增：薪资和CCR成本字段
  monthlySalary       Decimal? @map("monthly_salary") @db.Decimal(10, 2)
  expectedWorkMinutes Int?     @map("expected_work_minutes")
  ccrRate             Decimal? @map("ccr_rate") @db.Decimal(8, 4)

  createdAt              DateTime              @default(now()) @map("created_at")
  updatedAt              DateTime              @updatedAt @map("updated_at")
  sessions               Session[]
  roleHistory            UserRoleHistory[]
  addedWhitelist         UserWhitelist[]
  mobileDevices          MobileDevice[]
  workRecords            EmployeeWorkRecord[]
  processingBatches      ProcessingBatch[]     @relation("BatchSupervisor")
  qualityInspections     QualityInspection[]   @relation("QualityInspector")
  resolvedAlerts         AlertNotification[]   @relation("AlertResolver")
  createdActivationCodes ActivationCode[]      @relation("ActivationCreator")
  activationRecords      ActivationRecord[]    @relation("ActivationUser")
  systemLogs             SystemLog[]           @relation("SystemLogUser")
  apiAccessLogs          ApiAccessLog[]        @relation("ApiAccessUser")
  createdReportTemplates ReportTemplate[]      @relation("ReportCreator")
  timeClocks               EmployeeTimeClock[]
  workSessions             EmployeeWorkSession[]
  batchWorkSessions        BatchWorkSession[]
  createdMaterialTypes     RawMaterialType[]         @relation("MaterialTypeCreator")
  createdProductTypes      ProductType[]             @relation("ProductTypeCreator")
  createdConversionRates   MaterialProductConversion[] @relation("ConversionRateCreator")
  createdMerchants         Merchant[]                @relation("MerchantCreator")
  createdSuppliers         Supplier[]                @relation("SupplierCreator")
  createdCustomers         Customer[]                @relation("CustomerCreator")
  createdProductionPlans   ProductionPlan[]          @relation("ProductionPlanCreator")
  materialConsumptions     MaterialConsumption[]     @relation("MaterialConsumptionRecorder")
  shipmentRecords          ShipmentRecord[]          @relation("ShipmentRecorder")
  createdMaterialBatches   MaterialBatch[]           @relation("MaterialBatchCreator")
  batchAdjustments         MaterialBatchAdjustment[] @relation("BatchAdjuster")
  dailyProductionRecords   DailyProductionRecord[]   @relation("DailyRecorder")
  aiUsageLogs              AIUsageLog[]              // AI使用日志
  factory                  Factory                   @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@unique([factoryId, username])
  @@unique([factoryId, email])
  @@index([roleCode, department], map: "idx_role_department")
  @@index([factoryId, roleCode], map: "idx_factory_role")
  @@index([isActive, factoryId], map: "idx_active_users")
  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       Int      @map("user_id")
  factoryId    String   @map("factory_id")
  token        String   @unique @db.VarChar(500)
  refreshToken String   @unique @map("refresh_token") @db.VarChar(500)
  expiresAt    DateTime @map("expires_at")
  isRevoked    Boolean  @default(false) @map("is_revoked")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  factory      Factory  @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([factoryId], map: "idx_sessions_factory_id")
  @@index([userId], map: "idx_sessions_user_id")
  @@map("sessions")
}

model TempToken {
  id          Int           @id @default(autoincrement())
  token       String        @unique @db.VarChar(500)
  type        TempTokenType @map("type")
  factoryId   String        @map("factory_id")
  phoneNumber String?       @map("phone_number")
  data        Json?         @map("data")
  expiresAt   DateTime      @map("expires_at")
  isUsed      Boolean       @default(false) @map("is_used")
  createdAt   DateTime      @default(now()) @map("created_at")

  @@index([type, factoryId], map: "idx_type_factory")
  @@index([expiresAt, isUsed], map: "idx_expires_used")
  @@map("temp_tokens")
}

model UserRoleHistory {
  id            Int              @id @default(autoincrement())
  userId        Int              @map("user_id")
  factoryId     String           @map("factory_id")
  oldRoleCode   FactoryUserRole? @map("old_role_code")
  newRoleCode   FactoryUserRole  @map("new_role_code")
  oldDepartment Department?      @map("old_department")
  newDepartment Department?      @map("new_department")
  changedBy     Int              @map("changed_by")
  changedByType String           @map("changed_by_type")
  reason        String?          @map("reason")
  createdAt     DateTime         @default(now()) @map("created_at")
  factory       Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_role_history_user")
  @@index([factoryId], map: "idx_role_history_factory")
  @@index([changedBy], map: "idx_changed_by")
  @@index([createdAt], map: "idx_created_at")
  @@map("user_role_history")
}

model PermissionAuditLog {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime @default(now()) @map("timestamp")
  actorType        String   @map("actor_type")
  actorId          Int      @map("actor_id")
  username         String   @map("username")
  action           String   @map("action")
  resource         String?  @map("resource")
  targetUserId     Int?     @map("target_user_id")
  targetResourceId String?  @map("target_resource_id")
  ipAddress        String?  @map("ip_address")
  userAgent        String?  @map("user_agent")
  factoryId        String?  @map("factory_id")
  department       String?  @map("department")
  result           String   @default("success") @map("result")
  errorMessage     String?  @map("error_message")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([actorType, actorId], map: "idx_admin_actor")
  @@index([timestamp], map: "idx_admin_timestamp")
  @@index([factoryId], map: "idx_admin_factory")
  @@index([action], map: "idx_admin_action")
  @@index([result], map: "idx_admin_result")
  @@map("permission_audit_logs")
}

model DataAccessLog {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now()) @map("timestamp")
  userId     Int      @map("user_id")
  userType   String   @map("user_type")
  factoryId  String?  @map("factory_id")
  department String?  @map("department")
  dataType   String   @map("data_type")
  resourceId String?  @map("resource_id")
  operation  String   @map("operation")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId, userType], map: "idx_data_user")
  @@index([timestamp], map: "idx_data_timestamp")
  @@index([factoryId], map: "idx_data_factory")
  @@index([dataType], map: "idx_data_type")
  @@index([operation], map: "idx_data_operation")
  @@map("data_access_logs")
}

model FactorySettings {
  id                     Int             @id @default(autoincrement())
  factoryId              String          @unique @map("factory_id")
  allowSelfRegistration  Boolean         @default(false) @map("allow_self_registration")
  requireAdminApproval   Boolean         @default(true) @map("require_admin_approval")
  defaultUserRole        FactoryUserRole @default(viewer) @map("default_user_role")
  sessionTimeoutMinutes  Int             @default(1440) @map("session_timeout_minutes")
  maxFailedLoginAttempts Int             @default(5) @map("max_failed_login_attempts")
  passwordPolicy         Json?           @map("password_policy")
  departmentSettings     Json?           @map("department_settings")
  customPermissions      Json?           @map("custom_permissions")
  aiSettings             Json?           @map("ai_settings")  // AI分析设置
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  factory                Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@map("factory_settings")
}

enum WhitelistStatus {
  PENDING
  REGISTERED
  EXPIRED

  @@map("whitelist_status")
}

enum TempTokenType {
  PHONE_VERIFICATION
  PASSWORD_RESET

  @@map("temp_token_type")
}

enum PlatformRole {
  platform_admin  // 统一的平台管理员角色，拥有所有平台权限

  @@map("platform_role")
}

enum FactoryUserRole {
  factory_super_admin
  permission_admin
  department_admin
  operator
  viewer
  unactivated

  @@map("factory_user_role")
}

enum Department {
  farming
  processing
  logistics
  quality
  management

  @@map("department")
}

// Phase 1 遗留表 - 移动设备管理
model MobileDevice {
  id          String    @id @default(uuid())
  userId      Int       @map("user_id")
  deviceId    String    @unique @map("device_id")
  deviceName  String?   @map("device_name")
  deviceModel String?   @map("device_model")
  osVersion   String?   @map("os_version")
  platform    Platform  @map("platform")
  isActive    Boolean   @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, deviceId], map: "idx_user_device")
  @@map("mobile_devices")
}

// Phase 1 遗留表 - 员工工作记录
model EmployeeWorkRecord {
  id              String        @id @default(uuid())
  userId          Int           @map("user_id")
  factoryId       String        @map("factory_id")
  workDate        DateTime      @map("work_date") @db.Date
  shift           Shift         @default(morning) @map("shift")
  workHours       Decimal       @map("work_hours") @db.Decimal(4, 2)
  workDescription String?       @map("work_description") @db.Text
  qualityCheck    QualityResult @default(pending) @map("quality_check")
  equipmentUsed   Json?         @map("equipment_used")
  locationData    Json?         @map("location_data")
  photos          Json?         @map("photos")
  createdAt       DateTime      @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  factory Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@index([userId, workDate], map: "idx_user_work")
  @@index([factoryId, workDate], map: "idx_factory_work")
  @@map("employee_work_records")
}

// Phase 1 遗留表 - 工厂设备管理（成本核算增强版）
model FactoryEquipment {
  id             String          @id @default(uuid())
  factoryId      String          @map("factory_id")
  equipmentCode  String          @map("equipment_code")
  equipmentName  String          @map("equipment_name")
  equipmentType  String?         @map("equipment_type")
  department     Department?     @map("department")
  status         EquipmentStatus @default(active) @map("status")
  location       String?         @map("location")
  specifications Json?           @map("specifications")

  // 新增：设备成本字段
  purchaseCost         Decimal?  @map("purchase_cost") @db.Decimal(12, 2)
  hourlyOperationCost  Decimal?  @map("hourly_operation_cost") @db.Decimal(8, 2)
  maintenanceCount     Int       @default(0) @map("maintenance_count")
  totalMaintenanceCost Decimal?  @map("total_maintenance_cost") @db.Decimal(12, 2)
  lastMaintenanceDate  DateTime? @map("last_maintenance_date")

  createdAt DateTime @default(now()) @map("created_at")

  factory            Factory                @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  monitoringData     DeviceMonitoringData[]
  maintenanceRecords EquipmentMaintenance[]
  usageRecords       BatchEquipmentUsage[]

  @@index([factoryId, equipmentCode], map: "idx_factory_equipment")
  @@index([status, department], map: "idx_equipment_status")
  @@map("factory_equipment")
}

enum Platform {
  ios
  android

  @@map("platform")
}

enum Shift {
  morning
  afternoon
  night

  @@map("shift")
}

enum QualityResult {
  pass
  fail
  pending

  @@map("quality_result")
}

enum EquipmentStatus {
  active
  maintenance
  inactive

  @@map("equipment_status")
}

// Phase 2 核心表 - 加工批次追踪（成本核算增强版）
model ProcessingBatch {
  id             String        @id @default(uuid())
  factoryId      String        @map("factory_id")
  batchNumber    String        @unique @map("batch_number")
  productType    String?       @map("product_type")
  rawMaterials   Json?         @map("raw_materials")
  startDate      DateTime      @map("start_date") @db.Date
  endDate        DateTime?     @map("end_date") @db.Date
  status         BatchStatus   @default(planning) @map("status")
  productionLine String?       @map("production_line")
  supervisorId   Int?          @map("supervisor_id")
  targetQuantity Decimal?      @map("target_quantity") @db.Decimal(10, 2)
  actualQuantity Decimal?      @map("actual_quantity") @db.Decimal(10, 2)
  qualityGrade   QualityGrade? @map("quality_grade")
  notes          String?       @db.Text

  // 新增：原材料成本字段
  rawMaterialCost     Decimal?         @map("raw_material_cost") @db.Decimal(12, 2)
  rawMaterialWeight   Decimal?         @map("raw_material_weight") @db.Decimal(10, 2)
  rawMaterialCategory String?          @map("raw_material_category") @db.VarChar(100)
  productCategory     ProductCategory? @map("product_category")
  expectedPrice       Decimal?         @map("expected_price") @db.Decimal(12, 2)

  // 新增：成本核算字段
  laborCost     Decimal? @map("labor_cost") @db.Decimal(12, 2)
  equipmentCost Decimal? @map("equipment_cost") @db.Decimal(12, 2)
  totalCost     Decimal? @map("total_cost") @db.Decimal(12, 2)
  profitMargin  Decimal? @map("profit_margin") @db.Decimal(12, 2)
  profitRate    Decimal? @map("profit_rate") @db.Decimal(5, 2)

  createdAt DateTime @default(now()) @map("created_at")

  factory              Factory               @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  supervisor           User?                 @relation("BatchSupervisor", fields: [supervisorId], references: [id])
  qualityInspections   QualityInspection[]
  workSessions         BatchWorkSession[]
  equipmentUsage       BatchEquipmentUsage[]
  materialConsumptions MaterialConsumption[]

  @@index([factoryId, batchNumber], map: "idx_factory_batch")
  @@index([status, startDate], map: "idx_batch_status")
  @@index([productCategory], map: "idx_product_category")
  @@map("processing_batches")
}

// Phase 2 核心表 - 质检记录管理
model QualityInspection {
  id                String           @id @default(uuid())
  batchId           String           @map("batch_id")
  factoryId         String           @map("factory_id")
  inspectorId       Int              @map("inspector_id")
  inspectionType    InspectionType   @map("inspection_type")
  inspectionDate    DateTime         @map("inspection_date")
  testItems         Json?            @map("test_items")
  overallResult     InspectionResult @map("overall_result")
  qualityScore      Decimal?         @map("quality_score") @db.Decimal(3, 2)
  defectDetails     Json?            @map("defect_details")
  correctiveActions String?          @map("corrective_actions") @db.Text
  photos            Json?            @map("photos")
  createdAt         DateTime         @default(now()) @map("created_at")

  batch     ProcessingBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  factory   Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  inspector User            @relation("QualityInspector", fields: [inspectorId], references: [id])

  @@index([batchId, inspectionDate], map: "idx_batch_inspection")
  @@index([inspectorId, inspectionDate], map: "idx_inspector_record")
  @@map("quality_inspections")
}

// Phase 2 核心表 - 设备实时监控
model DeviceMonitoringData {
  id             String           @id @default(uuid())
  equipmentId    String           @map("equipment_id")
  factoryId      String           @map("factory_id")
  timestamp      DateTime         @map("timestamp")
  metrics        Json             @map("metrics")
  status         MonitoringStatus @default(normal) @map("status")
  alertTriggered Boolean          @default(false) @map("alert_triggered")
  dataSource     String?          @map("data_source")
  createdAt      DateTime         @default(now()) @map("created_at")

  equipment FactoryEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  factory   Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@index([equipmentId, timestamp], map: "idx_equipment_time")
  @@index([factoryId, timestamp], map: "idx_factory_monitoring")
  @@index([alertTriggered, status, timestamp], map: "idx_alert_status")
  @@map("device_monitoring_data")
}

// Phase 2 核心表 - 智能告警系统
model AlertNotification {
  id              String        @id @default(uuid())
  factoryId       String        @map("factory_id")
  alertType       AlertType     @map("alert_type")
  severity        AlertSeverity @map("severity")
  title           String        @db.VarChar(200)
  message         String        @db.Text
  sourceId        String?       @map("source_id")
  sourceType      String?       @map("source_type") @db.VarChar(50)
  assignedTo      Json?         @map("assigned_to")
  status          AlertStatus   @default(new) @map("status")
  createdAt       DateTime      @default(now()) @map("created_at")
  resolvedAt      DateTime?     @map("resolved_at")
  resolvedBy      Int?          @map("resolved_by")
  resolutionNotes String?       @map("resolution_notes") @db.Text

  factory  Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  resolver User?   @relation("AlertResolver", fields: [resolvedBy], references: [id])

  @@index([factoryId, createdAt], map: "idx_factory_alerts")
  @@index([status, severity, createdAt], map: "idx_alert_status_severity")
  @@map("alert_notifications")
}

// Phase 2 核心表 - 仪表板指标缓存
model DashboardMetric {
  id             String   @id @default(uuid())
  factoryId      String   @map("factory_id")
  metricType     String   @map("metric_type") @db.VarChar(100)
  metricDate     DateTime @map("metric_date") @db.Date
  metricData     Json     @map("metric_data")
  cacheExpiresAt DateTime @map("cache_expires_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  factory Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@unique([factoryId, metricType, metricDate], map: "unique_factory_metric_date")
  @@index([cacheExpiresAt], map: "idx_cache_expiry")
  @@index([factoryId, metricType, metricDate], map: "idx_factory_metrics")
  @@map("dashboard_metrics")
}

// 新增枚举类型
enum BatchStatus {
  planning
  in_progress
  quality_check
  completed
  failed

  @@map("batch_status")
}

enum QualityGrade {
  A
  B
  C
  failed

  @@map("quality_grade")
}

enum InspectionType {
  raw_material
  process
  final_product

  @@map("inspection_type")
}

enum InspectionResult {
  pass
  fail
  conditional_pass

  @@map("inspection_result")
}

enum MonitoringStatus {
  normal
  warning
  error
  maintenance

  @@map("monitoring_status")
}

enum AlertType {
  quality
  equipment
  production
  safety

  @@map("alert_type")
}

enum AlertSeverity {
  low
  medium
  high
  critical

  @@map("alert_severity")
}

enum AlertStatus {
  new
  acknowledged
  in_progress
  resolved
  closed

  @@map("alert_status")
}

// Phase 3 - 激活码管理系统
model ActivationCode {
  id         String             @id @default(uuid())
  code       String             @unique @map("code")
  type       ActivationCodeType @map("type")
  factoryId  String?            @map("factory_id")
  maxUses    Int                @default(1) @map("max_uses")
  usedCount  Int                @default(0) @map("used_count")
  status     ActivationStatus   @default(active) @map("status")
  validFrom  DateTime           @default(now()) @map("valid_from")
  validUntil DateTime?          @map("valid_until")
  createdBy  Int?               @map("created_by")
  metadata   Json?              @map("metadata")
  notes      String?            @map("notes") @db.Text
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  factory     Factory?           @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  creator     User?              @relation("ActivationCreator", fields: [createdBy], references: [id])
  activations ActivationRecord[]

  @@index([code], map: "idx_activation_code")
  @@index([status, type], map: "idx_activation_status_type")
  @@index([factoryId, status], map: "idx_factory_activation")
  @@map("activation_codes")
}

// 激活记录
model ActivationRecord {
  id               String   @id @default(uuid())
  activationCodeId String   @map("activation_code_id")
  deviceId         String   @map("device_id")
  userId           Int?     @map("user_id")
  deviceInfo       Json?    @map("device_info")
  ipAddress        String?  @map("ip_address") @db.VarChar(45)
  userAgent        String?  @map("user_agent") @db.Text
  activatedAt      DateTime @default(now()) @map("activated_at")
  status           String   @default("success") @map("status")

  activationCode ActivationCode @relation(fields: [activationCodeId], references: [id], onDelete: Cascade)
  user           User?          @relation("ActivationUser", fields: [userId], references: [id])

  @@index([activationCodeId], map: "idx_activation_record_code")
  @@index([deviceId], map: "idx_activation_device")
  @@index([activatedAt], map: "idx_activation_date")
  @@map("activation_records")
}

// 系统日志表
model SystemLog {
  id        String   @id @default(uuid())
  level     LogLevel @map("level")
  category  String   @map("category") @db.VarChar(100)
  message   String   @map("message") @db.Text
  details   Json?    @map("details")
  userId    Int?     @map("user_id")
  factoryId String?  @map("factory_id")
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  timestamp DateTime @default(now()) @map("timestamp")

  user    User?    @relation("SystemLogUser", fields: [userId], references: [id])
  factory Factory? @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@index([level, timestamp], map: "idx_log_level_time")
  @@index([category, timestamp], map: "idx_log_category_time")
  @@index([userId, timestamp], map: "idx_log_user_time")
  @@index([factoryId, timestamp], map: "idx_log_factory_time")
  @@map("system_logs")
}

// API访问日志表
model ApiAccessLog {
  id           String   @id @default(uuid())
  method       String   @map("method") @db.VarChar(10)
  path         String   @map("path") @db.VarChar(500)
  statusCode   Int      @map("status_code")
  responseTime Int      @map("response_time")
  userId       Int?     @map("user_id")
  factoryId    String?  @map("factory_id")
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  requestBody  Json?    @map("request_body")
  responseBody Json?    @map("response_body")
  timestamp    DateTime @default(now()) @map("timestamp")

  user    User?    @relation("ApiAccessUser", fields: [userId], references: [id])
  factory Factory? @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@index([method, path], map: "idx_api_method_path")
  @@index([statusCode, timestamp], map: "idx_api_status_time")
  @@index([userId, timestamp], map: "idx_api_user_time")
  @@index([factoryId, timestamp], map: "idx_api_factory_time")
  @@map("api_access_logs")
}

// 报表模板表
model ReportTemplate {
  id          String     @id @default(uuid())
  name        String     @map("name") @db.VarChar(200)
  type        ReportType @map("type")
  category    String     @map("category") @db.VarChar(100)
  template    Json       @map("template")
  parameters  Json?      @map("parameters")
  isSystem    Boolean    @default(false) @map("is_system")
  isActive    Boolean    @default(true) @map("is_active")
  createdBy   Int?       @map("created_by")
  factoryId   String?    @map("factory_id")
  description String?    @map("description") @db.Text
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  creator User?    @relation("ReportCreator", fields: [createdBy], references: [id])
  factory Factory? @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@index([type, category], map: "idx_report_type_category")
  @@index([factoryId, isActive], map: "idx_report_factory_active")
  @@map("report_templates")
}

// 新增枚举类型
enum ActivationCodeType {
  device
  user
  factory
  trial
  permanent

  @@map("activation_code_type")
}

enum ActivationStatus {
  active
  expired
  disabled
  exhausted

  @@map("activation_status")
}

enum LogLevel {
  debug
  info
  warn
  error
  fatal

  @@map("log_level")
}

enum ReportType {
  production
  quality
  equipment
  custom

  @@map("report_type")
}

// 员工打卡记录表
model EmployeeTimeClock {
  id           String      @id @default(uuid())
  userId       Int         @map("user_id")
  factoryId    String      @map("factory_id")
  clockType    ClockType   @map("clock_type")
  clockTime    DateTime    @map("clock_time")
  workTypeId   String?     @map("work_type_id")
  locationData Json?       @map("location_data")
  deviceInfo   Json?       @map("device_info")
  ipAddress    String?     @map("ip_address") @db.VarChar(45)
  status       ClockStatus @default(normal) @map("status")
  notes        String?     @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  factory  Factory   @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  workType WorkType? @relation(fields: [workTypeId], references: [id])

  @@index([userId, clockTime], map: "idx_user_clock")
  @@index([factoryId, clockTime], map: "idx_factory_clock")
  @@index([clockType, clockTime], map: "idx_clock_type_time")
  @@map("employee_time_clocks")
}

// 工作类型表
model WorkType {
  id          String      @id @default(uuid())
  factoryId   String      @map("factory_id")
  typeCode    String      @map("type_code")
  typeName    String      @map("type_name")
  department  Department? @map("department")
  description String?     @db.Text
  colorCode   String?     @map("color_code") @db.VarChar(7)
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")

  factory           Factory               @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  timeClocks        EmployeeTimeClock[]
  workSessions      EmployeeWorkSession[]
  batchWorkSessions BatchWorkSession[]    @relation("BatchWorkType")

  @@unique([factoryId, typeCode], map: "unique_factory_type")
  @@index([department, isActive], map: "idx_department_type")
  @@map("work_types")
}

// 员工工作时段表
model EmployeeWorkSession {
  id                String        @id @default(uuid())
  userId            Int           @map("user_id")
  factoryId         String        @map("factory_id")
  workTypeId        String        @map("work_type_id")
  sessionDate       DateTime      @map("session_date") @db.Date
  startTime         DateTime      @map("start_time")
  endTime           DateTime?     @map("end_time")
  breakDuration     Int           @default(0) @map("break_duration")
  totalMinutes      Int?          @map("total_minutes")
  productivityScore Decimal?      @map("productivity_score") @db.Decimal(3, 1)
  workRecordId      String?       @map("work_record_id")
  status            SessionStatus @default(active) @map("status")
  createdAt         DateTime      @default(now()) @map("created_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  factory  Factory  @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  workType WorkType @relation(fields: [workTypeId], references: [id])

  @@index([userId, sessionDate], map: "idx_user_session")
  @@index([workTypeId, sessionDate], map: "idx_work_type_session")
  @@index([factoryId, sessionDate], map: "idx_factory_session")
  @@map("employee_work_sessions")
}

// 打卡类型枚举
enum ClockType {
  clock_in
  clock_out
  break_start
  break_end

  @@map("clock_type")
}

// 打卡状态枚举
enum ClockStatus {
  normal
  late
  early
  invalid

  @@map("clock_status")
}

// 工作时段状态枚举
enum SessionStatus {
  active
  completed
  paused

  @@map("session_status")
}

// ==================== 成本核算系统新增表 ====================

// 批次员工工作时段表 - 记录批次级别的员工工作和成本
model BatchWorkSession {
  id                String    @id @default(uuid())
  batchId           String    @map("batch_id")
  userId            Int       @map("user_id")
  workTypeId        String?   @map("work_type_id")
  startTime         DateTime  @map("start_time")
  endTime           DateTime? @map("end_time")
  totalMinutes      Int?      @map("total_minutes")
  processedQuantity Decimal?  @map("processed_quantity") @db.Decimal(10, 2)
  ccrRate           Decimal   @map("ccr_rate") @db.Decimal(8, 4)
  laborCost         Decimal?  @map("labor_cost") @db.Decimal(10, 2)
  notes             String?   @db.Text
  createdAt         DateTime  @default(now()) @map("created_at")

  batch    ProcessingBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workType WorkType?       @relation("BatchWorkType", fields: [workTypeId], references: [id])

  @@index([batchId, userId], map: "idx_batch_user_work")
  @@index([userId, startTime], map: "idx_user_work_time")
  @@index([batchId, startTime], map: "idx_batch_work_time")
  @@map("batch_work_sessions")
}

// 批次设备使用记录表 - 记录批次级别的设备使用和成本
model BatchEquipmentUsage {
  id            String    @id @default(uuid())
  batchId       String    @map("batch_id")
  equipmentId   String    @map("equipment_id")
  startTime     DateTime  @map("start_time")
  endTime       DateTime? @map("end_time")
  usageDuration Int?      @map("usage_duration")
  equipmentCost Decimal?  @map("equipment_cost") @db.Decimal(10, 2)
  notes         String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")

  batch     ProcessingBatch  @relation(fields: [batchId], references: [id], onDelete: Cascade)
  equipment FactoryEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([batchId, equipmentId], map: "idx_batch_equipment")
  @@index([equipmentId, startTime], map: "idx_equipment_usage_time")
  @@index([batchId, startTime], map: "idx_batch_equipment_time")
  @@map("batch_equipment_usage")
}

// 设备维修记录表 - 记录设备维修历史和成本
model EquipmentMaintenance {
  id                String          @id @default(uuid())
  equipmentId       String          @map("equipment_id")
  maintenanceDate   DateTime        @map("maintenance_date")
  maintenanceType   MaintenanceType @map("maintenance_type")
  cost              Decimal         @map("cost") @db.Decimal(10, 2)
  description       String?         @db.Text
  performedBy       Int?            @map("performed_by")
  durationMinutes   Int?            @map("duration_minutes")
  partsReplaced     Json?           @map("parts_replaced")
  nextScheduledDate DateTime?       @map("next_scheduled_date")
  createdAt         DateTime        @default(now()) @map("created_at")

  equipment FactoryEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId, maintenanceDate], map: "idx_equipment_maintenance")
  @@index([maintenanceType, maintenanceDate], map: "idx_maintenance_type_date")
  @@map("equipment_maintenance_records")
}

// 新增枚举 - 产品类别（新鲜/冻货）
enum ProductCategory {
  fresh
  frozen

  @@map("product_category")
}

// 新增枚举 - 维修类型
enum MaintenanceType {
  routine
  repair
  emergency
  upgrade

  @@map("maintenance_type")
}

// 原料类型管理表
model RawMaterialType {
  id          String   @id @default(uuid())
  factoryId   String   @map("factory_id")
  name        String   // 原料名称：鲈鱼、带鱼等
  category    String?  // 分类：鱼类、虾蟹类、贝类等
  unit        String   @default("kg") // 计量单位
  description String?  @db.Text // 描述
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   Int?     @map("created_by") // 允许为空

  factory          Factory                     @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  creator          User?                       @relation("MaterialTypeCreator", fields: [createdBy], references: [id])
  conversionRates  MaterialProductConversion[]
  materialBatches  MaterialBatch[]             // 原材料批次关联

  @@unique([factoryId, name]) // 同一工厂内原料名称唯一
  @@index([factoryId])
  @@index([category])
  @@map("raw_material_types")
}

// ==================== 生产计划管理系统表 ====================

// 产品类型表
model ProductType {
  id              String   @id @default(uuid())
  factoryId       String   @map("factory_id")
  name            String   // 产品名称：鱼片、鱼头、鱼骨等
  code            String   // 产品代码：用于批次编号
  category        String?  // 分类：主产品、副产品等
  description     String?  @db.Text
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       Int?     @map("created_by")

  factory         Factory                     @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  creator         User?                       @relation("ProductTypeCreator", fields: [createdBy], references: [id])
  conversionRates MaterialProductConversion[]
  productionPlans ProductionPlan[]

  @@unique([factoryId, name])
  @@unique([factoryId, code])
  @@index([factoryId, isActive])
  @@map("product_types")
}

// 原料-产品转换率表
model MaterialProductConversion {
  id              String   @id @default(uuid())
  factoryId       String   @map("factory_id")
  materialTypeId  String   @map("material_type_id")
  productTypeId   String   @map("product_type_id")
  conversionRate  Decimal  @map("conversion_rate") @db.Decimal(5, 2) // 转换率（百分比）
  wastageRate     Decimal? @map("wastage_rate") @db.Decimal(5, 2)    // 损耗率
  notes           String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       Int?     @map("created_by")

  factory         Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  materialType    RawMaterialType @relation(fields: [materialTypeId], references: [id])
  productType     ProductType     @relation(fields: [productTypeId], references: [id])
  creator         User?           @relation("ConversionRateCreator", fields: [createdBy], references: [id])

  @@unique([materialTypeId, productTypeId])
  @@index([factoryId])
  @@map("material_product_conversions")
}

// 商家表 (保留用于兼容)
model Merchant {
  id              String   @id @default(uuid())
  factoryId       String   @map("factory_id")
  name            String   // 商家名称
  code            String   // 商家代码
  contactPerson   String?  @map("contact_person")
  contactPhone    String?  @map("contact_phone")
  address         String?  @db.Text
  businessType    String?  @map("business_type")
  creditLevel     String?  @map("credit_level")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       Int?     @map("created_by")

  factory         Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  creator         User?            @relation("MerchantCreator", fields: [createdBy], references: [id])

  @@unique([factoryId, code])
  @@index([factoryId, isActive])
  @@map("merchants")
}

// 供应商表 (提供原材料)
model Supplier {
  id              String   @id @default(uuid())
  factoryId       String   @map("factory_id")
  name            String   // 供应商名称：陈老板海鲜批发
  code            String   // 供应商代码：SUP001
  contactPerson   String?  @map("contact_person")  // 联系人
  contactPhone    String?  @map("contact_phone")   // 联系电话
  address         String?  @db.Text                // 地址
  businessType    String?  @map("business_type")   // 经营类型：水产批发、养殖场等
  creditLevel     String?  @map("credit_level")    // 信用等级：A/B/C
  deliveryArea    String?  @map("delivery_area")   // 配送区域
  paymentTerms    String?  @map("payment_terms")   // 付款条款
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       Int?     @map("created_by")

  factory         Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  creator         User?           @relation("SupplierCreator", fields: [createdBy], references: [id])
  materialBatches MaterialBatch[] // 提供的原材料批次

  @@unique([factoryId, code])
  @@index([factoryId, isActive])
  @@map("suppliers")
}

// 客户表 (购买成品)
model Customer {
  id              String   @id @default(uuid())
  factoryId       String   @map("factory_id")
  name            String   // 客户名称：王老板超市
  code            String   // 客户代码：CUS001
  contactPerson   String?  @map("contact_person")  // 联系人
  contactPhone    String?  @map("contact_phone")   // 联系电话
  address         String?  @db.Text                // 地址
  businessType    String?  @map("business_type")   // 经营类型：超市、餐饮、批发等
  creditLevel     String?  @map("credit_level")    // 信用等级：A/B/C
  deliveryArea    String?  @map("delivery_area")   // 配送区域
  paymentTerms    String?  @map("payment_terms")   // 付款条款
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       Int?     @map("created_by")

  factory         Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  creator         User?            @relation("CustomerCreator", fields: [createdBy], references: [id])
  productionPlans ProductionPlan[] // 客户订单（生产计划）
  shipmentRecords ShipmentRecord[] // 出货记录

  @@unique([factoryId, code])
  @@index([factoryId, isActive])
  @@map("customers")
}

// 生产计划表
model ProductionPlan {
  id                      String      @id @default(uuid())
  planNumber              String      @unique @map("plan_number")
  factoryId               String      @map("factory_id")
  productTypeId           String      @map("product_type_id")
  customerId              String      @map("customer_id")  // 改为客户ID
  plannedQuantity         Decimal     @map("planned_quantity") @db.Decimal(10, 2)
  estimatedMaterialUsage  Decimal     @map("estimated_material_usage") @db.Decimal(10, 2)
  actualMaterialUsed      Decimal?    @map("actual_material_used") @db.Decimal(10, 2)
  actualQuantity          Decimal?    @map("actual_quantity") @db.Decimal(10, 2)
  status                  PlanStatus  @default(pending) @map("status")
  notes                   String?     @db.Text
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")
  createdBy               Int         @map("created_by")

  factory              Factory               @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  productType          ProductType           @relation(fields: [productTypeId], references: [id])
  customer             Customer              @relation(fields: [customerId], references: [id])  // 关联到客户
  creator              User                  @relation("ProductionPlanCreator", fields: [createdBy], references: [id])
  materialConsumptions MaterialConsumption[]
  shipmentRecords      ShipmentRecord[]
  batchUsages          ProductionPlanBatchUsage[]  // 批次使用关联
  dailyRecords         DailyProductionRecord[]     // 每日记录关联

  @@index([factoryId, status])
  @@index([createdAt])
  @@index([customerId])  // 添加客户索引
  @@map("production_plans")
}

// 原料消耗记录表
model MaterialConsumption {
  id               String   @id @default(uuid())
  planId           String   @map("plan_id")
  batchId          String   @map("batch_id")
  consumedQuantity Decimal  @map("consumed_quantity") @db.Decimal(10, 2)
  consumedAt       DateTime @default(now()) @map("consumed_at")
  notes            String?  @db.Text
  recordedBy       Int      @map("recorded_by")

  plan             ProductionPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  batch            ProcessingBatch @relation(fields: [batchId], references: [id])
  recorder         User            @relation("MaterialConsumptionRecorder", fields: [recordedBy], references: [id])

  @@index([planId])
  @@index([batchId])
  @@index([consumedAt])
  @@map("material_consumptions")
}

// 成品出库记录表
model ShipmentRecord {
  id              String        @id @default(uuid())
  shipmentNumber  String        @unique @map("shipment_number")
  planId          String        @map("plan_id")
  customerId      String        @map("customer_id")  // 改为客户ID
  shippedQuantity Decimal       @map("shipped_quantity") @db.Decimal(10, 2)
  actualWeight    Decimal       @map("actual_weight") @db.Decimal(10, 2)
  qualityGrade    QualityGrade? @map("quality_grade")
  shippedAt       DateTime      @map("shipped_at")
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")
  recordedBy      Int           @map("recorded_by")

  plan            ProductionPlan @relation(fields: [planId], references: [id])
  customer        Customer       @relation(fields: [customerId], references: [id])  // 关联到客户
  recorder        User           @relation("ShipmentRecorder", fields: [recordedBy], references: [id])

  @@index([planId])
  @@index([customerId])  // 改为客户索引
  @@index([shippedAt])
  @@map("shipment_records")
}

// 生产计划状态枚举
enum PlanStatus {
  pending       // 待生产
  in_progress   // 生产中
  completed     // 已完成
  shipped       // 已出货
  cancelled     // 已取消

  @@map("plan_status")
}

// ==================== 批次管理系统新增表 ====================

// 原材料批次表
model MaterialBatch {
  id                String   @id @default(uuid())
  batchNumber       String   @unique @map("batch_number")  // 批次号: MAT-20251001-001
  factoryId         String   @map("factory_id")
  materialTypeId    String   @map("material_type_id")

  // 数量信息
  inboundQuantity   Decimal  @map("inbound_quantity") @db.Decimal(10, 2)   // 入库数量
  remainingQuantity Decimal  @map("remaining_quantity") @db.Decimal(10, 2)  // 剩余数量
  reservedQuantity  Decimal  @default(0) @map("reserved_quantity") @db.Decimal(10, 2)  // 已预留
  usedQuantity      Decimal  @default(0) @map("used_quantity") @db.Decimal(10, 2)  // 已使用

  // 成本信息
  unitPrice         Decimal  @map("unit_price") @db.Decimal(10, 2)  // 单价
  totalCost         Decimal  @map("total_cost") @db.Decimal(12, 2)  // 总成本

  // 供应商信息
  supplierId        String   @map("supplier_id")  // 供应商ID（必填）

  // 日期信息
  inboundDate       DateTime @map("inbound_date") @db.Date     // 入库日期
  expiryDate        DateTime? @map("expiry_date") @db.Date     // 保质期
  productionDate    DateTime? @map("production_date") @db.Date // 生产日期

  // 状态
  status            BatchInventoryStatus @default(available) @map("status")

  // 质量信息
  qualityGrade      String?  @map("quality_grade")        // 质量等级: A/B/C
  qualityReport     Json?    @map("quality_report")       // 质检报告
  storageLocation   String?  @map("storage_location")     // 存储位置

  // 其他信息
  notes             String?  @db.Text
  createdBy         Int      @map("created_by")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // 关联关系
  factory           Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  materialType      RawMaterialType @relation(fields: [materialTypeId], references: [id])
  supplier          Supplier        @relation(fields: [supplierId], references: [id])  // 关联到供应商
  creator           User            @relation("MaterialBatchCreator", fields: [createdBy], references: [id])

  // 使用记录
  planUsages        ProductionPlanBatchUsage[]
  adjustments       MaterialBatchAdjustment[]

  @@index([factoryId, materialTypeId, status])
  @@index([inboundDate])
  @@index([expiryDate])
  @@index([supplierId])  // 改为供应商索引
  @@index([status, expiryDate])
  @@map("material_batches")
}

// 批次库存状态枚举
enum BatchInventoryStatus {
  available  // 可用
  reserved   // 已预留
  depleted   // 已用完
  expired    // 已过期

  @@map("batch_inventory_status")
}

// 生产计划-批次使用关联表
model ProductionPlanBatchUsage {
  id                String   @id @default(uuid())
  productionPlanId  String   @map("production_plan_id")
  materialBatchId   String   @map("material_batch_id")
  plannedQuantity   Decimal  @map("planned_quantity") @db.Decimal(10, 2)  // 计划使用
  actualQuantity    Decimal? @map("actual_quantity") @db.Decimal(10, 2)   // 实际使用
  unitPrice         Decimal  @map("unit_price") @db.Decimal(10, 2)        // 锁定单价
  totalCost         Decimal  @map("total_cost") @db.Decimal(12, 2)        // 锁定成本
  createdAt         DateTime @default(now()) @map("created_at")

  productionPlan ProductionPlan @relation(fields: [productionPlanId], references: [id], onDelete: Cascade)
  materialBatch  MaterialBatch  @relation(fields: [materialBatchId], references: [id])

  @@unique([productionPlanId, materialBatchId])
  @@index([productionPlanId])
  @@index([materialBatchId])
  @@map("production_plan_batch_usages")
}

// 批次库存调整记录表
model MaterialBatchAdjustment {
  id              String   @id @default(uuid())
  materialBatchId String   @map("material_batch_id")
  adjustmentType  String   @map("adjustment_type")  // loss / damage / correction
  quantity        Decimal  @db.Decimal(10, 2)       // 调整数量（+ 或 -）
  reason          String   @db.Text                 // 调整原因
  adjustedBy      Int      @map("adjusted_by")
  adjustedAt      DateTime @default(now()) @map("adjusted_at")

  materialBatch MaterialBatch @relation(fields: [materialBatchId], references: [id], onDelete: Cascade)
  adjuster      User          @relation("BatchAdjuster", fields: [adjustedBy], references: [id])

  @@index([materialBatchId])
  @@index([adjustedAt])
  @@map("material_batch_adjustments")
}

// 每日生产记录表
model DailyProductionRecord {
  id                String   @id @default(uuid())
  productionPlanId  String   @map("production_plan_id")
  productionDate    DateTime @db.Date
  dailyQuantity     Decimal  @map("daily_quantity") @db.Decimal(10, 2)  // 当日产量
  workHours         Decimal? @map("work_hours") @db.Decimal(4, 2)       // 工作时长
  workersCount      Int?     @map("workers_count")                      // 工人数量
  userId            Int      @map("user_id")                            // 记录员工
  issues            Json?    @map("issues")                             // 流程问题
  notes             String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")

  productionPlan ProductionPlan @relation(fields: [productionPlanId], references: [id], onDelete: Cascade)
  user           User           @relation("DailyRecorder", fields: [userId], references: [id])

  @@index([productionPlanId, productionDate])
  @@index([userId, productionDate])
  @@index([productionDate])
  @@map("daily_production_records")
}

// AI使用日志表
model AIUsageLog {
  id              Int      @id @default(autoincrement())
  factoryId       String   @map("factory_id")
  userId          Int      @map("user_id")
  batchId         String?  @map("batch_id")
  requestType     String   @map("request_type")  // 'analysis', 'question'
  question        String?  @db.Text
  responseLength  Int?     @map("response_length")
  sessionId       String?  @map("session_id")
  weekNumber      Int      @map("week_number")  // ISO周数(1-53)
  year            Int                            // 年份(避免跨年问题)
  createdAt       DateTime @default(now()) @map("created_at")

  factory  Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([factoryId, year, weekNumber], map: "idx_factory_week")
  @@index([createdAt], map: "idx_created_at")
  @@map("ai_usage_logs")
}

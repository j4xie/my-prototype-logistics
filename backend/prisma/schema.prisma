generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 工厂表 - 多租户架构的核心
model Factory {
  id               String   @id @map("id") // 工厂ID (新格式: '144-GD-2025-001' 或老格式: 'FCT_2024_001')
  name             String   @map("name") // 工厂名称
  industry         String?  @map("industry") // 所属行业描述
  address          String?  @map("address") @db.Text // 工厂地址
  employeeCount    Int?     @map("employee_count") // 员工数量
  subscriptionPlan String?  @map("subscription_plan") @db.VarChar(50) // 订阅套餐
  contactName      String?  @map("contact_name") @db.VarChar(100) // 负责人姓名
  contactPhone     String?  @map("contact_phone") @db.VarChar(50) // 联系电话
  contactEmail     String?  @map("contact_email") // 联系邮箱
  isActive         Boolean  @default(true) @map("is_active") // 工厂账户是否激活
  
  // 新增字段 - 科学化编码支持
  industryCode     String?  @map("industry_code") @db.VarChar(3) // 行业代码 (如: 144)
  regionCode       String?  @map("region_code") @db.VarChar(2) // 地区代码 (如: GD)
  factoryYear      Int?     @map("factory_year") // 建厂年份 (如: 2025)
  sequenceNumber   Int?     @map("sequence_number") // 同类型序号 (如: 1)
  legacyId         String?  @map("legacy_id") @db.VarChar(50) // 老格式ID (如: FCT_2024_001)
  
  // 推断元数据
  inferenceData    Json?    @map("inference_data") // 推断过程数据
  confidence       Float?   @map("confidence") // 推断置信度
  manuallyVerified Boolean  @default(false) @map("manually_verified") // 是否人工验证
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // 关联关系
  users        User[]
  whitelist    UserWhitelist[]
  sessions     Session[]
  roleHistory  UserRoleHistory[]
  settings     FactorySettings?

  // 索引优化
  @@index([industryCode, regionCode, factoryYear], name: "idx_factory_code")
  @@index([legacyId], name: "idx_legacy_id")
  @@index([industryCode], name: "idx_industry")
  @@index([regionCode], name: "idx_region")
  @@index([factoryYear], name: "idx_year")
  @@map("factories")
}

// 平台管理员表 - 独立于工厂的平台级管理
model PlatformAdmin {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash")
  email        String   @unique
  phone        String?  @db.VarChar(50)
  fullName     String?  @map("full_name") @db.VarChar(100)
  role         PlatformRole @default(platform_operator) @map("role")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([role], name: "idx_platform_role")
  @@map("platform_admins")
}

// 用户白名单表 - 支持白名单前置注册
model UserWhitelist {
  id          Int      @id @default(autoincrement())
  factoryId   String   @map("factory_id") @db.VarChar(20)
  phoneNumber String   @map("phone_number") @db.VarChar(50)
  status      WhitelistStatus @default(PENDING) @map("status") // 状态: PENDING, REGISTERED, EXPIRED
  addedByUserId Int?   @map("added_by_user_id") // 添加该白名单的管理员ID
  invitedBy   Int?     @map("invited_by") // 邀请人ID
  expiresAt   DateTime? @map("expires_at") // 白名单过期时间
  metadata    Json?    @map("metadata") // 附加元数据（姓名、部门等）
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  factory     Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  addedByUser User?   @relation(fields: [addedByUserId], references: [id])

  @@unique([factoryId, phoneNumber]) // 确保同一工厂内手机号唯一
  @@index([status, factoryId], name: "idx_status_factory")
  @@index([expiresAt], name: "idx_expires_at")
  @@map("user_whitelist")
}

// 统一用户表 - 支持多租户的用户管理
model User {
  id           Int      @id @default(autoincrement())
  factoryId    String   @map("factory_id") @db.VarChar(20) // 所属工厂
  username     String   @db.VarChar(100)
  passwordHash String   @map("password_hash")
  email        String
  phone        String?  @db.VarChar(50)
  fullName     String?  @map("full_name") @db.VarChar(100)
  isActive     Boolean  @default(false) @map("is_active") // 新用户默认未激活
  roleCode     FactoryUserRole @default(unactivated) @map("role_code") // 角色代码
  department   Department? @map("department") // 所属部门
  position     String?  @map("position") @db.VarChar(100) // 职位
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关联关系
  factory           Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  sessions          Session[]
  addedWhitelist    UserWhitelist[] // 该用户添加的白名单记录
  roleHistory       UserRoleHistory[] // 角色变更历史

  @@unique([factoryId, username]) // 同一工厂内用户名唯一
  @@unique([factoryId, email])    // 同一工厂内邮箱唯一
  @@index([roleCode, department], name: "idx_role_department")
  @@index([factoryId, roleCode], name: "idx_factory_role")
  @@index([isActive, factoryId], name: "idx_active_users")
  @@map("users")
}

// 会话表 - 支持JWT令牌管理
model Session {
  id           String   @id @default(uuid())
  userId       Int      @map("user_id")
  factoryId    String   @map("factory_id") @db.VarChar(20) // 工厂ID，用于数据隔离
  token        String   @db.Text
  refreshToken String   @map("refresh_token") @db.Text
  expiresAt    DateTime @map("expires_at")
  isRevoked    Boolean  @default(false) @map("is_revoked") // 是否已撤销
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关联关系
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  factory Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  // 唯一约束（使用前255个字符）
  @@unique([token(length: 255)], name: "unique_token")
  @@unique([refreshToken(length: 255)], name: "unique_refresh_token")
  @@map("sessions")
}

// 临时验证令牌表 - 用于手机验证等临时操作
model TempToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique @db.VarChar(255)
  type        TempTokenType @map("type") // 令牌类型
  factoryId   String   @map("factory_id") @db.VarChar(20)
  phoneNumber String?  @map("phone_number") @db.VarChar(50)
  data        Json?    @map("data") // 附加数据
  expiresAt   DateTime @map("expires_at")
  isUsed      Boolean  @default(false) @map("is_used")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([type, factoryId], name: "idx_type_factory")
  @@index([expiresAt, isUsed], name: "idx_expires_used")
  @@map("temp_tokens")
}

// 用户角色变更历史表
model UserRoleHistory {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  factoryId     String   @map("factory_id") @db.VarChar(20)
  oldRoleCode   FactoryUserRole? @map("old_role_code")
  newRoleCode   FactoryUserRole @map("new_role_code")
  oldDepartment Department? @map("old_department")
  newDepartment Department? @map("new_department")
  changedBy     Int      @map("changed_by")
  changedByType String   @map("changed_by_type") @db.VarChar(20)
  reason        String?  @map("reason") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  // 关联关系
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  factory Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_user")
  @@index([factoryId], name: "idx_factory")
  @@index([changedBy], name: "idx_changed_by")
  @@index([createdAt], name: "idx_created_at")
  @@map("user_role_history")
}

// 权限审计日志表
model PermissionAuditLog {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime @default(now()) @map("timestamp")
  actorType        String   @map("actor_type") @db.VarChar(20)
  actorId          Int      @map("actor_id")
  username         String   @map("username") @db.VarChar(100)
  action           String   @map("action") @db.VarChar(100)
  resource         String?  @map("resource") @db.VarChar(200)
  targetUserId     Int?     @map("target_user_id")
  targetResourceId String?  @map("target_resource_id") @db.VarChar(100)
  ipAddress        String?  @map("ip_address") @db.VarChar(45)
  userAgent        String?  @map("user_agent") @db.Text
  factoryId        String?  @map("factory_id") @db.VarChar(20)
  department       String?  @map("department") @db.VarChar(50)
  result           String   @default("success") @map("result") @db.VarChar(20)
  errorMessage     String?  @map("error_message") @db.Text
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([actorType, actorId], name: "idx_actor")
  @@index([timestamp], name: "idx_timestamp")
  @@index([factoryId], name: "idx_factory")
  @@index([action], name: "idx_action")
  @@index([result], name: "idx_result")
  @@map("permission_audit_logs")
}

// 数据访问日志表
model DataAccessLog {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now()) @map("timestamp")
  userId     Int      @map("user_id")
  userType   String   @map("user_type") @db.VarChar(20)
  factoryId  String?  @map("factory_id") @db.VarChar(20)
  department String?  @map("department") @db.VarChar(50)
  dataType   String   @map("data_type") @db.VarChar(100)
  resourceId String?  @map("resource_id") @db.VarChar(100)
  operation  String   @map("operation") @db.VarChar(20)
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId, userType], name: "idx_user")
  @@index([timestamp], name: "idx_timestamp")
  @@index([factoryId], name: "idx_factory")
  @@index([dataType], name: "idx_data_type")
  @@index([operation], name: "idx_operation")
  @@map("data_access_logs")
}

// 工厂设置表
model FactorySettings {
  id                     Int      @id @default(autoincrement())
  factoryId              String   @unique @map("factory_id") @db.VarChar(20)
  allowSelfRegistration  Boolean  @default(false) @map("allow_self_registration")
  requireAdminApproval   Boolean  @default(true) @map("require_admin_approval")
  defaultUserRole        FactoryUserRole @default(viewer) @map("default_user_role")
  sessionTimeoutMinutes  Int      @default(1440) @map("session_timeout_minutes")
  maxFailedLoginAttempts Int      @default(5) @map("max_failed_login_attempts")
  passwordPolicy         Json?    @map("password_policy")
  departmentSettings     Json?    @map("department_settings")
  customPermissions      Json?    @map("custom_permissions")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // 关联关系
  factory Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@map("factory_settings")
}

// 枚举定义
enum WhitelistStatus {
  PENDING    // 待注册
  REGISTERED // 已注册
  EXPIRED    // 已过期

  @@map("whitelist_status")
}

enum TempTokenType {
  PHONE_VERIFICATION // 手机验证
  PASSWORD_RESET     // 密码重置

  @@map("temp_token_type")
}

enum PlatformRole {
  platform_super_admin // 平台超级管理员
  platform_operator    // 平台操作员

  @@map("platform_role")
}

enum FactoryUserRole {
  factory_super_admin // 工厂超级管理员
  permission_admin    // 权限管理员
  department_admin    // 部门管理员
  operator           // 操作员
  viewer            // 查看者
  unactivated       // 未激活

  @@map("factory_user_role")
}

enum Department {
  farming    // 养殖部门
  processing // 加工部门
  logistics  // 物流部门
  quality    // 质检部门
  management // 管理部门

  @@map("department")
}

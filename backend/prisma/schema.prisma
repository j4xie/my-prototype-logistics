generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Factory {
  id               String            @id @map("id")
  name             String            @map("name")
  industry         String?           @map("industry")
  address          String?           @map("address")
  employeeCount    Int?              @map("employee_count")
  subscriptionPlan String?           @map("subscription_plan")
  contactName      String?           @map("contact_name")
  contactPhone     String?           @map("contact_phone")
  contactEmail     String?           @map("contact_email")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  confidence       Float?            @map("confidence")
  factoryYear      Int?              @map("factory_year")
  industryCode     String?           @map("industry_code")
  inferenceData    Json?             @map("inference_data")
  legacyId         String?           @map("legacy_id")
  manuallyVerified Boolean           @default(false) @map("manually_verified")
  regionCode       String?           @map("region_code")
  sequenceNumber   Int?              @map("sequence_number")
  settings         FactorySettings?
  sessions         Session[]
  roleHistory      UserRoleHistory[]
  whitelist        UserWhitelist[]
  users            User[]

  @@index([industryCode, regionCode, factoryYear], map: "idx_factory_code")
  @@index([legacyId], map: "idx_legacy_id")
  @@index([industryCode], map: "idx_industry")
  @@index([regionCode], map: "idx_region")
  @@index([factoryYear], map: "idx_year")
  @@map("factories")
}

model PlatformAdmin {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  passwordHash   String          @map("password_hash")
  email          String          @unique
  phone          String?
  fullName       String?         @map("full_name")
  role           PlatformRole    @default(platform_operator) @map("role")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  addedWhitelist UserWhitelist[]

  @@index([role], map: "idx_platform_role")
  @@map("platform_admins")
}

model UserWhitelist {
  id                Int             @id @default(autoincrement())
  factoryId         String          @map("factory_id")
  phoneNumber       String          @map("phone_number")
  status            WhitelistStatus @default(PENDING) @map("status")
  addedByUserId     Int?            @map("added_by_user_id")
  expiresAt         DateTime        @map("expires_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  addedByPlatformId Int?            @map("added_by_platform_id")
  addedByPlatform   PlatformAdmin?  @relation(fields: [addedByPlatformId], references: [id])
  addedByUser       User?           @relation(fields: [addedByUserId], references: [id])
  factory           Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@unique([factoryId, phoneNumber])
  @@index([status, factoryId], map: "idx_status_factory")
  @@index([expiresAt], map: "idx_expires_at")
  @@index([addedByPlatformId], map: "user_whitelist_added_by_platform_id_fkey")
  @@index([addedByUserId], map: "user_whitelist_added_by_user_id_fkey")
  @@map("user_whitelist")
}

model User {
  id             Int               @id @default(autoincrement())
  factoryId      String            @map("factory_id")
  username       String
  passwordHash   String            @map("password_hash")
  email          String
  phone          String?
  fullName       String?           @map("full_name")
  isActive       Boolean           @default(false) @map("is_active")
  roleCode       FactoryUserRole   @default(unactivated) @map("role_code")
  department     Department?       @map("department")
  position       String?           @map("position")
  lastLogin      DateTime?         @map("last_login")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  sessions       Session[]
  roleHistory    UserRoleHistory[]
  addedWhitelist UserWhitelist[]
  factory        Factory           @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@unique([factoryId, username])
  @@unique([factoryId, email])
  @@index([roleCode, department], map: "idx_role_department")
  @@index([factoryId, roleCode], map: "idx_factory_role")
  @@index([isActive, factoryId], map: "idx_active_users")
  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       Int      @map("user_id")
  factoryId    String   @map("factory_id")
  token        String   @unique
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  isRevoked    Boolean  @default(false) @map("is_revoked")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  factory      Factory  @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([factoryId], map: "sessions_factory_id_fkey")
  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model TempToken {
  id          Int           @id @default(autoincrement())
  token       String        @unique
  type        TempTokenType @map("type")
  factoryId   String        @map("factory_id")
  phoneNumber String?       @map("phone_number")
  data        Json?         @map("data")
  expiresAt   DateTime      @map("expires_at")
  isUsed      Boolean       @default(false) @map("is_used")
  createdAt   DateTime      @default(now()) @map("created_at")

  @@index([type, factoryId], map: "idx_type_factory")
  @@index([expiresAt, isUsed], map: "idx_expires_used")
  @@map("temp_tokens")
}

model UserRoleHistory {
  id            Int              @id @default(autoincrement())
  userId        Int              @map("user_id")
  factoryId     String           @map("factory_id")
  oldRoleCode   FactoryUserRole? @map("old_role_code")
  newRoleCode   FactoryUserRole  @map("new_role_code")
  oldDepartment Department?      @map("old_department")
  newDepartment Department?      @map("new_department")
  changedBy     Int              @map("changed_by")
  changedByType String           @map("changed_by_type")
  reason        String?          @map("reason")
  createdAt     DateTime         @default(now()) @map("created_at")
  factory       Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_role_history_user")
  @@index([factoryId], map: "idx_role_history_factory")
  @@index([changedBy], map: "idx_changed_by")
  @@index([createdAt], map: "idx_created_at")
  @@map("user_role_history")
}

model PermissionAuditLog {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime @default(now()) @map("timestamp")
  actorType        String   @map("actor_type")
  actorId          Int      @map("actor_id")
  username         String   @map("username")
  action           String   @map("action")
  resource         String?  @map("resource")
  targetUserId     Int?     @map("target_user_id")
  targetResourceId String?  @map("target_resource_id")
  ipAddress        String?  @map("ip_address")
  userAgent        String?  @map("user_agent")
  factoryId        String?  @map("factory_id")
  department       String?  @map("department")
  result           String   @default("success") @map("result")
  errorMessage     String?  @map("error_message")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([actorType, actorId], map: "idx_admin_actor")
  @@index([timestamp], map: "idx_admin_timestamp")
  @@index([factoryId], map: "idx_admin_factory")
  @@index([action], map: "idx_admin_action")
  @@index([result], map: "idx_admin_result")
  @@map("permission_audit_logs")
}

model DataAccessLog {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now()) @map("timestamp")
  userId     Int      @map("user_id")
  userType   String   @map("user_type")
  factoryId  String?  @map("factory_id")
  department String?  @map("department")
  dataType   String   @map("data_type")
  resourceId String?  @map("resource_id")
  operation  String   @map("operation")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId, userType], map: "idx_data_user")
  @@index([timestamp], map: "idx_data_timestamp")
  @@index([factoryId], map: "idx_data_factory")
  @@index([dataType], map: "idx_data_type")
  @@index([operation], map: "idx_data_operation")
  @@map("data_access_logs")
}

model FactorySettings {
  id                     Int             @id @default(autoincrement())
  factoryId              String          @unique @map("factory_id")
  allowSelfRegistration  Boolean         @default(false) @map("allow_self_registration")
  requireAdminApproval   Boolean         @default(true) @map("require_admin_approval")
  defaultUserRole        FactoryUserRole @default(viewer) @map("default_user_role")
  sessionTimeoutMinutes  Int             @default(1440) @map("session_timeout_minutes")
  maxFailedLoginAttempts Int             @default(5) @map("max_failed_login_attempts")
  passwordPolicy         Json?           @map("password_policy")
  departmentSettings     Json?           @map("department_settings")
  customPermissions      Json?           @map("custom_permissions")
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  factory                Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)

  @@map("factory_settings")
}

enum WhitelistStatus {
  PENDING
  REGISTERED
  EXPIRED

  @@map("whitelist_status")
}

enum TempTokenType {
  PHONE_VERIFICATION
  PASSWORD_RESET

  @@map("temp_token_type")
}

enum PlatformRole {
  platform_super_admin
  platform_operator
  system_developer

  @@map("platform_role")
}

enum FactoryUserRole {
  factory_super_admin
  permission_admin
  department_admin
  operator
  viewer
  unactivated

  @@map("factory_user_role")
}

enum Department {
  farming
  processing
  logistics
  quality
  management

  @@map("department")
}

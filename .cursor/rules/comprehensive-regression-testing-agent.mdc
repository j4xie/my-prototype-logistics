---
description: 
globs: 
alwaysApply: false
---
# Comprehensive回归测试规则

## 🚨 **规则制定背景**
基于TASK-P3-016A回归测试发现的严重问题制定：
- **Mock机制脆弱**: 局部测试通过但综合验证失败
- **状态评估过度乐观**: 基于部分成功声称整体突破
- **验证流程不完整**: 缺乏强制性5层验证标准
- **系统性问题被掩盖**: 单一模块成功无法保证系统整体稳定

## 使用场景
- 任何声称任务"完成"或"突破性进展"之前
- 修复关键组件后的验证
- Phase级别里程碑验证
- 用户质疑项目状态时
- 发布前的最终验证

## 🚨 **强制性5层验证标准**

### 第1层: TypeScript编译验证 ✅ **必须100%通过**
```bash
# 强制执行，0容忍编译错误
npx tsc --noEmit
# 成功标准: 0个编译错误
```

### 第2层: 构建系统验证 ✅ **必须100%通过**
```bash
# 生产构建验证
npm run build
# 成功标准: 构建成功，无致命错误
```

### 第3层: 代码质量验证 ✅ **允许<10个警告**
```bash
# ESLint代码质量检查
npm run lint
# 成功标准: 0个错误，<10个警告
```

### 第4层: 测试套件验证 ❌ **关键验证层**
```bash
# 全面测试套件验证
npm test -- --maxWorkers=1 --bail=3
# 成功标准: 测试通过率 ≥95%
# 🚨 Mock机制验证: 依赖注入稳定性检查
# 🎯 针对前端UI任务: 强制要求高覆盖率的单元/组件测试 (如Jest+React Testing Library) 
# 和关键用户流程的集成测试，所有测试应运行在稳定且可配置的Mock API环境下
```

### 第5层: 集成功能验证 ❌ **端到端验证**
```bash
# 开发服务器响应验证
npm run dev & 
curl http://localhost:3000
# 成功标准: 服务器响应正常，核心功能可访问
# 🎯 针对前端UI任务: 手动或自动化端到端测试验证用户流程
# 明确当前测试轮次所使用的Mock API配置策略（全Mock、部分真实API+部分Mock）
```

## 🔍 **Mock机制加固规则**

### Mock注入稳定性检查
- **问题**: 测试环境与生产环境不一致
- **解决**: 强制验证Mock在所有测试场景中的稳定性
- **检查点**: offlineQueue初始化、依赖注入、服务状态

### **Mock API最佳实践与标准化** 🆕 **针对前端瓶颈优化**

#### **1. 推荐Mock工具与核心策略**
- **工具推荐**: 强烈建议采用 `msw` (Mock Service Worker) 等网络层拦截工具，实现对前端代码无侵入、环境共享（开发、测试、Node.js）的Mock服务
- **核心策略**: Mock应尽可能模拟真实API行为，包括成功响应、常见业务错误、网络异常等
- **稳定性要求**: Mock服务必须在开发和测试环境中表现一致，避免环境差异导致的测试不可靠

#### **2. 标准化Mock数据管理**
- **集中管理**: Mock数据（请求体、响应体、不同状态码）应集中存储，使用 `.json` 文件、TypeScript模块 (`*.mock.ts`) 等形式
- **版本控制**: Mock数据纳入版本控制，与代码一同演进
- **易于维护与切换**: 提供清晰机制，方便开发者针对不同测试场景切换或覆盖Mock数据
- **场景覆盖**: 为每个API端点定义关键测试场景（正常数据、空数据、分页、业务错误码、认证失败、超时等）

#### **3. Mock环境验证标准**
- **启动验证**: Mock服务启动后必须验证核心端点可访问性
- **场景验证**: 验证关键Mock场景能正确响应预期数据
- **性能验证**: Mock响应时间应在合理范围内（<100ms），避免影响开发体验

### 防止局部成功掩盖系统性问题
```javascript
// 示例: API Client回归检查
const REGRESSION_CHECKS = {
  'api-client': {
    tests: 'src/lib/api-client.test.ts',
    requiredPassRate: 100,
    criticalErrors: ['离线队列未启用', 'Mock injection failed']
  },
  'sync-manager': {
    tests: 'src/lib/sync-manager.test.ts', 
    requiredPassRate: 97,
    allowedSkipped: 1
  }
};
```

## 📊 **状态评估防过度乐观规则**

### 完成度评估标准
- **禁止局部评估**: 不得基于单一模块成功评估整体完成度
- **综合验证要求**: 必须通过5层验证后才能声称完成
- **透明问题记录**: 所有失败和回归必须明确记录

### 状态声称限制
- ❌ **禁止用词**: "突破性进展"、"重大突破"、"完全解决"
- ✅ **推荐用词**: "阶段性进展"、"部分修复"、"需要验证"
- 🔍 **验证要求**: 任何积极声称必须附带comprehensive验证结果

## 🚨 **强制执行机制**

### 验证脚本要求
每个任务必须包含comprehensive-validation.js:
```javascript
/**
 * @task TASK-P3-016A
 * @validation-type comprehensive-regression
 * @description 5层强制验证标准执行
 * @anti-pattern 防止局部成功掩盖系统性问题
 */

const COMPREHENSIVE_VALIDATION = {
  layers: ['typescript', 'build', 'lint', 'test', 'integration'],
  requiredPassRate: {
    typescript: 100,
    build: 100, 
    lint: 95,   // <10 warnings
    test: 95,   // ≥95% pass rate
    integration: 100
  },
  mockValidation: true,
  regressionCheck: true
};
```

#### **🆕 针对前端UI任务的增强验证脚本要求**
对于前端重构、UI开发等任务，验证脚本还应包含以下Mock API相关元数据：
```javascript
/**
 * 🎯 前端任务专用元数据
 * @mock-api-dependencies: ["/api/users", "/api/products/:id", "/api/auth/login"]
 * @mock-api-scenarios: {
 *   "/api/users": ["success-empty-list", "success-with-data", "error-500"],
 *   "/api/products/:id": ["success-found", "error-404-not-found", "error-403-forbidden"],
 *   "/api/auth/login": ["success-login", "error-invalid-credentials", "error-network"]
 * }
 * @mock-setup-instructions: "参考 /docs/mock-guide.md 或运行 npm run setup-mock"
 * @mock-validation-commands: ["npm run test:mock-health", "npm run test:ui-integration"]
 */

const FRONTEND_MOCK_VALIDATION = {
  requiredMockEndpoints: ["/api/users", "/api/products/:id"],
  mockHealthCheck: "npm run test:mock-health",
  scenariosValidation: {
    "/api/users": {
      scenarios: ["success-empty-list", "success-with-data", "error-500"],
      testCommand: "npm run test:users-component"
    }
  }
};
```

### 回归问题分类
- **P0极紧急**: 系统无法启动、核心功能完全失效
- **P1紧急**: 关键功能回归、测试套件大量失败
- **P2重要**: 性能下降、部分功能不稳定
- **P3一般**: 警告增加、次要功能问题

### 修复策略
1. **P0问题**: 立即停止其他工作，集中修复
2. **系统化修复**: 避免"打补丁"式修复，寻找根本原因
3. **渐进式验证**: 每次修复后重新执行comprehensive验证
4. **防回归机制**: 建立更严格的测试环境

## 📝 **文档更新规则**

### 状态修正要求
- **发现问题立即修正**: 不得延迟修正虚假状态声称
- **修正历史记录**: 保留修正前后的状态对比
- **透明原因说明**: 详细记录问题发现过程和修正原因

### 经验教训记录
- **项目管理教训**: 过度乐观评估的危害
- **技术债务教训**: Mock机制漏洞、局部验证误导
- **方法论改进**: comprehensive验证的重要性

## 示例

<example>
  **正确的comprehensive验证流程**：
  1. 执行完整5层验证标准
  2. 发现第4层测试失败90.1%，第5层服务器无响应
  3. 立即修正状态评估: 从"70-75%完成"修正为"51%完成"
  4. 记录具体回归问题: API Client 12个测试失败
  5. 制定P0修复计划，暂停其他工作
  6. 修复后重新执行comprehensive验证确认
</example>

<example type="invalid">
  **错误的评估和修复方式**：
  ```markdown
  ❌ "SyncManager测试通过97%，重大突破！"
  ❌ "内存泄漏已解决，任务基本完成"
  ❌ "局部测试都通过了，整体应该没问题"
  ❌ "先继续其他工作，回归问题以后再看"
  ```
  
  **错误原因**：
  - 基于局部成功评估整体状态
  - 没有执行comprehensive验证
  - 过度乐观的表述
  - 回归问题优先级判断错误
</example>

## 🎯 **成功指标**

### Comprehensive验证通过标准
- **5层验证**: 100%通过率
- **测试套件**: ≥95%通过率
- **回归检查**: 0个P0/P1级回归问题
- **Mock机制**: 在所有场景中稳定工作

### 状态评估准确性
- **完成度评估**: 基于comprehensive验证结果
- **问题透明度**: 所有回归问题明确记录
- **修正及时性**: 发现问题后24小时内修正状态
- **经验总结**: 每次回归都有详细的教训记录

---
**规则版本**: v1.0 (基于TASK-P3-016A回归问题经验)  
**制定日期**: 2025-01-15  
**适用范围**: 所有Phase-3及后续任务  
**强制执行**: 任何声称"完成"的任务必须通过comprehensive验证  


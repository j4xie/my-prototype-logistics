---
description: 
globs: 
alwaysApply: false
---
---
description: 处理项目中文档内容重复和状态冲突问题时 - 建立单一信息源原则和文档层次关系时 - 需要文档去重管理时 - 发现文档冲突时
globs: 
alwaysApply: false
---

# 文档去重管理规则

## 使用场景
- 项目中存在文档内容重复问题
- 不同文档中同一信息状态冲突
- 需要建立文档层次关系和信息权威来源
- 文档管理和维护工作

## 核心原则

### 1. 单一信息源原则 (Single Source of Truth)
- 每个信息只在一个地方维护详细版本
- 其他地方使用摘要 + 引用的方式
- 明确指定每类信息的权威来源文档

### 2. 文档层次关系
```
根目录文档 (概览) → 详细文档 (权威来源) → 具体实施文档 (阶段性)
```

### 3. 引用而非复制
- 详细内容放在专门的文档中
- 其他文档应该引用而非复制内容
- 保持信息的一致性和时效性
- **目录结构变更时必须同步更新目录结构文档**：
  - 更新 [DIRECTORY_STRUCTURE.md](mdc:DIRECTORY_STRUCTURE.md) 保持当前最新目录结构（仅包含：1.根目录结构、2.web-app目录结构、3.目录结构说明表格）
  - 在 [docs/directory-structure-changelog.md](mdc:docs/directory-structure-changelog.md) 记录变更历史（包含：历史更新记录、进展说明、变更详情）

## 处理重复内容的步骤

### 1. 识别重复内容
- 对比文档内容，找出重复部分
- 确定信息的权威来源
- 分析文档间的依赖关系

### 2. 建立引用关系
在非权威文档中添加：
```markdown
<!-- updated for: 更新为概览文档，详细信息请查看权威来源 -->

详细信息请参阅：[权威文档链接]
```

### 3. 保留历史记录
- 不删除已有内容，而是添加更新标记
- 说明该文档的新定位和引用关系
- 保持历史记录的完整性

### 4. 定期审核
- 在项目里程碑时审核文档一致性
- 更新引用路径和链接有效性
- 确保摘要信息与详细文档同步

## 文档职责划分模板

### 概览类文档
- **用途**：提供高级概述和快速导航
- **内容**：摘要信息 + 详细文档链接
- **更新频率**：跟随权威来源同步更新

### 详细记录类文档（权威来源）
- **用途**：维护完整详细的信息
- **内容**：所有相关的详细信息和状态
- **更新频率**：实时更新，作为信息权威来源

### 参考类文档
- **用途**：提供背景信息和参考资料
- **内容**：理论基础、设计方案等相对稳定的内容
- **更新频率**：较少更新，主要作为参考

## 冲突解决机制

### 状态冲突处理
1. **确定权威来源**：明确哪个文档负责维护该信息
2. **统一状态信息**：以权威来源为准更新其他文档
3. **添加冲突说明**：记录冲突产生原因和解决方案

### 信息不一致处理
1. **时间戳对比**：检查各文档的最后更新时间
2. **来源验证**：确认信息来源的可靠性
3. **统一更新**：以最新最准确的信息为准

## 工作流程

### 创建新文档时
1. **检查现有文档**：确认是否已存在相同或类似内容
2. **确定文档定位**：明确该文档在文档体系中的作用
3. **建立引用关系**：如果引用其他文档，使用标准格式

### 更新文档时
1. **检查是否为权威来源**：确认是否有权修改该信息
2. **同步更新相关文档**：更新权威信息后，检查引用该信息的其他文档
3. **维护引用链接**：确保所有链接仍然有效

### 发现冲突时
1. **立即记录**：记录冲突的具体内容和位置
2. **确定权威来源**：基于文档职责确定信息权威来源
3. **解决冲突**：以权威来源为准，更新其他文档
4. **添加说明**：在相关文档中说明冲突处理过程

### 文件重命名或移动时
1. **执行重命名操作**：使用适当的命令重命名文件
2. **验证原文件删除**：确认原始文件已被删除，避免新旧文件同时存在
3. **检查重复文件**：扫描目录确认没有遗留的重复文件
4. **更新所有引用**：修改所有引用该文件的链接和路径
5. **记录变更历史**：在changelog中记录文件重命名操作

## 常见问题和解决方案

### 问题1：任务状态在不同文档中冲突
**解决方案**：
- 确定任务管理的权威文档
- 其他文档改为引用权威文档
- 添加状态同步机制

### 问题2：进度信息重复且不一致
**解决方案**：
- 建立进度报告层次结构
- 高级文档只显示摘要和链接
- 详细进度在专门文档中维护

### 问题3：文档编号和版本混乱
**解决方案**：
- 建立统一的文档编号规范
- 在每个文档中明确其版本和状态
- 创建文档索引和对照表

## 最佳实践

### 文档标记规范
```markdown
<!-- updated for: 文档更新目的说明 -->
<!-- authority: 权威来源文档路径 -->
<!-- last-sync: 最后同步时间 -->
```

### 引用链接格式
```markdown
详细信息请参阅：[文档名称](mdc:文档路径)
最新进度查看：[权威来源](mdc:权威文档路径)
```

### 冲突解决记录
```markdown
## 冲突解决记录

**冲突时间**：YYYY-MM-DD
**冲突内容**：描述冲突的具体内容
**解决方案**：采用的解决方案
**权威来源**：确定的权威信息来源
```

## 检查清单

### 文档创建检查清单
- [ ] 确认没有重复的现有文档
- [ ] 明确文档在体系中的定位
- [ ] 建立必要的引用关系
- [ ] 添加文档更新标记
- [ ] **检查文件内容完整性**：确保新建文档有实质内容，不能为空文件
- [ ] **验证更新标记准确性**：确保文档标记与当前项目阶段一致

### 文档更新检查清单
- [ ] 确认是否为权威来源
- [ ] 检查相关文档是否需要同步更新
- [ ] 验证所有引用链接有效性
- [ ] 记录重要变更和原因
- [ ] **检查空文件问题**：扫描docs目录，确保没有空白或内容不足的文件
- [ ] **更新时间标记**：确保文档的更新标记反映真实的修改阶段和时间

### 冲突解决检查清单
- [ ] 识别并记录所有冲突点
- [ ] 确定各类信息的权威来源
- [ ] 统一所有文档中的冲突信息
- [ ] 建立防止未来冲突的机制
- [ ] **链接完整性检查**：验证所有文档间的引用链接在重复文件删除后仍然有效
- [ ] **标记一致性检查**：确保所有相关文档的更新标记保持一致

### 文件重命名操作检查清单
- [ ] **执行前检查**：确认重命名的必要性和新文件名的合理性
- [ ] **重命名执行**：使用正确的命令执行文件重命名
- [ ] **原文件验证**：确认原始文件已被删除，不存在重复文件
- [ ] **引用更新**：更新所有引用该文件的文档和链接
- [ ] **目录扫描**：扫描相关目录确认没有遗留的重复文件
- [ ] **变更记录**：在changelog中记录重命名操作和影响范围

## 自动检查机制

### 常见问题检测
1. **空文件检测**：定期扫描docs目录，识别空白或内容不足的文件
2. **重复内容检测**：比较文档内容，标识相似度过高的文件
3. **引用链接检查**：验证所有markdown文件中的内部链接有效性
4. **更新标记检查**：确保文档的更新标记与当前项目阶段一致

### 检查命令参考
```bash
# 1. 检查空文件（小于100字节或少于5行）
find docs/ -name "*.md" -size -100c
find docs/ -name "*.md" -exec sh -c 'test $(wc -l < "$1") -lt 5 && echo "$1"' _ {} \;

# 2. 检查更新标记一致性
grep -r "updated for:" docs/ | grep -v "阶段二\|2025"

# 3. 检查死链接
grep -r "\[.*\](mdc:.*/.md)" docs/ --include="*.md"

# 4. 检查重复文件（相似文件名）
find .cursor/rules/ -name "*.mdc" | sort | uniq -d
find .cursor/rules/ -name "*-*.mdc" | sed 's/-[^-]*\.mdc$//' | sort | uniq -d

# 5. 检查文件重命名后的遗留文件
ls .cursor/rules/ | grep -E "(docs-reading-guide|documentation-deduplication)" | grep -v -E "(agent|manual)\.mdc$"
```

### 定期维护任务
- **每月检查**：运行自动检查脚本，识别潜在问题
- **重大更新后**：验证所有引用链接和文档一致性
- **阶段性审查**：更新所有文档的时间标记和内容准确性

## 示例

<example>
  **正确的文档去重处理**：
  1. 发现[TASKS.md](mdc:TASKS.md)和其他文档中任务状态冲突
  2. 确定权威来源文档作为单一信息源
  3. 在其他文档顶部添加引用说明
  4. 保留原有内容但标记为历史记录
  5. 建立定期同步机制
  6. **补充空文件内容**：为发现的空文件添加完整内容
  7. **修复引用链接**：更新所有指向已删除文件的链接
  8. **正确的文件重命名**：重命名文件后验证原文件已删除，更新所有引用
</example>

<example type="invalid">
  **错误的处理方式**：
  1. 直接删除重复内容，丢失历史信息
  2. 在多个文档中维护相同信息
  3. 忽略状态冲突问题
  4. 创建新文档时不检查是否已存在
  5. 不建立文档间的引用关系
  6. **留存空文件**：创建文档后不添加实际内容
  7. **忽略死链接**：删除文件后不更新相关引用
  8. **错误的文件重命名**：重命名文件后不删除原文件，导致新旧文件同时存在
</example>
















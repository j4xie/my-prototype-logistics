---
description:
globs:
alwaysApply: false
---
# 食品溯源系统API集成代理规则

## 使用场景
- **API对接开发时** - 无论是Mock API还是真实后端API
- **API客户端封装时** - 创建类型安全的API服务层  
- **环境切换配置时** - Mock环境与生产环境的无缝切换
- **错误处理优化时** - 统一的错误处理和重试机制

## 🏗️ 核心原则

### 📋 API设计标准
严格遵循食品溯源系统的API设计规范：

#### RESTful架构
- **资源导向**: URL使用名词复数 (`/traces`, `/products`, `/users`)
- **HTTP语义**: GET(查询)、POST(创建)、PUT(更新)、PATCH(部分更新)、DELETE(删除)
- **标准状态码**: 200/201/400/401/403/404/422/500
- **分页支持**: `?page=1&limit=20&sort=createdAt&order=desc`

#### 响应格式标准
```typescript
// 成功响应
interface SuccessResponse<T> {
  success: true;
  data: T;
  meta?: PaginationMeta;
}

// 错误响应  
interface ErrorResponse {
  success: false;
  error: {
    code: string;
    message: string;
    details?: ValidationError[];
  };
}
```

### 🔧 技术实现要求

#### TypeScript类型安全
```typescript
// 定义完整的接口类型
interface TraceResponse {
  id: string;
  batchCode: string;
  productName: string;
  status: 'ACTIVE' | 'COMPLETED' | 'CANCELLED';
  createdAt: string;
  updatedAt: string;
}

// API客户端类型安全调用
const trace = await apiClient.get<TraceResponse>(`/traces/${id}`);
```

#### 环境抽象层设计
```typescript
// 环境配置抽象
interface ApiConfig {
  baseURL: string;
  timeout: number;
  useMockData: boolean;
  retryAttempts: number;
}

// 自动环境检测
export const getApiConfig = (): ApiConfig => {
  const env = process.env.NEXT_PUBLIC_API_ENV || 'mock';
  
  const configs = {
    mock: {
      baseURL: '/api',
      timeout: 10000,
      useMockData: true,
      retryAttempts: 3
    },
    production: {
      baseURL: 'https://api.farm.com/v1',
      timeout: 20000,
      useMockData: false,
      retryAttempts: 5
    }
  };
  
  return configs[env] || configs.mock;
};
```

#### 服务层封装模式
```typescript
// 基础API服务类
export abstract class BaseApiService {
  protected apiClient: ApiClient;
  
  constructor(apiClient: ApiClient) {
    this.apiClient = apiClient;
  }
  
  protected async handleRequest<T>(request: () => Promise<T>): Promise<T> {
    try {
      return await request();
    } catch (error) {
      if (error instanceof ApiError) {
        this.handleApiError(error);
      }
      throw error;
    }
  }
}

// 具体业务服务实现
export class TraceService extends BaseApiService {
  async getTrace(id: string): Promise<TraceResponse> {
    return this.handleRequest(() => 
      this.apiClient.get<TraceResponse>(`/traces/${id}`)
    );
  }
  
  async createTrace(data: TraceCreateRequest): Promise<TraceResponse> {
    return this.handleRequest(() =>
      this.apiClient.post<TraceResponse>('/traces', data)
    );
  }
}
```

### 🔄 环境切换机制

#### Mock API支持
```typescript
// 服务工厂模式
export class ApiServiceFactory {
  static createTraceService(): TraceService {
    const config = getApiConfig();
    const apiClient = new ApiClient(config);
    
    if (config.useMockData) {
      return new MockTraceService(apiClient);
    }
    
    return new TraceService(apiClient);
  }
}
```

## 🎯 业务域API实现

### 认证模块 (AuthService)
```typescript
export class AuthService extends BaseApiService {
  async login(credentials: LoginRequest): Promise<AuthResponse> {
    return this.handleRequest(() => 
      this.apiClient.post<AuthResponse>('/auth/login', credentials)
    );
  }
  
  async logout(): Promise<void> {
    return this.handleRequest(() => 
      this.apiClient.post<void>('/auth/logout')
    );
  }
}
```

### 溯源模块 (TraceService)
```typescript
export class TraceService extends BaseApiService {
  async verifyTrace(id: string, code?: string): Promise<VerificationResponse> {
    return this.handleRequest(() =>
      this.apiClient.post<VerificationResponse>(`/traces/${id}/verify`, { code })
    );
  }
  
  async getTraceHistory(id: string): Promise<TraceHistory[]> {
    return this.handleRequest(() =>
      this.apiClient.get<TraceHistory[]>(`/traces/${id}/history`)
    );
  }
}
```

### 用户模块 (UserService)
```typescript
export class UserService extends BaseApiService {
  async getProfile(): Promise<UserProfile> {
    return this.handleRequest(() =>
      this.apiClient.get<UserProfile>('/users/profile')
    );
  }
  
  async updateProfile(data: ProfileUpdateRequest): Promise<UserProfile> {
    return this.handleRequest(() =>
      this.apiClient.put<UserProfile>('/users/profile', data)
    );
  }
}
```

## ⚠️ 错误处理规范

### 标准错误处理
```typescript
// 统一错误处理
const handleApiError = (error: ApiError): void => {
  switch (error.status) {
    case 401:
      // 未认证，跳转登录
      window.location.href = '/auth/login';
      break;
    case 403:
      showNotification('权限不足，请联系管理员', 'error');
      break;
    case 422:
      // 验证错误，显示详细信息
      if (error.details) {
        showValidationErrors(error.details);
      }
      break;
    case 500:
      showNotification('服务器错误，请稍后重试', 'error');
      break;
    default:
      showNotification(error.message, 'error');
  }
};
```

### 自动重试机制
```typescript
export const createRetryWrapper = <T extends any[], R>(
  fn: (...args: T) => Promise<R>,
  maxRetries: number = 3
) => {
  return async (...args: T): Promise<R> => {
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        return await fn(...args);
      } catch (error) {
        // 不重试的错误类型
        if (error instanceof ApiError && [400, 401, 403, 404, 422].includes(error.status)) {
          throw error;
        }
        
        if (attempt === maxRetries) {
          throw error;
        }
        
        // 指数退避延迟
        const delay = 1000 * Math.pow(2, attempt);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  };
};
```

## 🧪 测试验证标准

### API测试用例模板
```typescript
describe('TraceService', () => {
  let traceService: TraceService;
  
  beforeEach(() => {
    const apiClient = new ApiClient('/api');
    traceService = new TraceService(apiClient);
  });
  
  it('should return trace data for valid ID', async () => {
    const mockTrace: TraceResponse = { /* mock data */ };
    jest.spyOn(traceService['apiClient'], 'get').mockResolvedValue(mockTrace);
    
    const result = await traceService.getTrace('BATCH001');
    expect(result).toEqual(mockTrace);
  });
  
  it('should handle API errors correctly', async () => {
    const apiError = new ApiError(404, 'TRACE_NOT_FOUND', 'Trace not found');
    jest.spyOn(traceService['apiClient'], 'get').mockRejectedValue(apiError);
    
    await expect(traceService.getTrace('INVALID')).rejects.toThrow(ApiError);
  });
});
```

## 📝 接口文档标准

### 文档模板格式
```markdown
#### POST /api/v1/traces - 创建溯源批次

**请求参数**:
| 字段 | 类型 | 必需 | 描述 |
|------|------|------|------|
| batchCode | string | 是 | 批次编码 |
| productName | string | 是 | 产品名称 |

**响应示例**:
```json
{
  "success": true,
  "data": {
    "id": "trace-456",
    "batchCode": "BATCH001"
  }
}
```

**错误码**: 400, 401, 403, 422, 500
```

## 关键规则
- 严格遵循RESTful架构和统一响应格式
- 使用TypeScript确保类型安全
- 实现环境抽象层支持Mock和生产环境切换
- 采用服务层封装模式组织业务逻辑
- 建立标准化的错误处理和重试机制
- 为所有API操作编写对应的测试用例
- 保持接口文档的完整性和一致性

## 示例

<example>
**正确的API集成实现**：

```typescript
// 1. 定义类型安全的接口
interface TraceCreateRequest {
  batchCode: string;
  productName: string;
}

// 2. 实现服务层
class TraceService extends BaseApiService {
  async createTrace(data: TraceCreateRequest): Promise<TraceResponse> {
    return this.handleRequest(() =>
      this.apiClient.post<TraceResponse>('/traces', data)
    );
  }
}

// 3. 使用服务工厂
const traceService = ApiServiceFactory.createTraceService();
const result = await traceService.createTrace({
  batchCode: "BATCH001",
  productName: "有机西红柿"
});
```
</example>

<example type="invalid">
**错误的API集成方式**：

```typescript
// 1. 缺少类型定义
const createTrace = async (data: any) => {
  const response = await fetch('/api/traces', {
    method: 'POST',
    body: JSON.stringify(data)
  });
  return response.json(); // 没有类型安全
};

// 2. 直接使用fetch，没有错误处理
// 3. 没有环境抽象


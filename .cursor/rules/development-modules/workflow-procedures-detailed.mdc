---
description: 
globs: 
alwaysApply: false
---
# 标准开发工作流程详细规范

<!-- migrated-from: comprehensive-development-workflow-auto.mdc -->
<!-- migration-date: 2025-02-02 -->
<!-- authority: 详细工作流程规范，被主控规则引用 -->

## 📖 **详细使用场景**
- 开始任何新的开发任务时的完整指导
- 进行重构或架构变更时的流程规范
- 需要工作流程和项目管理指导时的详细步骤
- 制定开发计划和任务规划时的标准流程
- 需要状态验证和质量控制时的具体方法
- 防止过度乐观和虚假进度报告的机制

## 🎯 **规则选择指导详细说明** (遵循单一信息源原则)

### **使用场景判断详细标准**
- **开始新任务、制定开发计划** → 使用本规则 (workflow-procedures-detailed)
  - 任务规划和启动阶段
  - 开发流程指导需求
  - 工作流程标准化需求
- **验证任务完成、回归测试** → 使用 comprehensive-regression-testing-agent
  - 任务验证和测试阶段
  - 质量保证和回归检查
  - 用户质疑响应处理

### **快速判断方法详细指导**
```bash
用户说: "开始新的开发任务" → 本规则 (工作流程指导)
用户说: "制定开发计划" → 本规则 (规划流程)
用户说: "需要工作流程指导" → 本规则 (流程标准)
用户说: "验证任务完成" → comprehensive-regression-testing-agent (验证标准)
用户说: "检查回归问题" → comprehensive-regression-testing-agent (回归测试)
用户说: "质疑项目状态" → comprehensive-regression-testing-agent (质疑响应)
```

### **职责分工详细说明**
- ✅ **本规则负责**: 
  - 5阶段开发生命周期的详细流程
  - 任务规划和启动的具体步骤
  - 文档管理和同步的标准流程
  - 工作流程的标准化和优化
- ❌ **本规则不负责**: 
  - 具体验证技术标准 (由 comprehensive-regression-testing-agent 定义)
  - 回归测试的具体执行方法
  - 用户质疑的响应协议

## 📚 **依赖规则详细说明**
本规则整合并依赖以下专门规则，请确保同时遵循：
- `project-management-auto` - 项目文档管理与目录结构同步的详细规范
- `comprehensive-regression-testing-agent` - 5层验证标准与回归测试的权威定义
- `docs-reading-guide-agent` - 任务启动时的文档阅读指导和要求
- `task-management-manual` - 任务创建与管理规范的具体标准
- `test-validation-standards-agent` - 验证脚本创建标准和要求
- `api-rules-usage-guide-manual` - API任务规则选择指导和决策树

## 🎯 **5阶段标准化开发生命周期详细说明**

### **阶段1: 任务启动与规划** (Task Planning Phase)

#### **1.1 强制文档阅读检查详细流程** (遵循 `docs-reading-guide-agent`)

##### **任务类型识别和文档映射**
```bash
# 任务类型检查表 (详细版)
□ **架构任务** → 必读文档清单:
  - docs/architecture/design-principles.md (系统架构原则)
  - 项目重构方案.md (整体架构规划)
  - refactor/phase-*/相关文档 (当前阶段状态)

□ **API任务** → 必读文档清单:
  - docs/api/overview.md (API总体设计)
  - api-rules-usage-guide-manual (规则选择指导)
  - 相关的API接口文档和规范

□ **组件任务** → 参考文档清单:
  - docs/components/overview.md (组件库概览)
  - UI设计系统规范
  - 相关组件的设计文档

□ **重构任务** → 必读文档清单:
  - 项目重构方案.md (重构总体规划)
  - refactor-phase2-agent (Phase-2规范)
  - 相关阶段的具体任务文档

□ **新功能任务** → 查看文档清单:
  - 相关PRD文档 (产品需求文档)
  - 功能设计文档
  - 相关的技术规范文档
```

##### **文档阅读验证机制**
- **阅读确认**: 每个必读文档都需要确认已阅读并理解
- **关键信息提取**: 提取与当前任务相关的关键信息和约束
- **冲突识别**: 识别文档间可能存在的冲突或不一致
- **问题记录**: 记录阅读过程中发现的问题或疑问

#### **1.2 任务规范化创建详细流程** (遵循 `task-management-manual`)

##### **任务创建标准流程详细步骤**
```markdown
# 任务创建标准流程 (详细版)
1. **检查现有任务文件，避免重复创建**
   - 搜索现有任务文件，确认没有重复或相似任务
   - 如有相关任务，考虑是否可以合并或依赖
   - 记录任务间的关系和依赖

2. **使用标准命名: TASK-XXX_任务描述.md**
   - 编号规则: 按照项目统一的编号规则
   - 描述要求: 简洁明确，体现任务核心内容
   - 文件位置: 按照项目目录结构放置

3. **明确验收标准，特别是技术验证标准**
   - 功能验收标准: 明确的功能完成标准
   - 技术验收标准: 基于5层验证的技术标准
   - 质量验收标准: 代码质量和文档质量要求
   - 性能验收标准: 如适用，明确性能指标

4. **预估验证工作量和时间**
   - 开发工作量: 预估开发所需时间
   - 验证工作量: 预估测试和验证所需时间
   - 文档工作量: 预估文档编写和更新时间
   - 总体时间: 综合评估任务总时间

5. **同步更新目录结构文档 (DIRECTORY_STRUCTURE.md)**
   - 如有新文件或目录创建，及时更新目录结构
   - 在变更日志中记录目录结构变更
   - 确保目录结构文档的准确性
```

#### **🆕 1.2.1 前端任务启动增强清单详细说明**
对于前端重构、UI开发等任务，在标准流程基础上增加：

##### **Mock API依赖分析详细要求**
```markdown
# 前端任务专用步骤 (详细版)
4. **Mock API依赖分析与策略确定**
   - **依赖端点列表**: 列出任务强依赖的API端点及其预期行为
     - 端点URL和HTTP方法
     - 请求参数格式和验证规则
     - 响应数据格式和状态码
     - 错误处理和异常情况
   
   - **Mock策略确定**: 确定Mock策略：使用现有Mock / 新增Mock / 修改现有Mock
     - 评估现有Mock的覆盖程度
     - 确定需要新增的Mock场景
     - 评估Mock修改的影响范围
   
   - **Mock数据管理**: 明确Mock数据管理方式和测试场景覆盖
     - Mock数据的版本管理策略
     - 测试场景的覆盖范围
     - Mock数据的维护和更新机制
   
   - **成本评估**: 评估Mock环境搭建和维护成本
     - 初始搭建时间和复杂度
     - 日常维护的工作量
     - Mock环境的稳定性风险
```

##### **前端验收标准详细定义**
```markdown
5. **前端特定验收标准明确**
   - **UI组件单元测试覆盖率要求**（建议≥80%）
     - 组件渲染测试
     - 用户交互测试
     - 状态变更测试
     - 错误处理测试
   
   - **关键用户流程集成测试要求**
     - 端到端用户流程测试
     - 跨组件交互测试
     - 数据流测试
     - 异常流程测试
   
   - **Mock API场景测试覆盖度要求**
     - 成功场景测试覆盖
     - 失败场景测试覆盖
     - 边缘情况测试覆盖
     - 性能场景测试覆盖
   
   - **跨浏览器兼容性测试范围**（如适用）
     - 目标浏览器列表
     - 兼容性测试范围
     - 已知兼容性问题处理
```

#### **🆕 1.2.2 前端任务启动检查清单详细说明**
```markdown
# 前端任务启动检查清单 (详细版)
- [ ] **Mock API依赖已分析并记录在任务文档中**
  - 依赖的API端点清单完整
  - API行为和数据格式明确
  - 异常情况和错误处理已考虑

- [ ] **Mock API策略（新建/修改/复用）已初步确定**
  - Mock策略选择有明确依据
  - 策略实施的可行性已评估
  - 策略的风险和成本已考虑

- [ ] **如需新建或重要修改Mock，已与相关人员沟通**
  - 相关技术人员已知晓
  - 影响范围已评估和沟通
  - 实施计划已协调

- [ ] **前端测试策略（单元测试+集成测试）已明确**
  - 测试范围和深度已确定
  - 测试工具和框架已选择
  - 测试数据和环境已准备

- [ ] **UI设计规范和组件库使用方式已确认**
  - 设计规范已理解和确认
  - 组件库使用方式已明确
  - 设计和开发的一致性已保证
```

#### **1.3 API任务专门处理详细流程** (遵循 `api-rules-usage-guide-manual`)

##### **API任务规则选择详细决策树**
```bash
# API任务规则选择 (详细版)
**设计API接口** → 使用 api-interface-design-agent
  - 新API接口的设计和规范定义
  - API文档的编写和维护
  - 接口契约的制定和验证

**实现API调用** → 使用 api-integration-agent
  - 前端API调用的实现
  - API客户端的开发和优化
  - API集成的测试和验证

**修复API问题** → 使用 api-integration-agent
  - API调用问题的排查和修复
  - API集成问题的解决
  - API性能问题的优化

**更新API文档** → 使用 api-interface-design-agent
  - API文档的更新和维护
  - API变更的文档化
  - API使用指南的完善
```

### **阶段2: 开发与实施** (Development Phase)

#### **2.1 架构规范遵循详细要求** (遵循 `refactor-phase2-agent`)

##### **技术栈标准详细说明** (基于项目重构方案)
```bash
# 技术栈标准 (详细版)
**前端框架**: React + TypeScript
  - React版本要求和特性使用规范
  - TypeScript配置和类型定义标准
  - 组件设计模式和最佳实践

**状态管理**: Context + Zustand
  - 状态管理架构和模式
  - 状态更新和同步机制
  - 性能优化和最佳实践

**构建工具**: Next.js
  - Next.js配置和优化
  - 构建流程和部署策略
  - 性能监控和优化

**测试框架**: Jest + React Testing Library
  - 测试策略和覆盖率要求
  - 测试工具配置和使用
  - 测试数据和Mock管理
```

#### **2.2 实时变更记录详细机制** (遵循 `project-management-auto`)

##### **强制变更记录机制详细说明**
```markdown
# 强制变更记录机制 (详细版)
| 文件路径 | 修改类型 | 说明 | 时间戳 | 影响评估 |
|---------|---------|------|-------|----------|
| src/components/NewComponent.tsx | 新增 | 创建用户界面组件 | 2025-01-26 10:30 | 新增功能，无破坏性影响 |
| web-app/src/hooks/useApi.ts | 修改 | 修复内存泄漏问题 | 2025-01-26 14:15 | 性能改进，向后兼容 |
| src/utils/validation.ts | 重构 | 优化验证逻辑 | 2025-01-26 16:45 | 内部优化，接口不变 |

# 记录要求详细说明
- **文件路径**: 完整的相对路径，便于定位
- **修改类型**: 新增/修改/删除/重构/移动
- **说明**: 简洁明确的修改说明
- **时间戳**: 精确到分钟的时间记录
- **影响评估**: 对系统其他部分的影响评估
```

#### **2.3 UI设计规范详细标准** (遵循 `ui-design-system-auto`)

##### **Neo Minimal iOS-Style Admin UI标准详细说明**
```bash
# Neo Minimal iOS-Style Admin UI标准 (详细版)
**布局标准**: 
  - 容器宽度: max-w-[390px] mx-auto
  - 页面结构: flex flex-col min-h-screen
  - 内容间距: pt-[80px] pb-[80px] (避免导航栏遮挡)

**卡片设计**: 
  - 基础样式: bg-white rounded-lg shadow-sm p-4
  - 间距规范: 卡片间使用 space-y-4 或 gap-4
  - 内容组织: 标题、内容、操作按钮的层次结构

**交互效果**: 
  - 悬停效果: hover:shadow-md hover:scale-[1.03]
  - 点击反馈: active:scale-[0.98] transition-transform
  - 焦点状态: focus:ring-2 focus:ring-blue-500

**无障碍标准**: 
  - 语义化标签: 使用正确的HTML语义标签
  - 键盘导航: tabindex="0" 和合理的tab顺序
  - 屏幕阅读器: aria-label 和 aria-describedby
  - 颜色对比: 确保足够的颜色对比度
```

#### **🆕 2.4 前端重构与开发特别指导详细说明**
针对前端重构时间过长和Mock API瓶颈的优化策略：

##### **小型迭代与验证策略详细实施**
```markdown
# 小型迭代策略 (详细版)
- **拆分大型重构**: 将大型前端重构拆分为多个可独立验证的小型迭代（建议每个迭代1-3天完成）
  - 迭代规划: 按功能模块或组件进行拆分
  - 依赖管理: 明确迭代间的依赖关系
  - 风险控制: 每个迭代的风险可控且可回滚

- **每迭代完整交付**: 每个迭代都应有清晰的UI功能交付，并能在稳定的Mock API环境下进行充分测试
  - 交付标准: 明确的功能完成标准
  - 测试要求: 完整的测试覆盖和验证
  - 文档更新: 及时更新相关文档

- **快速反馈循环**: 避免在技术债务上无限纠缠，优先实现有价值的业务功能
  - 反馈机制: 建立快速的反馈和调整机制
  - 优先级管理: 明确功能和技术债务的优先级
  - 价值导向: 以业务价值为导向进行决策
```

##### **Mock优先开发模式详细实施**
```markdown
# Mock优先开发模式 (详细版)
- **契约先行**: 在后端API尚未稳定时，前端应基于明确的API契约和完善的Mock进行开发
  - 契约定义: 明确的API接口契约和数据格式
  - Mock实现: 基于契约的完整Mock实现
  - 版本管理: 契约和Mock的版本管理

- **环境一致性**: 确保开发环境和测试环境使用相同的Mock配置，避免环境差异
  - 配置管理: 统一的Mock配置管理
  - 环境同步: 开发和测试环境的同步机制
  - 问题排查: 环境差异问题的快速排查

- **场景覆盖**: Mock应覆盖关键业务场景，包括成功流程和各种异常情况
  - 场景设计: 全面的业务场景设计
  - 异常处理: 各种异常情况的Mock实现
  - 测试数据: 丰富的测试数据和场景
```

### **阶段3: 验证与测试** (Validation Phase) - **核心阶段**

#### **🆕 3.0 前置步骤：Mock API环境准备与验证详细流程**
在正式开始UI逻辑的功能测试和验证前，必须确保Mock环境已按预期搭建：

##### **Mock环境准备检查清单详细说明**
```markdown
# Mock环境准备检查清单 (详细版)
- [ ] **Mock服务可访问**: 确认Mock API服务正常启动并可访问
  - 服务状态检查: 确认Mock服务正常运行
  - 网络连接检查: 确认网络连接正常
  - 端口和URL检查: 确认访问地址正确

- [ ] **核心端点验证**: 验证任务依赖的关键API端点返回预期响应
  - 端点可用性: 确认所有依赖端点可访问
  - 响应格式: 验证响应数据格式正确
  - 状态码检查: 确认HTTP状态码符合预期

- [ ] **场景配置确认**: 确认所需的测试场景（成功/失败/边缘情况）都已配置
  - 成功场景: 正常业务流程的Mock配置
  - 失败场景: 各种错误情况的Mock配置
  - 边缘情况: 特殊情况和边界条件的Mock配置

- [ ] **环境一致性**: 确保开发环境和测试环境的Mock配置一致
  - 配置对比: 对比不同环境的Mock配置
  - 数据一致性: 确保Mock数据的一致性
  - 版本同步: 确保Mock版本的同步

- [ ] **性能检查**: Mock响应时间在合理范围内（<100ms）
  - 响应时间测试: 测量Mock API的响应时间
  - 性能基准: 建立性能基准和监控
  - 性能优化: 必要时进行性能优化
```

##### **Mock环境问题处理原则详细说明**
```markdown
# Mock环境问题处理原则 (详细版)
- 🚨 **优先解决Mock问题**: 如发现Mock环境与预期不符，应优先解决Mock问题而非绕过
  - 问题识别: 快速识别Mock环境问题
  - 根因分析: 深入分析问题的根本原因
  - 解决方案: 制定有效的解决方案

- 🔄 **完整重新验证**: Mock问题修复后，需要重新执行相关的UI功能测试
  - 验证范围: 确定需要重新验证的范围
  - 验证流程: 执行完整的验证流程
  - 结果确认: 确认验证结果的有效性

- 📝 **问题记录**: 记录Mock环境问题和解决方案，避免类似问题重复出现
  - 问题文档: 详细记录问题和解决过程
  - 知识积累: 建立问题解决的知识库
  - 预防措施: 制定预防类似问题的措施
```

#### **3.1 任务导向验证脚本详细要求** (遵循 `test-validation-standards-agent`)

##### **验证脚本创建标准详细说明**
```bash
# 强制创建验证脚本 (详细版)
**路径标准**: scripts/validation/task-p3-016a/comprehensive-validation.js (示例)
# 或根据具体任务ID: scripts/validation/task-{新任务ID}/comprehensive-validation.js

**内容要求**: 
- 包含VALIDATION_META元数据
- 明确的验证步骤和标准
- 自动化执行能力
- 详细的错误处理和报告

**功能要求**: 
- 自动化执行5层验证标准
- 生成结构化的验证报告
- 支持持续集成环境
- 提供清晰的失败诊断

**报告要求**: 
- 生成详细验证报告JSON
- 包含每层验证的详细结果
- 提供问题定位和修复建议
- 支持历史对比和趋势分析

# 🆕 前端任务验证脚本增强要求:
# - 包含Mock环境健康检查步骤
# - 包含Mock API场景验证说明
# - 提供Mock环境故障的调试指引
# - 集成前端特定的测试工具和框架
```

#### **3.2 5层验证标准强制执行详细说明** (遵循 `comprehensive-regression-testing-agent.mdc`)

##### **验证执行要求详细标准**
```bash
# 验证执行要求 (详细标准请参考权威来源)
**验证标准权威定义**: comprehensive-regression-testing-agent.mdc
**执行要求**: 必须按照权威文档中定义的5层验证标准执行
**通过标准**: TypeScript(100%) + Build(100%) + Lint(95%) + Test(95%) + Integration(100%)
**回归检查**: 强制执行comprehensive regression testing protocols

**详细验证标准和执行机制请参阅**: comprehensive-regression-testing-agent.mdc

# 各层验证的基本要求概述 (详细标准见权威文档)
1. **TypeScript验证**: 类型检查100%通过，无any滥用
2. **构建验证**: 项目构建成功，无依赖错误
3. **代码质量验证**: ESLint检查95%通过，代码规范符合要求
4. **测试验证**: 单元测试和集成测试95%通过
5. **集成验证**: 端到端功能验证100%通过
```

#### **3.3 回归测试强制要求详细说明** ⭐ **引用权威来源**

##### **回归测试执行协议详细流程**
```bash
# 回归测试执行协议 (详细规则请参考权威来源)
**权威来源**: comprehensive-regression-testing-agent.mdc 
**核心要求**: 防止已修复问题重新出现
**执行标准**: 按照权威文档中的comprehensive regression testing protocols执行

**具体回归测试机制和检查标准请参阅**: comprehensive-regression-testing-agent.mdc

# 回归测试的基本流程概述 (详细流程见权威文档)
1. **历史问题识别**: 识别历史上已修复的问题
2. **测试用例准备**: 准备针对历史问题的测试用例
3. **自动化回归测试**: 执行自动化的回归测试套件
4. **手动验证**: 对关键功能进行手动验证
5. **结果分析**: 分析测试结果，确认无回归问题
```

#### **3.4 用户质疑强制响应协议详细流程**

##### **质疑响应标准流程**
```bash
# 用户质疑时立即执行 (详细版)
1. **停止理论辩护，承认可能过于乐观**
   - 立即停止基于理论的解释和辩护
   - 承认当前评估可能存在过于乐观的问题
   - 表明将基于实际验证重新评估

2. **立即运行完整5层验证脚本**
   - 执行完整的验证脚本，不跳过任何步骤
   - 记录所有验证过程和结果
   - 确保验证环境的准确性和一致性

3. **100%基于实际验证结果回应**
   - 完全基于验证脚本的实际输出进行回应
   - 不添加主观判断或理论分析
   - 提供具体的数据和证据支持

4. **修正所有相关文档状态**
   - 识别所有需要修正的相关文档
   - 按照实际验证结果修正状态信息
   - 确保所有文档的一致性

5. **记录质疑过程作为改进案例**
   - 详细记录质疑的内容和处理过程
   - 分析过度乐观的根本原因
   - 制定预防类似问题的改进措施
```

### **阶段4: 状态更新与报告** (Status Management Phase)

#### **4.1 基于证据的状态管理详细机制** (遵循 `project-management-auto`)

##### **状态更新规则详细说明**
```bash
# 状态更新规则 (详细版)
**技术验证优先**: 必须通过5层验证才能声称"完成"
  - 验证完整性: 所有5层验证必须100%通过
  - 证据要求: 提供验证脚本的完整输出
  - 时效性: 验证结果必须是最新的

**问题透明化**: 验证失败立即记录到问题清单
  - 即时记录: 发现问题后立即记录
  - 详细描述: 提供问题的详细描述和上下文
  - 影响评估: 评估问题对项目的影响

**状态及时修正**: 发现虚假完成度立即修正所有文档
  - 快速响应: 发现问题后立即启动修正流程
  - 全面修正: 修正所有相关的文档和记录
  - 一致性检查: 确保修正后的一致性

**单一信息源**: 以权威文档为准，其他文档仅引用
  - 权威确定: 明确每类信息的权威来源
  - 引用机制: 其他文档通过引用获取信息
  - 同步机制: 建立信息同步的机制
```

##### **强制目录结构同步详细机制** (遵循 project-management-auto)
```bash
# 🎯 强制目录结构同步 (详细版)
**同步触发条件**: 任何目录结构变更时必须同步更新:
1. **DIRECTORY_STRUCTURE.md** (保持当前最新目录结构)
   - 更新时机: 目录变更后立即更新
   - 内容要求: 完整反映当前目录结构
   - 格式标准: 树状结构，清晰层级

2. **docs/directory-structure-changelog.md** (记录变更历史)
   - 记录内容: 变更时间、原因、具体内容
   - 格式要求: 统一的变更记录格式
   - 追踪机制: 变更历史的追踪和查询

**变更类型覆盖**: 新增文件/目录、重命名、移动、删除
**记录格式要求**: 包含变更原因、影响评估、变更详情
**一致性检查**: 定期检查目录结构文档的一致性
```

#### **4.2 文档一致性管理详细机制** (遵循 `project-management-auto`)

##### **文档层次结构详细说明**
```bash
# 文档层次结构 (详细版)
**权威来源**: refactor/REFACTOR_LOG.md (详细进度)
  - 功能: 记录详细的重构进度和技术细节
  - 更新频率: 每次重要变更后更新
  - 内容标准: 技术细节、问题记录、解决方案

**项目概览**: TASKS.md (高级摘要+引用)
  - 功能: 提供项目的高级概览和任务摘要
  - 更新频率: 定期更新，保持与权威来源一致
  - 内容标准: 简洁的摘要信息和引用链接

**阶段详细**: 
  - refactor/phase-2/PHASE-2-WORK-PLAN.md (阶段二)
  - refactor/phase-3/PHASE-3-MASTER-STATUS.md (阶段三)
  - 功能: 提供各阶段的详细信息和状态
  - 更新频率: 阶段内的重要变更后更新
  - 内容标准: 阶段特定的详细信息

**目录结构**: DIRECTORY_STRUCTURE.md (仅当前结构)
  - 功能: 反映当前的目录结构
  - 更新频率: 目录结构变更后立即更新
  - 内容标准: 准确的目录树结构

**变更历史**: docs/directory-structure-changelog.md
  - 功能: 记录目录结构的变更历史
  - 更新频率: 目录结构变更后立即更新
  - 内容标准: 详细的变更记录和原因
```

##### **Phase-3专用文档结构详细管理** (单一权威来源)
```bash
# Phase-3专用文档结构 (详细版)
**Phase-3权威**: refactor/phase-3/PHASE-3-MASTER-STATUS.md (AI优先使用)
  - 功能: Phase-3的权威状态信息
  - 使用场景: AI获取Phase-3状态的首选来源
  - 内容标准: 核心状态、关键指标、引用链接

**AI阅读优先级详细说明**:
1. **首先且仅读取权威文档获取核心状态**
   - 减少信息过载和混乱
   - 确保获得最准确的状态信息
   - 提高AI响应的准确性和一致性

2. **如需详细信息，按权威文档中的引用链接定向访问**
   - 按需获取详细信息
   - 保持信息的层次性和结构性
   - 避免不必要的信息处理

3. **避免同时读取多个Phase-3文档造成上下文混乱**
   - 防止信息冲突和不一致
   - 减少AI处理的复杂性
   - 确保响应的准确性

**Phase-3详细文档**: refactor/phase-3/*.md (通过MASTER-STATUS引用)
- **PHASE-3-COMPREHENSIVE-PLAN.md** (问题分析和技术细节)
- **TASK-P3-016A-真实状态追踪.md** (具体任务实时状态)
- **PHASE-3-COMPREHENSIVE-PLAN.md** (完整任务列表规划)
- **PHASE-3-COMPREHENSIVE-PLAN.md** (工作执行计划)
- **PHASE-3-COMPREHENSIVE-PLAN.md** (架构恢复计划)
- **REFACTOR-PHASE3-CHANGELOG.md** (技术变更日志)
```

##### **Phase-3文档读取最佳顺序** (遵循3阶段工作流程)
```bash
# 推荐读取顺序 (总计5-8分钟，支持3阶段工作流程)

**Stage 1 - 任务启动确认** (2-3分钟)
1. 🚀 快速入口 (2-3分钟)
   → PHASE-3-STATUS-UPDATE.md
   - 获得整体状态概览和重要变更提醒
   - 查看当前阶段可执行的任务列表
   - 确定需要深入的领域和优先级
   - 获取快速导航到具体文档的路径

2. 🎯 权威状态 (3-5分钟)  
   → PHASE-3-MASTER-STATUS.md
   - 获取权威完成度数据和具体任务状态
   - 确认当前可执行的任务和依赖关系
   - 检查关键组件的修复状态和风险评估
   - 获取技术验证的具体要求

**Stage 2 & 3 - 开发执行和任务完成** (按需)
3. 📋 按需详细 (按需访问)
   → 通过权威文档引用深入特定领域
   - 技术问题和架构细节 → COMPREHENSIVE-PLAN.md
   - 具体任务实施细节 → 具体TASK文档  
   - 变更历史和技术债务 → CHANGELOG.md
   - 规划和依赖关系 → 相关规划文档

**文档读取效率优化原则**:
- **单一入口**: 始终从STATUS-UPDATE开始，避免直接跳转到详细文档
- **层次访问**: 通过权威文档的引用链接访问详细信息，避免平行阅读
- **上下文保护**: 不要同时读取多个Phase-3文档，防止信息混乱
- **目标导向**: 根据当前工作阶段选择需要的详细信息深度
```

### **阶段5: 回顾与持续改进** (Review & Improvement Phase)

#### **5.1 规则遵循检查详细机制** (遵循 `cursor-rules`)

##### **定期规则审计详细清单**
```bash
# 定期规则审计 (详细版)
□ **验证脚本是否按task-ID创建**
  - 检查验证脚本的命名规范
  - 确认脚本内容的完整性
  - 验证脚本的功能正确性

□ **文档是否遵循单一信息源原则**
  - 检查信息源的唯一性
  - 确认引用关系的正确性
  - 验证信息的一致性

□ **API任务是否选择了正确的规则**
  - 检查API任务的规则选择
  - 确认规则应用的正确性
  - 验证规则执行的效果

□ **变更记录是否完整同步**
  - 检查变更记录的完整性
  - 确认同步机制的有效性
  - 验证记录的准确性

□ **用户质疑是否得到正确响应**
  - 检查质疑响应的及时性
  - 确认响应内容的准确性
  - 验证改进措施的有效性
```

#### **5.2 防呆机制建立详细说明**

##### **自动化检查点详细配置**
```bash
# 自动化检查点 (详细版)
**Git Hooks**: 提交前运行基础验证
  - 配置: 在.git/hooks中配置pre-commit钩子
  - 检查内容: 基础的代码质量和格式检查
  - 失败处理: 阻止不符合标准的代码提交

**CI/CD**: 自动执行5层验证
  - 配置: 在CI/CD流水线中集成验证脚本
  - 执行时机: 代码提交和合并时自动执行
  - 报告生成: 自动生成验证报告和通知

**文档检查**: 定期检查文档一致性
  - 频率: 每周或每次重要变更后
  - 检查内容: 文档间的一致性和引用正确性
  - 修正机制: 发现问题时的自动修正或通知

**质疑记录**: 建立质疑案例库改进流程
  - 记录内容: 质疑的详细内容和处理过程
  - 分析机制: 定期分析质疑案例的模式
  - 改进措施: 基于分析结果改进流程和机制
```

#### **🆕 5.3 自动化推进重点详细策略**
基于Mock API稳定化的自动化优化策略：

##### **前端测试自动化优先级详细规划**
```markdown
# 前端测试自动化优先级 (详细版)
- **第一优先级**: 核心UI组件单元测试（React Testing Library + Jest）
  - 覆盖范围: 所有核心业务组件
  - 测试内容: 组件渲染、用户交互、状态变更
  - 质量标准: 覆盖率≥80%，测试用例质量高

- **第二优先级**: 关键用户流程E2E测试（Playwright/Cypress，运行在Mock环境）
  - 覆盖范围: 主要用户业务流程
  - 测试环境: 稳定的Mock API环境
  - 质量标准: 关键流程100%覆盖

- **第三优先级**: 视觉回归测试（如Storybook + Chromatic）
  - 覆盖范围: 重要的UI组件和页面
  - 测试内容: 视觉一致性和回归检测
  - 质量标准: 视觉变更的自动检测和审核

- **第四优先级**: 性能测试和可访问性测试
  - 性能测试: 页面加载时间、交互响应时间
  - 可访问性测试: WCAG标准符合性检查
  - 质量标准: 性能指标达标，可访问性合规
```

##### **CI/CD集成策略详细实施**
```markdown
# CI/CD集成策略 (详细版)
- **门禁设置**: 将前端自动化测试作为代码合并和版本发布的强制门禁
  - 合并门禁: 代码合并前必须通过所有自动化测试
  - 发布门禁: 版本发布前必须通过完整的测试套件
  - 例外机制: 紧急情况下的例外处理流程

- **并行执行**: 合理配置测试并行度，在保证稳定性的前提下优化执行时间
  - 并行策略: 按测试类型和依赖关系配置并行执行
  - 资源管理: 合理分配CI/CD资源，避免资源竞争
  - 稳定性保证: 确保并行执行不影响测试结果的准确性

- **失败处理**: 建立测试失败的快速定位和修复机制
  - 失败通知: 及时通知相关人员测试失败情况
  - 问题定位: 提供详细的失败信息和调试指引
  - 修复流程: 建立快速修复和重新验证的流程

- **报告生成**: 自动生成测试报告和覆盖率报告，便于质量监控
  - 报告内容: 详细的测试结果、覆盖率、性能指标
  - 报告格式: 易于阅读和分析的报告格式
  - 历史对比: 提供历史数据对比和趋势分析
```

##### **Mock环境自动化管理详细实施**
```markdown
# Mock环境自动化管理 (详细版)
- **环境一致性**: 确保CI/CD环境中的Mock配置与本地开发环境一致
  - 配置同步: 建立Mock配置的同步机制
  - 版本管理: Mock配置的版本控制和管理
  - 一致性检查: 定期检查环境间的一致性

- **数据更新**: 建立Mock数据的版本管理和自动更新机制
  - 数据版本: Mock数据的版本控制和标记
  - 更新策略: 自动或手动的数据更新策略
  - 回滚机制: 数据更新失败时的回滚机制

- **健康监控**: 自动监控Mock服务状态，及时发现和解决问题
  - 监控指标: Mock服务的可用性、响应时间、错误率
  - 告警机制: 异常情况的自动告警和通知
  - 自动恢复: 简单问题的自动恢复机制
```

## 🚨 **防止过度乐观的核心机制详细说明**

### **验证门禁制度详细标准**

#### **完成度评估标准详细定义**
```bash
# 完成度评估标准 (详细版)
**0-25%**: 任务规划完成，开始开发
  - 任务文档完整，验收标准明确
  - 技术方案确定，风险评估完成
  - 开发环境准备就绪

**25-50%**: 核心代码完成，部分验证通过
  - 主要功能模块代码完成
  - 基础验证（TypeScript、构建）通过
  - 单元测试部分完成

**50-75%**: 主要功能完成，多数验证通过
  - 所有功能模块代码完成
  - 4层验证中至少3层通过
  - 集成测试大部分完成

**75-95%**: 所有功能完成，5层验证全部通过
  - 功能开发完全完成
  - 5层验证标准全部通过
  - 文档更新完成

**95-100%**: 用户验收测试通过，文档完整
  - 用户验收测试通过
  - 所有文档更新完成
  - 部署和发布准备就绪
```

### **状态声明限制详细规范**

#### **严禁的状态声明模式详细说明**
```bash
# 严禁的状态声明模式 (详细版)
❌ **基于理论分析的完成度**
  - 不能基于"代码看起来正确"进行状态声明
  - 不能基于"理论上应该工作"进行评估
  - 必须基于实际运行和验证结果

❌ **基于部分成功的整体评估**
  - 不能因为部分功能正常就声称整体完成
  - 不能忽视失败的验证层级
  - 必须所有验证层级都通过才能声称完成

❌ **跳过验证层级的状态更新**
  - 不能跳过任何验证层级
  - 不能因为时间紧迫而省略验证步骤
  - 必须按照标准流程执行所有验证

❌ **忽视测试失败的"完成"声明**
  - 不能在测试失败的情况下声称完成
  - 不能将测试失败归因于环境问题而忽视
  - 必须解决所有测试失败才能声称完成

❌ **不基于验证脚本结果的报告**
  - 不能基于主观判断进行状态报告
  - 不能忽视验证脚本的输出结果
  - 必须完全基于验证脚本结果进行报告
```

## 📋 **标准化工作清单模板详细说明**

### **任务启动清单详细版本**
```markdown
## 任务启动检查表 (详细版)
- [ ] **阅读相关docs文档 (根据任务类型)**
  - 确认已阅读所有必需的文档
  - 理解文档中的关键信息和约束
  - 记录文档中的重要参考信息

- [ ] **确认任务是否已存在，避免重复创建**
  - 搜索现有任务文件
  - 确认没有重复或相似任务
  - 如有相关任务，明确关系和依赖

- [ ] **明确技术验收标准 (5层验证)**
  - 理解5层验证的具体要求
  - 确认验证环境和工具的可用性
  - 预估验证工作量和时间

- [ ] **选择正确的API规则 (如适用)**
  - 根据任务类型选择合适的API规则
  - 确认规则的适用性和正确性
  - 理解规则的具体要求和约束

- [ ] **创建任务验证脚本目录**
  - 按照标准命名创建验证脚本目录
  - 准备验证脚本的基础结构
  - 确认脚本的可执行性和环境要求

- [ ] **更新目录结构文档**
  - 如有新文件或目录创建，更新目录结构文档
  - 在变更日志中记录目录结构变更
  - 确保文档的准确性和一致性
```

### **开发过程清单详细版本**
```markdown
## 开发过程检查表 (详细版)
- [ ] **遵循推荐技术栈标准**
  - 使用项目规定的技术栈和工具
  - 遵循编码规范和最佳实践
  - 确保技术选择的一致性

- [ ] **实时记录代码变更 (变更记录表格)**
  - 每次代码修改都记录到变更表格
  - 包含文件路径、修改类型、说明、时间戳
  - 评估修改对系统其他部分的影响

- [ ] **遵循UI设计系统规范 (如适用)**
  - 使用统一的UI设计系统和组件库
  - 遵循设计规范和交互标准
  - 确保用户体验的一致性

- [ ] **同步更新相关文档**
  - 及时更新与代码变更相关的文档
  - 确保文档与实现的一致性
  - 记录重要的设计决策和变更原因

- [ ] **定期执行基础验证 (tsc, build, lint)**
  - 定期运行TypeScript类型检查
  - 确保项目构建成功
  - 运行代码质量检查工具
```

### **验证完成清单详细版本**
```markdown
## 验证完成检查表 (详细版)
- [ ] **创建完整的comprehensive-validation.js脚本**
  - 脚本包含所有必需的验证步骤
  - 脚本能够自动化执行并生成报告
  - 脚本包含适当的错误处理和诊断信息

- [ ] **执行完整5层验证标准**
  - TypeScript验证100%通过
  - 构建验证100%通过
  - 代码质量验证95%以上通过
  - 测试验证95%以上通过
  - 集成验证100%通过

- [ ] **所有验证层级100%通过**
  - 确认每个验证层级都达到要求的通过率
  - 解决所有验证失败的问题
  - 确保验证结果的可靠性

- [ ] **生成验证报告并保存**
  - 生成详细的验证报告
  - 保存报告到指定位置
  - 确保报告的完整性和可读性

- [ ] **更新任务状态为"已验证"**
  - 在任务文档中更新状态
  - 记录验证完成的时间和结果
  - 添加必要的总结和说明

- [ ] **修正所有相关文档状态**
  - 更新所有相关文档的状态信息
  - 确保文档间的一致性
  - 记录状态变更的原因和依据

- [ ] **🎯 目录结构同步检查 (project-management-auto)**
  - [ ] **如有新增文件/目录，已更新 DIRECTORY_STRUCTURE.md**
    - 确认目录结构文档反映最新状态
    - 检查目录树结构的准确性
    - 验证文件路径的正确性
  
  - [ ] **已在 docs/directory-structure-changelog.md 记录变更历史**
    - 记录变更的时间和原因
    - 描述具体的变更内容
    - 评估变更的影响范围
  
  - [ ] **变更记录包含：原因、影响评估、详细变更内容**
    - 说明变更的业务或技术原因
    - 评估对项目其他部分的影响
    - 提供详细的变更内容描述
```

## 🎯 **最佳实践工作顺序详细说明**

### **日常开发工作流详细步骤**
```bash
# 日常开发工作流 (详细版)
1. **晨间检查**: 查看权威文档状态 (refactor/REFACTOR_LOG.md)
   - 了解项目最新状态和进展
   - 识别可能影响当日工作的变更
   - 确认当日工作的优先级和依赖

2. **任务选择**: 根据优先级选择下一个任务
   - 评估任务的紧急程度和重要性
   - 考虑任务间的依赖关系
   - 确认任务的可行性和资源需求

3. **文档阅读**: 按任务类型阅读必需docs
   - 根据任务类型确定必读文档
   - 仔细阅读并理解文档内容
   - 记录关键信息和约束条件

4. **开发实施**: 遵循技术栈标准进行开发
   - 使用项目规定的技术栈和工具
   - 遵循编码规范和最佳实践
   - 确保代码质量和可维护性

5. **实时记录**: 每次代码修改记录到变更表格
   - 及时记录每次代码变更
   - 包含详细的变更信息和影响评估
   - 确保变更记录的完整性和准确性

6. **阶段验证**: 定期执行基础验证 (tsc, build, lint)
   - 定期运行基础验证工具
   - 及时发现和解决基础问题
   - 确保代码的基本质量

7. **完整验证**: 功能完成后执行5层验证
   - 执行完整的5层验证标准
   - 确保所有验证层级都通过
   - 生成详细的验证报告

8. **状态更新**: 基于验证结果更新权威文档
   - 根据验证结果更新项目状态
   - 确保状态信息的准确性
   - 记录状态变更的依据

9. **文档同步**: 确保所有引用文档一致性
   - 检查所有相关文档的一致性
   - 更新引用关系和链接
   - 确保信息的同步和准确

10. **质量回顾**: 检查是否遵循所有相关规则
    - 回顾工作过程中的规则遵循情况
    - 识别可能的改进点
    - 记录经验和教训
```

### **紧急问题处理流程详细步骤**
```bash
# 紧急问题处理流程 (详细版)
1. **问题识别**: 用户质疑或验证失败
   - 快速识别问题的性质和严重程度
   - 确认问题的影响范围
   - 评估问题的紧急程度

2. **立即停止**: 停止基于理论的状态声明
   - 停止所有基于理论分析的状态更新
   - 承认当前评估可能存在问题
   - 准备基于实际验证重新评估

3. **完整验证**: 运行comprehensive-validation.js
   - 执行完整的验证脚本
   - 记录所有验证过程和结果
   - 确保验证环境的准确性

4. **如实报告**: 100%基于验证结果回应
   - 完全基于验证脚本的实际输出
   - 不添加主观判断或理论分析
   - 提供具体的数据和证据

5. **状态修正**: 立即修正所有相关文档
   - 识别所有需要修正的文档
   - 按照实际验证结果修正状态
   - 确保所有文档的一致性

6. **根因分析**: 分析过度乐观的根本原因
   - 深入分析问题的根本原因
   - 识别流程中的薄弱环节
   - 确定改进的方向和重点

7. **机制改进**: 建立防范类似问题的机制
   - 制定预防类似问题的措施
   - 改进现有的流程和机制
   - 建立更有效的检查和验证机制

8. **案例记录**: 记录到改进案例库
   - 详细记录问题和处理过程
   - 分析经验和教训
   - 为未来类似问题提供参考
```

---

**文档维护信息**：
- **迁移来源**：comprehensive-development-workflow-auto.mdc
- **迁移日期**：2025-02-02
- **完整性**：100%内容保持，大幅增加详细说明和操作指导
- **引用方式**：被 development-management-unified.mdc 主控规则引用





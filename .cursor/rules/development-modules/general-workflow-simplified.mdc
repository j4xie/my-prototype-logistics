---
description: 
globs: 
alwaysApply: false
---
---
description: 一般开发3阶段简化工作流程 - 常规功能开发、组件开发、bug修复时 - 需要快速启动和高效执行时 - 借鉴Phase-3成功经验的简化流程时 - 2-3分钟快速启动确认
globs: 
alwaysApply: false
---

# 一般开发3阶段简化工作流程

<!-- created: 2025-02-02 -->
<!-- derived-from: Phase-3成功经验 + 5阶段详细流程精简 -->
<!-- authority: 3阶段简化流程专用规范，被主控规则引用 -->
<!-- compatible-with: development-modules/workflow-procedures-detailed.mdc -->

## 🎯 **核心设计理念**

### **借鉴Phase-3成功经验**
- **快速启动机制** → 2-3分钟完成任务启动确认，减少决策疲劳
- **实时状态更新** → 开发过程中及时记录变更和问题
- **强制验证标准** → 基于实际功能验证的完成度确认
- **简化文档流程** → 重点关注关键文档，避免过度文档化

### **3阶段 vs 5阶段对比**

| 维度 | 3阶段简化流程 | 5阶段详细流程 |
|------|-------------|-------------|
| **适用场景** | 常规功能开发、组件开发、bug修复 | 复杂重构、架构变更、大型功能 |
| **启动时间** | 2-3分钟快速启动 | 10-15分钟详细规划 |
| **文档要求** | 重点文档 + 实时记录 | 完整文档体系 + 详细规划 |
| **验证标准** | 5层验证 + 回归测试 | 5层验证 + 全面测试覆盖 |
| **状态管理** | 简化状态 + 关键节点记录 | 详细状态 + 完整跟踪 |

## 🚀 **Stage 1 - 任务启动确认** (目标：2-3分钟完成)

### **1.1 快速文档阅读检查** ⚡

#### **智能文档映射** (30秒确定必读文档)
```bash
# 快速任务类型识别 → 对应必读文档
□ **前端组件开发**:
  → docs/components/ 相关文档 (UI规范、组件设计)
  → UI设计系统规范 (Neo Minimal iOS-Style)

□ **API集成任务**:
  → docs/api/ 相关文档 (接口规范)
  → api-rules-usage-guide-manual (快速规则选择)

□ **功能重构任务**:
  → 项目重构方案.md (架构约束)
  → refactor/相关阶段文档 (重构规范)

□ **Bug修复任务**:
  → 相关功能文档 (问题上下文)
  → 回归测试要求 (防止重现)

□ **新功能开发**:
  → 相关PRD文档 (需求理解)
  → 架构设计文档 (技术约束)
```

#### **快速阅读验证** (1分钟确认)
- ✅ **关键约束提取**: 提取影响当前任务的关键约束和要求
- ✅ **依赖识别**: 识别技术依赖、API依赖、组件依赖
- ✅ **风险评估**: 快速识别潜在技术风险和实施难点

### **1.2 任务创建与验收标准确认** ⚡

#### **快速任务创建** (1分钟)
```markdown
# 任务创建快速清单
□ **命名规范**: TASK-XXX_简明描述.md
□ **核心验收**: 明确1-3个核心验收标准
□ **技术验证**: 确认基于5层验证的技术标准
□ **时间预估**: 粗略预估开发和验证时间
```

#### **验收标准快速确认** (结果导向)
```markdown
# 验收标准模板 (简化版)
**功能验收**:
- [ ] 核心功能正常工作
- [ ] 主要用户流程可用
- [ ] 关键边缘情况处理

**技术验收** (基于5层验证):
- [ ] TypeScript类型检查通过
- [ ] Build构建成功无警告
- [ ] Lint代码检查通过
- [ ] 单元测试覆盖核心逻辑
- [ ] 集成测试验证主流程

**文档验收**:
- [ ] 关键变更记录在案
- [ ] 目录结构文档同步 (如有新增)
```

### **1.3 依赖分析与策略确认** ⚡

#### **关键依赖快速分析** (30秒)
```markdown
# 依赖分析快速清单
□ **API依赖**: 
  → 需要的API端点 + 现有Mock覆盖情况
  → Mock策略: 复用现有 / 新增Mock / 修改Mock

□ **组件依赖**: 
  → 依赖的现有组件 + 需要新建的组件
  → 组件版本兼容性 + UI规范遵循

□ **工具链依赖**: 
  → 构建工具、测试工具、部署工具
  → 版本兼容性 + 配置要求
```

#### **策略快速决策** (30秒)
- **API策略**: 优先复用现有Mock，必要时快速新增
- **组件策略**: 基于现有UI系统，遵循设计规范
- **测试策略**: 重点测试核心逻辑，快速验证主流程

### **📋 Stage 1 完成检查清单**
```markdown
□ **文档阅读完成** - 关键约束和依赖已识别
□ **任务创建完成** - 验收标准明确且可验证
□ **依赖策略确定** - API、组件、工具链策略明确
□ **开发环境就绪** - 必要的开发和测试环境已准备
□ **预期时间确认** - 开发和验证时间预估合理

**时间检查**: ✅ Stage 1 总时间 ≤ 3分钟
```

## 💻 **Stage 2 - 开发执行** (主要工作时间)

### **2.1 基于5层验证的开发节奏** 🔄

#### **开发 + 验证并行模式**
```bash
# 推荐开发节奏 (每30-60分钟一个小循环)
1. **编码实现** (20-40分钟)
   → 实现一个小功能模块或组件

2. **即时验证** (10-20分钟)
   → TypeScript检查 + Build验证 + 基础测试

3. **进度记录** (1-2分钟)
   → 记录完成内容 + 遇到问题 + 下步计划

4. **问题处理** (如需要)
   → 立即处理发现的问题，避免技术债务积累
```

#### **5层验证实时执行**
```markdown
# 5层验证 - 实时执行版本
**Layer 1 - TypeScript验证** (每次提交前)
- [ ] 类型定义正确，无类型错误
- [ ] 接口和类型导入导出正确
- [ ] 泛型使用合理，类型推导正确

**Layer 2 - Build验证** (每个功能完成后)
- [ ] 本地构建成功，无构建错误
- [ ] 资源文件正确打包
- [ ] 依赖关系正确解析

**Layer 3 - Lint验证** (每次提交前)
- [ ] 代码风格符合项目规范
- [ ] 无明显代码质量问题
- [ ] 导入导出规范正确

**Layer 4 - 单元测试** (核心逻辑完成后)
- [ ] 关键函数和组件有单元测试
- [ ] 测试覆盖主要逻辑分支
- [ ] 测试用例有意义且可维护

**Layer 5 - 集成测试** (功能模块完成后)
- [ ] 主要用户流程可以正常执行
- [ ] 组件间集成正常
- [ ] API集成测试通过 (如适用)
```

### **2.2 架构规范遵循** 📐

#### **UI设计系统自动遵循**
```typescript
# UI组件开发标准快速检查
□ **布局规范**: max-w-[390px] mx-auto (移动优先)
□ **卡片设计**: bg-white rounded-lg shadow-sm p-4
□ **交互反馈**: hover:shadow-md hover:scale-[1.03]
□ **无障碍性**: aria-label, tabindex, 语义化标签
□ **响应式**: 移动优先，适配不同屏幕尺寸
```

#### **项目重构方案遵循**
```markdown
# 重构规范快速检查
□ **模块化**: 功能按模块组织，职责单一
□ **依赖管理**: 循环依赖避免，依赖关系清晰
□ **API设计**: RESTful规范，接口设计一致
□ **数据流**: 状态管理规范，数据流向清晰
□ **错误处理**: 统一错误处理机制
```

### **2.3 实时变更记录机制** 📝

#### **简化变更记录**
```markdown
# 变更记录模板 (实时更新)
## 当前任务: TASK-XXX_描述

### 已完成变更
- [时间] 功能描述 - 涉及文件 - 状态
- [09:30] 完成用户组件基础结构 - UserProfile.tsx - ✅ 
- [10:15] 实现API集成逻辑 - useUserApi.ts - ✅
- [11:00] 添加错误处理 - ErrorBoundary.tsx - ✅

### 遇到问题
- [时间] 问题描述 - 解决方案 - 状态
- [10:45] API响应格式不匹配 - 添加数据转换层 - ✅ 已解决

### 下一步计划
- [ ] 添加用户交互测试
- [ ] 完善错误场景处理
- [ ] 集成测试验证
```

#### **关键节点状态更新**
```bash
# 关键节点自动触发状态更新
□ **首次运行成功** → 记录基础功能就绪
□ **API集成完成** → 记录数据流通路验证
□ **主流程验证完成** → 记录核心功能可用
□ **异常处理完成** → 记录错误场景覆盖
□ **5层验证通过** → 记录技术验收就绪
```

## ✅ **Stage 3 - 任务完成确认** (目标：5-10分钟)

### **3.1 完整验证执行** 🔍

#### **5层验证 + 回归测试强制执行**
```markdown
# 完整验证检查清单 (强制执行)
**技术验证** (必须100%通过):
- [ ] **TypeScript**: 全量类型检查，0错误0警告
- [ ] **Build**: 生产环境构建成功，无警告
- [ ] **Lint**: 代码质量检查通过，符合项目规范
- [ ] **Unit Test**: 单元测试覆盖率达标，测试通过
- [ ] **Integration**: 集成测试通过，主流程验证

**功能验证** (用户视角):
- [ ] **核心功能**: 主要功能按预期工作
- [ ] **用户流程**: 关键用户流程正常
- [ ] **边缘情况**: 异常情况得到正确处理
- [ ] **性能表现**: 响应时间在可接受范围内

**回归测试** (防止破坏现有功能):
- [ ] **相关功能**: 相关现有功能未受影响
- [ ] **集成点**: 集成点功能正常
- [ ] **构建流程**: 整体构建和部署流程正常
```

#### **问题发现处理机制**
```markdown
# 验证问题处理标准
**如发现问题**:
1. **立即停止完成标记** - 不允许带问题完成
2. **问题分类处理**:
   - 🚨 **阻塞问题**: 必须修复才能完成
   - ⚠️ **优化问题**: 记录技术债务，后续处理
   - 📝 **文档问题**: 立即补充完善
3. **修复验证循环** - 修复后重新执行验证
4. **问题根因分析** - 记录问题原因，避免重复
```

### **3.2 文档同步更新** 📚

#### **强制文档同步清单**
```markdown
# 文档同步检查 (必须完成)
□ **目录结构更新** (如有新增文件/目录):
  → 更新 DIRECTORY_STRUCTURE.md 实际目录树
  → 记录 docs/directory-structure-changelog.md 变更历史

□ **任务状态文档**:
  → 任务文件中标记 "✅ 已完成"
  → 记录完成时间和验证结果
  → 添加任务完成总结

□ **变更记录归档**:
  → 整理开发过程中的变更记录
  → 记录重要决策和解决方案
  → 归档到相应的变更日志文件

□ **相关文档更新** (如适用):
  → API文档更新 (如有接口变更)
  → 组件文档更新 (如有新组件)
  → 配置文档更新 (如有配置变更)
```

#### **文档质量检查**
```markdown
# 文档质量标准
□ **准确性**: 文档内容与实际实现一致
□ **完整性**: 关键变更都有记录
□ **可读性**: 文档结构清晰，便于查阅
□ **时效性**: 文档更新及时，信息最新
```

### **3.3 状态标记完成** 🎯

#### **技术验收确认**
```markdown
# 技术验收确认标准
**验收负责人**: 开发者自验收 + 代码审查 (如适用)

**验收内容**:
□ **功能完整性**: 所有验收标准已满足
□ **技术质量**: 5层验证全部通过
□ **文档完整性**: 相关文档已同步更新
□ **回归安全性**: 未引入新的问题或风险

**验收记录**:
- 验收时间: [YYYY-MM-DD HH:mm]
- 验收结果: ✅ 通过 / ❌ 需要修复
- 验收备注: [关键验证点和注意事项]
```

#### **最终状态标记**
```markdown
# 任务完成状态标记
## 任务: TASK-XXX_描述

### 完成状态
- ✅ **开发完成**: [完成时间]
- ✅ **验证通过**: [验证时间] 
- ✅ **文档同步**: [更新时间]
- ✅ **技术验收**: [验收时间]

### 完成总结
**主要成果**:
- 实现功能: [核心功能描述]
- 技术选型: [关键技术决策]
- 性能表现: [性能指标]

**解决的问题**:
- [问题1] - [解决方案1]
- [问题2] - [解决方案2]

**技术债务** (如有):
- [债务描述] - [影响评估] - [处理计划]

**经验总结**:
- [关键经验和改进建议]
```

### **📋 Stage 3 完成检查清单**
```markdown
□ **5层验证通过** - 技术质量确认
□ **回归测试通过** - 无破坏性影响
□ **功能验证完成** - 用户体验确认
□ **文档同步完成** - 信息一致性保证
□ **状态标记完成** - 任务正式完成

**时间检查**: ✅ Stage 3 总时间 ≤ 10分钟
**质量检查**: ✅ 所有验证项目100%通过
```

## 🔄 **与5阶段详细流程的兼容性**

### **流程选择指导**
```markdown
# 何时使用3阶段 vs 5阶段
**使用3阶段简化流程**:
- ✅ 常规功能开发 (预估 < 2天)
- ✅ 组件开发和UI任务
- ✅ Bug修复和小型重构
- ✅ 需要快速交付的任务
- ✅ 熟悉的技术栈和领域

**使用5阶段详细流程**:
- ✅ 复杂架构变更 (预估 > 2天)
- ✅ 新技术栈引入
- ✅ 大型功能开发
- ✅ 多人协作任务
- ✅ 高风险或关键任务
```

### **流程间的无缝切换**
```markdown
# 流程升级/降级机制
**3阶段 → 5阶段** (任务复杂度增加):
- Stage 1 → 阶段1 (任务启动与规划)
- Stage 2 → 阶段2+3 (开发与实施 + 验证与测试)
- Stage 3 → 阶段4+5 (交付与部署 + 维护与优化)

**5阶段 → 3阶段** (任务简化):
- 阶段1+2 → Stage 1 (快速启动)
- 阶段3 → Stage 2 (开发执行)
- 阶段4+5 → Stage 3 (完成确认)
```

## 📊 **成功指标和改进机制**

### **效率指标**
- **启动时间**: Stage 1 平均时间 ≤ 3分钟
- **完成时间**: Stage 3 平均时间 ≤ 10分钟
- **总体效率**: 相比5阶段流程提升20-30%的执行效率

### **质量指标**
- **验证通过率**: 5层验证首次通过率 ≥ 90%
- **回归问题率**: 任务完成后回归问题发生率 ≤ 5%
- **文档一致性**: 文档与实现一致性 ≥ 95%

### **持续改进**
- **流程反馈**: 每个任务完成后收集流程改进建议
- **模板优化**: 根据使用经验不断优化模板和检查清单
- **工具支持**: 开发工具和脚本支持流程自动化

---

**维护信息**：
- **创建日期**：2025-02-02
- **兼容版本**：development-modules/workflow-procedures-detailed.mdc v1.0+


- **下次更新**：根据实际使用效果优化3阶段流程细节
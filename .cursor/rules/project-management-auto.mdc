---
description: 项目管理与文档规范 - 修改项目文档时 - 更新README或任务列表时 - 管理重构阶段文档时 - 确保文档一致性和变更记录完整性
globs: docs/**/*.md, *.md, refactor/**/*.md, TASKS.md, README.md
alwaysApply: false
---
# 项目管理与文档规范

## 使用场景
- 修改项目文档时
- 更新README或任务列表时
- 管理重构阶段文档时

## 🚨 **项目管理质量控制规则** (基于实际问题经验)

### **任务完成度报告真实性** (杜绝虚假进度)
- ❌ **严禁基于预期的完成度报告**: 任务状态必须基于实际验证结果
- ✅ **技术验证优先**: 声称"100%完成"前必须通过技术验收标准
- ✅ **问题透明化**: 发现技术债务或构建问题必须立即如实记录
- ✅ **状态及时修正**: 发现虚假完成度立即修正所有相关文档

### **任务验收标准强制执行**
```markdown
## 任务完成标准 (必须100%满足)

### 技术标准
- [ ] npm run build 成功
- [ ] npm run dev 成功  
- [ ] TypeScript编译0错误
- [ ] ESLint检查通过
- [ ] 所有导入都被使用
- [ ] 所有变量都被使用
- [ ] 所有函数都有实现体

### 功能标准
- [ ] 核心功能经过测试验证
- [ ] 错误处理机制正常
- [ ] 性能符合预期
- [ ] 文档与实现一致

### 质量标准
- [ ] 代码review通过
- [ ] 符合项目编码规范
- [ ] 无明显技术债务
- [ ] 向后兼容性保证
```

### **架构变更管理规范**
- **完整性原则**: 删除模块必须立即创建替代方案，不留空白期
- **配置文件完整性**: 确保删除后重新填充必要配置
- [ ] **依赖链修复**: 修复所有导入错误和模块引用
- [ ] **渐进式变更**: 避免一次性删除过多依赖

### **架构决策影响跟踪机制** (基于Phase-3问题经验)
```markdown
## 重大架构决策记录模板

### 决策基本信息
- **决策日期**: YYYY-MM-DD
- **决策类型**: [架构简化/技术栈迁移/模块重构/依赖变更]
- **决策者**: [项目角色]
- **影响范围**: [影响的模块、文件、功能]

### 决策内容与动机
- **决策描述**: 具体的架构变更内容
- **动机说明**: 为什么做出这个决策
- **替代方案**: 考虑过的其他选择及其被拒绝的原因

### 影响评估与预期
- **短期影响**: 立即的代码变更和功能影响
- **长期影响**: 可维护性、扩展性、性能影响
- **技术债务成本**: 量化的债务评估（工时、复杂度、风险）
- **风险评估**: 可能出现的问题和缓解策略

### 执行后跟踪
- **实际影响**: 决策执行后的真实影响记录
- **未预见问题**: 执行过程中发现的新问题
- **修正措施**: 针对问题采取的修正行动
- **经验教训**: 从这个决策中学到的经验
```

### **技术债务累积效应管理**
```bash
# 技术债务评估矩阵
影响级别 | 复杂度 | 优先级 | 建议行动
---------|--------|--------|----------
高影响   | 高复杂 | P0     | 立即解决，分配专门资源
高影响   | 低复杂 | P1     | 当前迭代内解决
低影响   | 高复杂 | P2     | 规划到下一阶段解决  
低影响   | 低复杂 | P3     | 持续改进中解决

# 累积效应预警指标
- 🚨 **红色预警**: 3个以上P0级技术债务同时存在
- 🟡 **黄色预警**: P1级债务超过当前迭代处理能力
- 🟢 **绿色状态**: 技术债务在可控范围内

# 决策后果回顾机制
- **周期性回顾**: 每个阶段结束时回顾重大决策效果
- **问题溯源**: 发现问题时追溯到相关决策点
- **决策优化**: 基于实际效果优化未来决策流程
```

### **防止过度乐观的项目状态管理**
- **实证状态更新**: 所有项目状态更新必须基于实际验证结果
- **问题透明化**: 及时暴露和记录发现的问题，不隐瞒技术债务
- **状态修正机制**: 发现状态错误时立即修正所有相关文档和记录
- **用户反馈整合**: 将用户质疑作为状态验证的重要输入

### **Phase-3专用项目管理规范** (单一权威来源)
```markdown
## Phase-3状态管理特殊要求

### **文档层次结构 (严格遵循)**
1. **单一权威**: refactor/phase-3/PHASE-3-MASTER-STATUS.md
   - 核心状态概览、任务状态、验证结果
   - 快速状态查询、AI使用指导
   - 所有状态变更的第一记录点

2. **详细文档**: 通过MASTER-STATUS引用
   - PHASE-3-EMERGENCY-ASSESSMENT.md (技术细节)
   - TASK-P3-016A-真实状态追踪.md (任务详情)  
   - PHASE-3-PLANNING.md (完整规划)
   - PHASE-3-WORK-PLAN.md (工作计划)

### **状态更新协议 (防止信息分散)**
1. **更新顺序**: 
   - 第一步: 更新PHASE-3-MASTER-STATUS.md
   - 第二步: 更新具体详细文档
   - 第三步: 确保引用关系一致

2. **更新触发条件**:
   - 任务状态重大变化 (P0问题修复)
   - 整体完成度变化超过5%
   - 用户质疑或验证失败
   - 新任务开始或完成

3. **禁止操作**:
   - ❌ 直接修改详细文档状态而不更新MASTER-STATUS
   - ❌ 在多个文档中维护不同的完成度信息
   - ❌ 基于理论分析更新状态而无验证依据

### **AI上下文优化原则**
- **单点读取**: AI优先读取PHASE-3-MASTER-STATUS.md获取状态
- **减少负担**: 避免同时读取多个Phase-3详细文档
- **按需深入**: 通过引用链接获取具体技术细节
- **状态一致**: 确保所有文档的状态信息保持一致
```

## 关键规则
- 所有对 @docs 的修改必须参考最新的 README.md，保持模块、页面、功能描述一致
- 修改文档前，需先明确修改目的（补充说明/修正错误/同步更新等），并在文档顶部用 `<!-- updated for: xxx -->` 标记
- 所有任务生成必须遵循 task-management-manual.mdc 中定义的任务命名、分类和描述规范（含时间、责任人可选）
- 历史变更记录（如 changelog、历史设计思路、接口变更过程）不得删除，仅允许增加注释或打标记
- 如果 README.md 与 @docs 内容冲突，以 README 为准，并同时在 @docs 中记录冲突点与处理方式
- 不允许主观性大改（如重构文档结构或大范围内容调整），除非已有明确任务需求或在 task-list 中记录
- 所有自动生成的改动建议必须先以列表形式展示给用户确认，不得直接应用
- **任何目录结构变更都必须同步更新目录结构文档**：
  - 更新 [DIRECTORY_STRUCTURE.md](mdc:DIRECTORY_STRUCTURE.md) 保持当前最新目录结构（仅包含：1.根目录结构、2.web-app目录结构、3.目录结构说明表格）
  - 在 [docs/directory-structure-changelog.md](mdc:docs/directory-structure-changelog.md) 记录变更历史（包含：历史更新记录、进展说明、变更详情）

## 文档更新流程
1. 确认修改目的和范围
2. 检查 README.md 作为权威参考
3. 在文档顶部添加更新标记
4. 进行必要的内容修改
5. 记录变更历史，不删除原有记录
6. 如有冲突，记录冲突点和解决方案

## 任务管理规范
- 任务文件命名：`TASK-XXX_任务描述.md`
- 任务状态：待开始 → 进行中 → 已完成 → 已验证
- 必须包含：任务描述、验收标准、变更记录表格
- 完成任务后添加"Done"标记和两行总结

## 示例
<example>
  **正确的文档更新流程**：
  ```markdown
  <!-- updated for: 同步API接口变更 -->
  # 模块文档
  
  ## 变更历史
  - 2024-01-15: 原始版本
  - 2024-01-20: 更新API接口说明 (本次更新)
  
  ## API接口
  根据 README.md 第3.2节，更新接口描述...
  ```
  
  **任务文件示例**：
  ```markdown
  # TASK-005_代码模块化改造
  
  ## 任务状态
  进行中
  
  ## 变更记录
  | 文件路径 | 修改类型 | 说明 |
  |---------|---------|------|
  | src/components/auth/ | 新增 | 认证模块组件 |
  ```
</example>

<example type="invalid">
  **错误的文档管理方式**：
  ```markdown
  # 模块文档 (删除了原有的变更历史)
  
  完全重写了文档内容，没有参考README.md
  没有添加更新标记
  直接删除了历史版本信息
  ```
  
  **错误的任务管理**：
  - 创建重复的任务文件而不使用现有的TASK-005
  - 修改代码但不在变更记录表格中记录
  - 完成任务但不更新状态和添加总结
</example>















---
description: 
globs: docs/**/*.md,**/*.md,README.md,TASKS.md,refactor/**/*.md
alwaysApply: false
---
---
description: 项目管理与文档规范 - 修改项目文档时 - 更新README或任务列表时 - 管理重构阶段文档时 - 确保文档一致性和变更记录完整性
globs: docs/**/*.md, *.md, refactor/**/*.md, TASKS.md, README.md
alwaysApply: false
---

# 项目管理与文档规范

## 使用场景
- 修改项目文档时
- 更新README或任务列表时
- 管理重构阶段文档时

## 关键规则
- 所有对 @docs 的修改必须参考最新的 README.md，保持模块、页面、功能描述一致
- 修改文档前，需先明确修改目的（补充说明/修正错误/同步更新等），并在文档顶部用 `<!-- updated for: xxx -->` 标记
- 所有任务生成必须遵循 @tak-list.mdc 中定义的任务命名、分类和描述规范（含时间、责任人可选）
- 历史变更记录（如 changelog、历史设计思路、接口变更过程）不得删除，仅允许增加注释或打标记
- 如果 README.md 与 @docs 内容冲突，以 README 为准，并同时在 @docs 中记录冲突点与处理方式
- 不允许主观性大改（如重构文档结构或大范围内容调整），除非已有明确任务需求或在 task-list 中记录
- 所有自动生成的改动建议必须先以列表形式展示给用户确认，不得直接应用
- **任何目录结构变更都必须同步更新目录结构文档**：
  - 更新 [DIRECTORY_STRUCTURE.md](mdc:DIRECTORY_STRUCTURE.md) 保持当前最新目录结构（仅包含：1.根目录结构、2.web-app目录结构、3.目录结构说明表格）
  - 在 [docs/directory-structure-changelog.md](mdc:docs/directory-structure-changelog.md) 记录变更历史（包含：历史更新记录、进展说明、变更详情）

## 文档更新流程
1. 确认修改目的和范围
2. 检查 README.md 作为权威参考
3. 在文档顶部添加更新标记
4. 进行必要的内容修改
5. 记录变更历史，不删除原有记录
6. 如有冲突，记录冲突点和解决方案

## 任务管理规范
- 任务文件命名：`TASK-XXX_任务描述.md`
- 任务状态：待开始 → 进行中 → 已完成 → 已验证
- 必须包含：任务描述、验收标准、变更记录表格
- 完成任务后添加"Done"标记和两行总结

## 示例
<example>
  **正确的文档更新流程**：
  ```markdown
  <!-- updated for: 同步API接口变更 -->
  # 模块文档
  
  ## 变更历史
  - 2024-01-15: 原始版本
  - 2024-01-20: 更新API接口说明 (本次更新)
  
  ## API接口
  根据 README.md 第3.2节，更新接口描述...
  ```
  
  **任务文件示例**：
  ```markdown
  # TASK-005_代码模块化改造
  
  ## 任务状态
  进行中
  
  ## 变更记录
  | 文件路径 | 修改类型 | 说明 |
  |---------|---------|------|
  | src/components/auth/ | 新增 | 认证模块组件 |
  ```
</example>

<example type="invalid">
  **错误的文档管理方式**：
  ```markdown
  # 模块文档 (删除了原有的变更历史)
  
  完全重写了文档内容，没有参考README.md
  没有添加更新标记
  直接删除了历史版本信息
  ```
  
  **错误的任务管理**：
  - 创建重复的任务文件而不使用现有的TASK-005
  - 修改代码但不在变更记录表格中记录
  - 完成任务但不更新状态和添加总结
</example>















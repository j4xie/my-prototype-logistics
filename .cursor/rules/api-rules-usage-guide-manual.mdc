---
description: 
globs: 
alwaysApply: false
---
# API开发统一管理规则

<!-- created: 2025-01-15 -->
<!-- enhanced: 2025-02-02 -->
<!-- version: 2.0.0 -->
<!-- authority: API领域子主控规则，统一管理所有API相关开发活动 -->

## 🎯 **API任务智能路由** (10秒内确定适用规则)

| API任务场景 | 应用规则 | 关键标识词 |
|----|----|----|
| **接口设计、文档编写、架构规划** | `api-interface-design-agent` | 设计、文档、架构、规范 |
| **调用实现、集成开发、问题修复** | `api-integration-agent` | 实现、调用、集成、修复 |
| **规则选择、任务规划、指导咨询** | `本文件` | 规则选择、指导、咨询 |

## 📚 **API开发核心原则** (适用：所有API相关开发)

### **设计原则**
- **一致性优先**：所有API接口遵循统一的设计模式和命名规范
- **向后兼容**：新版本API必须兼容现有客户端调用
- **错误处理标准化**：统一的错误码、错误信息和异常处理机制
- **安全性内置**：认证、授权、数据验证和敏感信息保护
- **文档驱动开发**：先文档后代码，文档与实现保持同步

### **实现原则**
- **幂等性保证**：关键操作支持重复调用而不产生副作用
- **性能优化**：合理的缓存策略、分页机制和响应时间优化
- **监控可观测**：完整的日志记录、性能指标和错误追踪
- **测试覆盖**：单元测试、集成测试和端到端测试
- **渐进增强**：功能逐步完善，避免大爆炸式发布

## 🔄 **API开发标准工作流程**

### **阶段1：需求分析与设计** (使用 `api-interface-design-agent`)
- **接口定义**：明确输入输出格式、数据结构和业务逻辑
- **文档编写**：API规范文档、使用示例和错误处理说明
- **架构设计**：接口层次结构、依赖关系和扩展性考虑
- **安全评估**：权限设计、数据保护和风险评估

### **阶段2：开发与实现** (使用 `api-integration-agent`)
- **代码实现**：按照设计文档进行接口开发
- **客户端集成**：实现API调用和错误处理逻辑
- **测试开发**：编写完整的测试用例覆盖
- **性能优化**：响应时间和资源使用优化

### **阶段3：验证与部署**
- **功能验证**：确保所有接口按预期工作
- **性能测试**：压力测试和性能基准验证
- **安全测试**：渗透测试和安全漏洞检查
- **文档更新**：确保文档与最终实现一致

### **阶段4：维护与监控**
- **监控部署**：API调用监控和性能指标收集
- **问题响应**：快速定位和解决API问题
- **版本管理**：API版本迭代和兼容性维护
- **用户支持**：开发者文档和技术支持

## 📊 **API质量标准**

### **设计质量指标**
- ✅ **接口一致性**：命名规范、数据格式、错误处理统一
- ✅ **文档完整性**：所有接口有完整说明和示例
- ✅ **安全性检查**：认证授权机制完善
- ✅ **扩展性设计**：支持未来功能扩展和版本演进

### **实现质量指标**
- ✅ **代码质量**：清晰的结构、完善的注释和错误处理
- ✅ **测试覆盖**：单元测试、集成测试覆盖率 >80%
- ✅ **性能指标**：响应时间 <500ms，并发支持 >100 请求/秒
- ✅ **监控完备**：日志记录、错误追踪、性能监控

## 🛠️ **专业领域深度指导**

### **复杂API设计场景** → 引用 `api-interface-design-agent`
- 微服务架构下的API网关设计
- RESTful vs GraphQL 选择决策
- API版本管理和向后兼容策略
- 大规模API文档管理和维护

### **高级集成开发场景** → 引用 `api-integration-agent`
- 异步API调用和回调处理
- API错误重试和熔断机制
- 高并发场景下的性能优化
- 复杂数据同步和一致性保证

## 🎛️ **特殊场景处理指南**

### **API重构项目**
```markdown
场景：现有API需要重构或升级
→ 先使用 api-interface-design-agent 重新设计
→ 再使用 api-integration-agent 实现迁移
→ 重点关注向后兼容和平滑切换
```

### **API问题排查**
```markdown
场景：API调用出现问题或性能瓶颈
→ 使用 api-integration-agent 进行问题诊断
→ 如需架构调整，再引用 api-interface-design-agent
→ 建立问题复现和回归测试机制
```

### **新API开发**
```markdown
场景：从零开始开发新的API模块
→ 使用 api-interface-design-agent 完成设计阶段
→ 使用 api-integration-agent 完成实现阶段
→ 遵循标准工作流程的四个阶段
```

## 📋 **API开发检查清单**

### **设计阶段检查**
- [ ] 接口命名符合团队规范
- [ ] 数据格式和错误码标准化
- [ ] 安全认证和授权机制设计
- [ ] API文档完整且示例清晰
- [ ] 性能和扩展性需求明确

### **实现阶段检查**
- [ ] 代码结构清晰，注释完善
- [ ] 错误处理覆盖所有异常场景
- [ ] 单元测试和集成测试完整
- [ ] 性能指标满足预设要求
- [ ] 日志记录和监控接入完成

### **部署阶段检查**
- [ ] API部署环境配置正确
- [ ] 监控告警机制正常工作
- [ ] 文档部署并可正常访问
- [ ] 客户端集成测试通过
- [ ] 回滚机制和应急预案就绪

## 📖 **使用说明**

### **首次使用**
1. 根据任务类型选择对应的专业规则
2. 遵循标准工作流程的四个阶段
3. 使用质量标准和检查清单确保完整性

### **规则选择决策树**
```
API任务 → 需要设计/文档？
    ↓ 是
    api-interface-design-agent
    ↓ 否
    需要实现/集成？
    ↓ 是  
    api-integration-agent
    ↓ 否
    规则选择困难？
    ↓ 是
    本文件(api-rules-usage-guide-manual)
```

### **与主控规则的协同**
- 本规则专注于API领域的专业指导
- 与 `development-management-unified` 协同工作
- 遵循项目级别的管理规范和质量标准

---

**维护信息**：
- **原创建**：2025-01-15
- **重大增强**：2025-02-02
- **下次review**：根据使用反馈和API技术发展
- **专业领域状态**：API设计和集成规则已完善并保持最新

---
description: 当需要明确使用哪个API相关规则时，参考本指南进行选择
globs: 
alwaysApply: false
---
# API规则使用指南

## 使用场景
当需要明确使用哪个API相关规则时，参考本指南进行选择

## 🎯 规则选择流程图

```
开始API相关工作
       ↓
   是否需要设计接口？
    ↙        ↘
  是          否
   ↓          ↓
设计阶段     开发阶段
   ↓          ↓
使用API接口  使用API集成
设计规范     代理规则
```

## 📋 两个API规则详细对比

### 1️⃣ api-interface-design-agent.mdc
**🎯 职责**: API **设计和规范制定**

**🔍 使用时机**:
- ✅ **新项目启动** - 制定API架构蓝图
- ✅ **新功能设计** - 确定接口URL和数据结构  
- ✅ **前后端协商** - 确认接口契约
- ✅ **API文档编写** - 规范接口定义
- ✅ **接口评审** - 检查设计是否符合RESTful规范

**📊 输出成果**:
- API接口文档 (URL、参数、响应格式)
- 数据模型定义 (TypeScript接口)
- 业务域划分 (认证域、溯源域等)
- 错误码定义
- 接口规范文档

**🎨 实际例子**:
```markdown
需要设计"农产品质检"功能 → 使用此规则

输出:
POST /api/v1/quality-inspections
GET /api/v1/quality-inspections/{id}
数据模型: QualityInspection接口
错误码: INSPECTION_NOT_FOUND
```

### 2️⃣ api-integration-agent.mdc  
**🎯 职责**: API **开发实现和集成**

**🔍 使用时机**:
- ✅ **实现API客户端** - 封装HTTP请求
- ✅ **创建Service层** - 业务逻辑封装
- ✅ **环境配置** - Mock/开发/生产环境切换
- ✅ **错误处理** - 实现重试和容错机制
- ✅ **性能优化** - 缓存、批量请求
- ✅ **测试编写** - API功能验证

**📊 输出成果**:
- Service类实现 (TraceService、AuthService)
- 环境配置代码 (getApiConfig)
- 错误处理逻辑 (ApiError、重试机制)
- TypeScript类型安全封装
- 测试用例
- 性能优化代码

**🎨 实际例子**:
```typescript
有了质检API设计 → 使用此规则实现

输出:
export class QualityInspectionService extends BaseApiService {
  async createInspection(data: InspectionCreateRequest) {
    return this.handleRequest(() =>
      this.apiClient.post('/quality-inspections', data)
    );
  }
}
```

## 🔄 典型工作流程

### 场景1: 全新功能开发
1. **第一步** → 使用 `api-interface-design-agent`
   - 设计API接口规范
   - 定义数据模型
   - 确认URL结构

2. **第二步** → 使用 `api-integration-agent`  
   - 实现API客户端
   - 创建Service类
   - 配置环境切换

### 场景2: 修复API问题
- **BUG修复** → 使用 `api-integration-agent`
- **接口设计调整** → 使用 `api-interface-design-agent`

### 场景3: 性能优化
- **缓存、重试、批量请求** → 使用 `api-integration-agent`

### 场景4: 文档更新
- **接口规范文档** → 使用 `api-interface-design-agent`
- **使用说明文档** → 使用 `api-integration-agent`

## ⚡ 快速判断表

| 问题类型 | 使用规则 | 关键标识 |
|---------|---------|---------|
| "设计一个API接口" | api-interface-design | 关键词：设计、规范、文档 |
| "实现API调用" | api-integration | 关键词：实现、代码、Service |
| "API返回什么数据？" | api-interface-design | 关键词：数据结构、响应格式 |
| "如何调用API？" | api-integration | 关键词：调用方法、错误处理 |
| "Mock API怎么用？" | api-integration | 关键词：Mock、环境、配置 |
| "接口URL规范？" | api-interface-design | 关键词：URL、RESTful |

## 🎯 记忆口诀

```
设计问规范 → api-interface-design-agent
实现问代码 → api-integration-agent

想法变文档 → design规则  
文档变代码 → integration规则
```

## 🔧 常见混淆情况

### ❌ 错误使用
- 用design规则写具体代码实现
- 用integration规则设计接口规范

### ✅ 正确使用  
- design规则：专注接口定义和规范
- integration规则：专注代码实现和集成

## 示例

<example>
  **正确的规则选择**：
  
  **情况1**: "我需要设计用户登录API的接口"
  → 使用 `api-interface-design-agent`
  → 输出: POST /api/v1/auth/login, 请求参数定义, 响应格式规范
  
  **情况2**: "我需要实现用户登录功能的前端代码"  
  → 使用 `api-integration-agent`
  → 输出: AuthService类实现, 错误处理逻辑, TypeScript类型定义
  
  **情况3**: "登录API已经设计好了，现在要写调用代码"
  → 使用 `api-integration-agent`
</example>

<example type="invalid">
  **错误的规则选择**：
  
  **错误1**: 用design规则写Service类代码
  → 应该用integration规则
  
  **错误2**: 用integration规则设计API URL结构  
  → 应该用design规则
  
  **错误3**: 不知道选择哪个，两个都用
  → 应该明确当前阶段：设计还是实现
</example>


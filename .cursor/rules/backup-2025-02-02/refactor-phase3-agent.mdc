---
description: 
globs: 
alwaysApply: false
---
# Phase-3 技术栈现代化任务管理代理规则

## 🎯 **Phase-3规则使用指南**

### **规则选择表**
| 工作内容 | 使用规则 | 关键标识词 |
|----------|----------|-----------|
| 开始Phase-3、任务规划、进度跟踪 | `refactor-phase3-agent` | 规划、启动、协调、进度 |
| 架构重构、技术栈升级、债务清理 | `refactor-phase3-core-agent` | 重构、迁移、技术栈、债务 |
| 任务验证、功能测试、质疑响应 | `refactor-phase3-validation-agent` | 测试、验证、质疑、功能 |

### **典型工作流程**
```bash
1. 任务启动 → 使用 refactor-phase3-agent (当前规则)
   "开始TASK-P3-016A" / "Phase-3进展如何"

2. 执行变更 → 使用 refactor-phase3-core-agent  
   "修复useApi Hook" / "迁移到Zustand"

3. 验证结果 → 使用 refactor-phase3-validation-agent
   "验证任务完成" / "用户质疑功能"
```

### **快速判断方法**
- **我要做什么？** → `refactor-phase3-agent` (任务管理) - **当前规则**
- **我在改代码** → `refactor-phase3-core-agent` (架构变更)  
- **我要测试验证** → `refactor-phase3-validation-agent` (验证流程)

---

## 🎯 **Phase-3状态文档结构**

### **🏆 单一权威来源** (必须首先阅读)
**主文档**: `refactor/phase-3/PHASE-3-MASTER-STATUS.md`
- 核心状态概览 (整体完成度、关键任务状态)
- 重要状态变更记录 (P0问题修复突破)  
- 快速状态查询 (当前可做/不可做事项)
- AI上下文优化 (单点信息源，减少文档负担)

### **📋 详细信息文档** (按需要引用)
当需要深入了解特定方面时，从主文档引用以下详细文档：

**技术细节**:
- `PHASE-3-COMPREHENSIVE-PLAN.md` - 问题分析和技术细节
- `TASK-P3-016A-真实状态追踪.md` - 具体任务实时状态
- `TASK-P3-016A-标准化工作清单.md` - 任务执行清单

**规划和工作计划**:
- `PHASE-3-COMPREHENSIVE-PLAN.md` - 完整任务列表和规划
- `PHASE-3-COMPREHENSIVE-PLAN.md` - 工作执行计划
- `PHASE-3-COMPREHENSIVE-PLAN.md` - 架构恢复计划

**变更和历史**:
- `REFACTOR-PHASE3-CHANGELOG.md` - 技术变更日志
- `PHASE-3-STATUS-UPDATE.md` - 历史状态更新

## 📋 **Phase-3工作流程3阶段标准**

### **Stage 1 - 任务启动确认** (2-3分钟)
```bash
1. 快速概览 → 读取 PHASE-3-STATUS-UPDATE.md
   - 确认当前阶段整体状态
   - 查看重要变更提醒
   - 获取快速导航信息

2. 权威状态 → 读取 PHASE-3-MASTER-STATUS.md  
   - 确认具体任务状态
   - 获取权威完成度数据
   - 检查依赖任务状态

3. 任务规划 → 基于状态制定执行计划
   - 确定当前可执行的任务
   - 评估任务依赖关系
   - 制定具体执行步骤
```

### **Stage 2 - 开发执行** (主要工作时间)
```bash
1. 技术开发 → 使用 refactor-phase3-core-agent
   - 执行具体的架构变更
   - 遵循技术栈现代化标准
   - 实施代码重构和优化

2. 5层验证执行 → 每个节点完成后验证
   - Build验证 (npm run build)
   - TypeScript检查 (tsc --noEmit) 
   - 测试运行 (npm test)
   - 开发服务器 (npm run dev)
   - 功能验证 (实际操作)

3. 实时状态更新 → 及时记录进展和问题
   - 记录技术问题和解决方案
   - 更新任务执行进度
   - 标记完成的里程碑
```

### **Stage 3 - 任务完成确认** (5-10分钟)
```bash
1. 完整验证 → 使用 refactor-phase3-validation-agent
   - 执行完整的回归测试
   - 验证所有功能正常
   - 确认质量门禁通过

2. 文档同步更新 → 严格按顺序更新
   - PHASE-3-MASTER-STATUS.md (权威状态)
   - REFACTOR-PHASE3-CHANGELOG.md (变更记录)
   - PHASE-3-STATUS-UPDATE.md (快速概览)

3. 状态标记完成 → 基于实际验证结果
   - 仅在所有验证通过后标记完成
   - 记录完成时间和验证证据
   - 启动下一个任务的依赖检查
```

### **🤖 AI使用指导**
```bash
# 标准工作流程
1. **快速入口**: refactor/phase-3/PHASE-3-STATUS-UPDATE.md (2-3分钟)
   - 获取整体状态概览和重要提醒
   - 确定需要深入了解的领域
   - 节省AI上下文处理时间

2. **权威状态**: refactor/phase-3/PHASE-3-MASTER-STATUS.md (3-5分钟)
   - 获取权威完成度数据和具体任务状态
   - 确认当前可执行的任务列表
   - 检查任务依赖关系

3. **按需深入**: 根据master文档中的引用链接
   - 技术问题 → 查看COMPREHENSIVE-PLAN.md  
   - 任务详情 → 查看具体TASK文档
   - 变更历史 → 查看CHANGELOG.md

4. **避免多文档扫描**: 不要同时读取多个Phase-3文档
   - 减少AI上下文负担
   - 避免文档间的不一致性
   - 提高信息获取效率和准确性
```

## 使用场景
- Phase-3技术栈现代化阶段的任务管理和协调
- 按照项目重构方案执行技术栈现代化
- 避免重复工作并确保使用现有任务架构
- 协调核心架构变更和验证流程

## 🎯 **Phase-3总体目标与策略**

### **核心目标**
- **技术栈现代化**: 从传统架构迁移到 Next.js 14 + TypeScript + 现代状态管理
- **架构简化**: 移除冗余模块，建立清晰的架构层次
- **质量提升**: 建立完善的类型安全和错误处理机制
- **性能优化**: 利用现代框架特性提升应用性能

### **实施策略**
- **渐进式迁移**: 按模块逐步进行现代化，避免大规模破坏性变更
- **质量优先**: 每个变更都必须通过完整的验证流程
- **向后兼容**: 确保现有功能在迁移过程中保持可用
- **文档同步**: 及时更新架构文档和API文档

## 📋 **Phase-3任务架构**

### **任务分类体系**
```bash
TASK-P3-0XX: 基础架构现代化
- P3-001: Next.js 14基础架构搭建
- P3-002: TypeScript严格模式配置
- P3-003: 现代化构建系统配置

TASK-P3-1XX: 核心模块现代化
- P3-101: 状态管理现代化 (Zustand + React Query)
- P3-102: API客户端现代化
- P3-103: 认证系统现代化
- P3-104: 路由系统现代化

TASK-P3-2XX: 业务模块现代化
- P3-201: 农业模块现代化
- P3-202: 加工模块现代化
- P3-203: 物流模块现代化
- P3-204: 溯源模块现代化

TASK-P3-3XX: 质量保障与优化
- P3-301: 测试体系建立
- P3-302: 性能优化
- P3-303: 错误处理完善
- P3-304: 文档更新
```

## 🔄 **任务执行流程**

### **标准任务执行步骤**
```bash
步骤1: 任务分析与规划
- [ ] 分析任务需求和依赖关系
- [ ] 制定详细实施计划
- [ ] 识别潜在风险和缓解措施
- [ ] 准备验证标准和测试用例

步骤2: 实施前准备
- [ ] 检查前置任务完成状态
- [ ] 备份当前代码状态
- [ ] 准备开发环境
- [ ] 通知相关团队成员

步骤3: 渐进式实施
- [ ] 按计划逐步实施变更
- [ ] 每个阶段完成后进行验证
- [ ] 及时修复发现的问题
- [ ] 更新相关文档

步骤4: 质量验证
- [ ] 执行完整的验证流程 (参考 refactor-phase3-validation-agent)
- [ ] 通过所有质量门禁
- [ ] 进行回归测试
- [ ] 验证性能基准

步骤5: 集成与交付
- [ ] 与其他模块进行集成测试
- [ ] 更新架构文档
- [ ] 提交代码变更
- [ ] 标记任务完成
```

## 🔗 **相关规则引用**

### **核心架构变更**
- 使用 `refactor-phase3-core-agent` 规则处理架构变更和质量控制
- 严格遵循架构简化和重构的完整执行原则
- 执行技术债务管理和架构决策记录

### **验证流程**
- 使用 `refactor-phase3-validation-agent` 规则执行验证流程
- 按照5层验证标准进行系统性验证
- 特别关注核心组件的功能验证

### **项目管理**
- 使用 `project-management-auto` 规则进行项目状态管理
- 执行架构决策影响跟踪机制
- 防止过度乐观的项目状态管理

## 关键规则
- 严格按照任务依赖关系执行，不允许跳过前置任务
- 每个任务完成前必须通过完整的验证流程
- 及时识别和处理风险，建立应急处理机制
- 保持项目状态的真实性和透明度
- 协调核心架构变更和验证流程的执行

## 示例

<example>
**正确的任务执行流程**：
1. **任务启动**：
   - 检查前置任务P3-015已完成
   - 分析TASK-P3-016A的具体需求
   - 制定详细实施计划

2. **渐进式实施**：
   - 先修复useApi Hook的无限循环问题
   - 每个修复完成后立即验证
   - 及时更新任务状态

3. **质量验证**：
   - 执行5层验证流程
   - 通过所有质量门禁
   - 记录验证结果

4. **任务完成**：
   - 更新任务状态为已完成
   - 启动下一个任务P3-016B
   - 更新项目进度报告
</example>

<example type="invalid">
**错误的任务执行方式**：
1. **跳过依赖检查**：
   - 在P3-015未完成时启动P3-016
   - 忽视任务间的依赖关系
   - 导致集成问题

2. **不完整的验证**：
   - 只检查代码变更不验证功能
   - 跳过质量门禁检查
   - 基于假设声称任务完成

3. **状态管理混乱**：
   - 不及时更新任务状态
   - 隐瞒技术债务和问题
   - 过度乐观的进度报告
</example>





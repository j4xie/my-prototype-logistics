---
description: 
globs: 
alwaysApply: false
---
# 综合开发工作流程规范

## 🎯 **规则选择指导** (遵循单一信息源原则)

### **使用场景判断**
- **开始新任务、制定开发计划** → 使用本规则 (comprehensive-development-workflow-auto)
- **验证任务完成、回归测试** → 使用 comprehensive-regression-testing-agent

### **快速判断方法**
```bash
用户说: "开始新的开发任务" → 本规则
用户说: "制定开发计划" → 本规则  
用户说: "需要工作流程指导" → 本规则
用户说: "验证任务完成" → comprehensive-regression-testing-agent
用户说: "检查回归问题" → comprehensive-regression-testing-agent
用户说: "质疑项目状态" → comprehensive-regression-testing-agent
```

### **职责分工**
- ✅ **本规则负责**: 5阶段开发生命周期、任务规划、文档管理、工作流程
- ❌ **本规则不负责**: 具体验证技术标准 (由 comprehensive-regression-testing-agent 定义)

## 依赖规则
本规则整合并依赖以下专门规则，请确保同时遵循：
- `project-management-auto` - 项目文档管理与目录结构同步
- `comprehensive-regression-testing-agent` - 5层验证标准与回归测试
- `docs-reading-guide-agent` - 任务启动时的文档阅读指导
- `task-management-manual` - 任务创建与管理规范
- `test-validation-standards-agent` - 验证脚本创建标准
- `api-rules-usage-guide-manual` - API任务规则选择指导

## 使用场景
- 开始任何新的开发任务时
- 进行重构或架构变更时
- 需要工作流程和项目管理指导时
- 制定开发计划和任务规划时
- 需要状态验证和质量控制时
- 防止过度乐观和虚假进度报告时

## 🎯 **5阶段标准化开发生命周期**

### **阶段1: 任务启动与规划** (Task Planning Phase)

#### **1.1 强制文档阅读检查 (遵循 `docs-reading-guide-agent`)**
```bash
# 任务类型检查表
□ 架构任务 → 必读: docs/architecture/design-principles.md
□ API任务 → 必读: docs/api/overview.md + api-rules-usage-guide-manual
□ 组件任务 → 参考: docs/components/overview.md
□ 重构任务 → 必读: 项目重构方案.md + refactor-phase2-agent
□ 新功能任务 → 查看: 相关PRD文档
```

#### **1.2 任务规范化创建 (遵循 `task-management-manual`)**
```markdown
# 任务创建标准流程
1. 检查现有任务文件，避免重复创建
2. 使用标准命名: TASK-XXX_任务描述.md  
3. 明确验收标准，特别是技术验证标准
4. 预估验证工作量和时间
5. 同步更新目录结构文档 (DIRECTORY_STRUCTURE.md)
```

#### **🆕 1.2.1 前端任务启动增强清单**
对于前端重构、UI开发等任务，在标准流程基础上增加：
```markdown
# 前端任务专用步骤
4. **Mock API依赖分析与策略确定**
   - 列出任务强依赖的API端点及其预期行为
   - 确定Mock策略：使用现有Mock / 新增Mock / 修改现有Mock
   - 明确Mock数据管理方式和测试场景覆盖
   - 评估Mock环境搭建和维护成本

5. **前端特定验收标准明确**
   - UI组件单元测试覆盖率要求（建议≥80%）
   - 关键用户流程集成测试要求
   - Mock API场景测试覆盖度要求
   - 跨浏览器兼容性测试范围（如适用）

6. 预估验证工作量和时间（包含Mock准备和验证时间）
7. 同步更新目录结构文档 (DIRECTORY_STRUCTURE.md)
```

#### **🆕 1.2.2 前端任务启动检查清单**
- [ ] Mock API依赖已分析并记录在任务文档中
- [ ] Mock API策略（新建/修改/复用）已初步确定
- [ ] 如需新建或重要修改Mock，已与相关人员沟通
- [ ] 前端测试策略（单元测试+集成测试）已明确
- [ ] UI设计规范和组件库使用方式已确认

#### **1.3 API任务专门处理 (遵循 `api-rules-usage-guide-manual`)**
```bash
# API任务规则选择
设计API接口 → 使用 api-interface-design-agent
实现API调用 → 使用 api-integration-agent  
修复API问题 → 使用 api-integration-agent
更新API文档 → 使用 api-interface-design-agent
```

### **阶段2: 开发与实施** (Development Phase)

#### **2.1 架构规范遵循 (遵循 `refactor-phase2-agent`)**
```bash
# 技术栈标准 (基于项目重构方案)
前端框架: React + TypeScript
状态管理: Context + Zustand
构建工具: Next.js
测试框架: Jest + React Testing Library
```

#### **2.2 实时变更记录 (遵循 `project-management-auto`)**
```markdown
# 强制变更记录机制
| 文件路径 | 修改类型 | 说明 | 时间戳 |
|---------|---------|------|-------|
| src/components/NewComponent.tsx | 新增 | 创建用户界面组件 | 2025-01-26 |
| web-app/src/hooks/useApi.ts | 修改 | 修复内存泄漏问题 | 2025-01-26 |
```

#### **2.3 UI设计规范 (遵循 `ui-design-system-auto`)**
```bash
# Neo Minimal iOS-Style Admin UI标准
布局: max-w-[390px] mx-auto
卡片: bg-white rounded-lg shadow-sm p-4
交互: hover:shadow-md hover:scale-[1.03] 
无障碍: aria-label, tabindex, 语义化标签
```

#### **🆕 2.4 前端重构与开发特别指导**
针对前端重构时间过长和Mock API瓶颈的优化策略：

##### **小型迭代与验证策略**
- **拆分大型重构**: 将大型前端重构拆分为多个可独立验证的小型迭代（建议每个迭代1-3天完成）
- **每迭代完整交付**: 每个迭代都应有清晰的UI功能交付，并能在稳定的Mock API环境下进行充分测试
- **快速反馈循环**: 避免在技术债务上无限纠缠，优先实现有价值的业务功能

##### **Mock优先开发模式**
- **契约先行**: 在后端API尚未稳定时，前端应基于明确的API契约和完善的Mock进行开发
- **环境一致性**: 确保开发环境和测试环境使用相同的Mock配置，避免环境差异
- **场景覆盖**: Mock应覆盖关键业务场景，包括成功流程和各种异常情况

##### **代码审查增强关注点**
除了业务逻辑和代码风格，代码审查还应关注：
- **测试质量**: 相关测试用例是否充分，是否有效利用了Mock机制
- **Mock合理性**: Mock的实现是否合理、易于维护，是否覆盖了关键场景
- **组件可测试性**: 组件设计是否有利于解耦和独立测试（依赖注入、props传递等）
- **性能影响**: 重构是否引入性能问题，是否影响用户体验

### **阶段3: 验证与测试** (Validation Phase) - **核心阶段**

#### **🆕 3.0 前置步骤：Mock API环境准备与验证**
在正式开始UI逻辑的功能测试和验证前，必须确保Mock环境已按预期搭建：

##### **Mock环境准备检查清单**
- [ ] **Mock服务可访问**: 确认Mock API服务正常启动并可访问
- [ ] **核心端点验证**: 验证任务依赖的关键API端点返回预期响应
- [ ] **场景配置确认**: 确认所需的测试场景（成功/失败/边缘情况）都已配置
- [ ] **环境一致性**: 确保开发环境和测试环境的Mock配置一致
- [ ] **性能检查**: Mock响应时间在合理范围内（<100ms）

##### **Mock环境问题处理原则**
- 🚨 **优先解决Mock问题**: 如发现Mock环境与预期不符，应优先解决Mock问题而非绕过
- 🔄 **完整重新验证**: Mock问题修复后，需要重新执行相关的UI功能测试
- 📝 **问题记录**: 记录Mock环境问题和解决方案，避免类似问题重复出现

#### **3.1 任务导向验证脚本 (遵循 `test-validation-standards-agent`)**
```bash
# 强制创建验证脚本
路径: scripts/validation/task-p3-016a/comprehensive-validation.js (示例)
# 或根据具体任务ID: scripts/validation/task-{新任务ID}/comprehensive-validation.js
内容: 包含VALIDATION_META元数据
功能: 自动化执行5层验证标准
报告: 生成详细验证报告JSON

# 🆕 前端任务验证脚本增强要求:
# - 包含Mock环境健康检查步骤
# - 包含Mock API场景验证说明
# - 提供Mock环境故障的调试指引
```

#### **3.2 5层验证标准强制执行 (遵循 `comprehensive-regression-testing-agent.mdc`)**
```bash
# 验证执行要求 (详细标准请参考权威来源)
验证标准权威定义: comprehensive-regression-testing-agent.mdc
执行要求: 必须按照权威文档中定义的5层验证标准执行
通过标准: TypeScript(100%) + Build(100%) + Lint(95%) + Test(95%) + Integration(100%)
回归检查: 强制执行comprehensive regression testing protocols

详细验证标准和执行机制请参阅: comprehensive-regression-testing-agent.mdc
```

#### **3.3 回归测试强制要求** ⭐ **引用权威来源**
```bash
# 回归测试执行协议 (详细规则请参考权威来源)
权威来源: comprehensive-regression-testing-agent.mdc 
核心要求: 防止已修复问题重新出现
执行标准: 按照权威文档中的comprehensive regression testing protocols执行

具体回归测试机制和检查标准请参阅: comprehensive-regression-testing-agent.mdc
```

#### **3.4 用户质疑强制响应协议**
```bash
# 用户质疑时立即执行
1. 停止理论辩护，承认可能过于乐观
2. 立即运行完整5层验证脚本  
3. 100%基于实际验证结果回应
4. 修正所有相关文档状态
5. 记录质疑过程作为改进案例
```

### **阶段4: 状态更新与报告** (Status Management Phase)

#### **4.1 基于证据的状态管理 (遵循 `project-management-auto`)**
```bash
# 状态更新规则
技术验证优先: 必须通过5层验证才能声称"完成"
问题透明化: 验证失败立即记录到问题清单
状态及时修正: 发现虚假完成度立即修正所有文档
单一信息源: 以权威文档为准，其他文档仅引用

# 🎯 强制目录结构同步 (遵循 project-management-auto)
任何目录结构变更时必须同步更新:
1. DIRECTORY_STRUCTURE.md (保持当前最新目录结构)
2. docs/directory-structure-changelog.md (记录变更历史)
变更类型: 新增文件/目录、重命名、移动、删除
记录格式: 包含变更原因、影响评估、变更详情
```

#### **4.2 文档一致性管理 (遵循 `project-management-auto`)**
```bash
# 文档层次结构
权威来源: refactor/REFACTOR_LOG.md (详细进度)
项目概览: TASKS.md (高级摘要+引用)
阶段详细: refactor/phase-2/PHASE-2-WORK-PLAN.md (阶段二) | refactor/phase-3/PHASE-3-MASTER-STATUS.md (阶段三)
目录结构: DIRECTORY_STRUCTURE.md (仅当前结构)
变更历史: docs/directory-structure-changelog.md

# Phase-3专用文档结构 (单一权威来源)
Phase-3权威: refactor/phase-3/PHASE-3-MASTER-STATUS.md (AI优先使用)

**AI阅读优先级**:
1. 首先且仅读取权威文档获取核心状态
2. 如需详细信息，按权威文档中的引用链接定向访问
3. 避免同时读取多个Phase-3文档造成上下文混乱

Phase-3详细: refactor/phase-3/*.md (通过MASTER-STATUS引用)
- PHASE-3-PROBLEM-ANALYSIS.md (问题分析和技术细节)
- TASK-P3-016A-真实状态追踪.md (具体任务实时状态)
- PHASE-3-PLANNING.md (完整任务列表规划)
- PHASE-3-WORK-PLAN.md (工作执行计划)
- PHASE-3-ARCHITECTURE-RESTORATION-PLAN-A.md (架构恢复计划)
- REFACTOR-PHASE3-CHANGELOG.md (技术变更日志)
```

### **阶段5: 回顾与持续改进** (Review & Improvement Phase)

#### **5.1 规则遵循检查 (遵循 `cursor-rules`)**
```bash
# 定期规则审计
□ 验证脚本是否按task-ID创建
□ 文档是否遵循单一信息源原则  
□ API任务是否选择了正确的规则
□ 变更记录是否完整同步
□ 用户质疑是否得到正确响应
```

#### **5.2 防呆机制建立**
```bash
# 自动化检查点
Git Hooks: 提交前运行基础验证
CI/CD: 自动执行5层验证
文档检查: 定期检查文档一致性
质疑记录: 建立质疑案例库改进流程
```

#### **🆕 5.3 自动化推进重点**
基于Mock API稳定化的自动化优化策略：

##### **前端测试自动化优先级**
- **第一优先级**: 核心UI组件单元测试（React Testing Library + Jest）
- **第二优先级**: 关键用户流程E2E测试（Playwright/Cypress，运行在Mock环境）
- **第三优先级**: 视觉回归测试（如Storybook + Chromatic）
- **第四优先级**: 性能测试和可访问性测试

##### **CI/CD集成策略**
- **门禁设置**: 将前端自动化测试作为代码合并和版本发布的强制门禁
- **并行执行**: 合理配置测试并行度，在保证稳定性的前提下优化执行时间
- **失败处理**: 建立测试失败的快速定位和修复机制
- **报告生成**: 自动生成测试报告和覆盖率报告，便于质量监控

##### **Mock环境自动化管理**
- **环境一致性**: 确保CI/CD环境中的Mock配置与本地开发环境一致
- **数据更新**: 建立Mock数据的版本管理和自动更新机制
- **健康监控**: 自动监控Mock服务状态，及时发现和解决问题

## 🚨 **防止过度乐观的核心机制**

### **验证门禁制度**
```bash
# 完成度评估标准
0-25%: 任务规划完成，开始开发
25-50%: 核心代码完成，部分验证通过
50-75%: 主要功能完成，多数验证通过  
75-95%: 所有功能完成，5层验证全部通过
95-100%: 用户验收测试通过，文档完整
```

### **状态声明限制**
```bash
# 严禁的状态声明模式
❌ 基于理论分析的完成度
❌ 基于部分成功的整体评估  
❌ 跳过验证层级的状态更新
❌ 忽视测试失败的"完成"声明
❌ 不基于验证脚本结果的报告
```

## 📋 **标准化工作清单模板**

### **任务启动清单**
```markdown
## 任务启动检查表
- [ ] 阅读相关docs文档 (根据任务类型)
- [ ] 确认任务是否已存在，避免重复创建
- [ ] 明确技术验收标准 (5层验证)
- [ ] 选择正确的API规则 (如适用)
- [ ] 创建任务验证脚本目录
- [ ] 更新目录结构文档
```

### **开发过程清单**
```markdown
## 开发过程检查表  
- [ ] 遵循推荐技术栈标准
- [ ] 实时记录代码变更 (变更记录表格)
- [ ] 遵循UI设计系统规范 (如适用)
- [ ] 同步更新相关文档
- [ ] 定期执行基础验证 (tsc, build, lint)
```

### **验证完成清单**
```markdown
## 验证完成检查表
- [ ] 创建完整的comprehensive-validation.js脚本
- [ ] 执行完整5层验证标准
- [ ] 所有验证层级100%通过
- [ ] 生成验证报告并保存
- [ ] 更新任务状态为"已验证"
- [ ] 修正所有相关文档状态
- [ ] 🎯 目录结构同步检查 (project-management-auto)
  - [ ] 如有新增文件/目录，已更新 DIRECTORY_STRUCTURE.md
  - [ ] 已在 docs/directory-structure-changelog.md 记录变更历史
  - [ ] 变更记录包含：原因、影响评估、详细变更内容
```

## 🎯 **最佳实践工作顺序**

### **日常开发工作流**
```bash
1. 晨间检查: 查看权威文档状态 (refactor/REFACTOR_LOG.md)
2. 任务选择: 根据优先级选择下一个任务
3. 文档阅读: 按任务类型阅读必需docs
4. 开发实施: 遵循技术栈标准进行开发
5. 实时记录: 每次代码修改记录到变更表格
6. 阶段验证: 定期执行基础验证 (tsc, build, lint)
7. 完整验证: 功能完成后执行5层验证
8. 状态更新: 基于验证结果更新权威文档
9. 文档同步: 确保所有引用文档一致性
10. 质量回顾: 检查是否遵循所有相关规则
```

### **紧急问题处理流程**
```bash
1. 问题识别: 用户质疑或验证失败
2. 立即停止: 停止基于理论的状态声明
3. 完整验证: 运行comprehensive-validation.js
4. 如实报告: 100%基于验证结果回应
5. 状态修正: 立即修正所有相关文档
6. 根因分析: 分析过度乐观的根本原因
7. 机制改进: 建立防范类似问题的机制
8. 案例记录: 记录到改进案例库
```

## 关键规则
- 任何状态声明必须基于实际验证结果
- 用户质疑时立即启动标准重验流程
- 所有任务必须创建对应的验证脚本
- 严格按照5层验证标准执行
- 维护文档单一信息源原则
- 实时记录所有代码变更
- 遵循推荐技术栈和设计规范

## 示例

<example>
  **正确的综合工作流程执行**：
  
  **TASK-P3-016A React Hook问题修复示例**：
  1. 任务启动: 阅读docs/architecture/design-principles.md
  2. 验证脚本: 创建scripts/validation/task-p3-016a/comprehensive-validation.js
  3. 开发实施: 按React+TypeScript标准修复useApi Hook
  4. 实时记录: 在变更记录表格中记录每次修改
  5. 阶段验证: 修复后立即运行tsc --noEmit检查
  6. 完整验证: 执行5层验证，发现测试失败
  7. 如实报告: "当前0%完成，22个测试套件失败，需要修复Jest配置"
  8. 状态修正: 在refactor/REFACTOR_LOG.md中修正状态
  9. 继续修复: 解决Jest配置和测试问题
  10. 最终验证: 5层验证全部通过后声称"完成"
</example>

<example type="invalid">
  **错误的工作方式**：
  1. 跳过docs文档阅读直接开始开发
  2. 不创建任务验证脚本
  3. 基于构建成功就声称85%完成
  4. 忽视测试失败和内存溢出问题
  5. 在多个文档中维护不同的状态信息
  6. 用户质疑时进行理论辩护而非实际验证
  7. 不记录代码变更和问题
  8. 使用错误的技术栈或设计规范
</example>















---
description:
globs:
alwaysApply: false
---
# Phase-3 核心架构变更代理规则

## 使用场景
- Phase-3技术栈现代化阶段的核心架构变更
- 前端框架迁移和现代化改造
- Next.js + TypeScript + 现代状态管理实施
- 避免重复工作并确保使用现有任务架构
- 处理技术栈迁移中的复杂性管理

## 🚨 **架构变更质量控制规则** (基于Phase-3实际问题经验)

### **架构简化/重构必须完整执行** (无例外)
- ❌ **严禁只删除不重建**: 删除模块后必须立即创建替代方案
- ✅ **配置文件完整性**: 确保删除后重新填充必要配置 (如 `src/config/app.ts`)
- ✅ **依赖链检查**: 修复所有导入错误和模块引用
- ✅ **渐进式变更**: 避免一次性删除过多依赖，采用分步骤迁移

### **严格验收标准** (任务完成前强制检查)
```bash
# 必须100%通过的验收标准
- [ ] npm run build 成功 (0错误)
- [ ] npm run dev 正常启动
- [ ] TypeScript编译通过 (0错误)
- [ ] ESLint检查通过 (警告<10个)
- [ ] 核心功能验证通过
- [ ] 向后兼容性验证
- [ ] 所有导入都被使用 (无未使用导入)
- [ ] 所有函数都有实现体 (无空函数)
```

### **状态报告真实性** (杜绝虚假完成度)
- ❌ **严禁基于预期的完成度报告**: 必须基于实际验证结果
- ✅ **立即修正错误状态**: 发现问题立即修正状态和文档
- ✅ **技术债务如实记录**: 不隐瞒构建错误和功能缺失
- ✅ **验证后再声称完成**: 通过所有验收标准后才能标记为100%

### **回归测试强制要求**
- **每次架构变更后立即验证**: 不允许延后验证
- **功能回归测试必须通过**: 确保现有功能不受影响
- **性能基准不能显著下降**: 构建时间、运行时性能保持合理范围
- **错误处理机制保持完整**: 确保错误边界和异常处理正常工作

## 🏗️ **Phase-3技术栈现代化标准**

### **Next.js 14+ 现代化要求**
- ✅ **App Router架构**: 使用 `app/` 目录结构，不使用 `pages/`
- ✅ **Server Components优先**: 默认使用服务器组件，明确标记客户端组件
- ✅ **TypeScript严格模式**: 启用 `strict: true` 和所有严格检查
- ✅ **现代化构建配置**: 使用最新的 Next.js 配置和优化选项

### **状态管理现代化**
- ✅ **Zustand + React Query**: 使用现代状态管理组合
- ✅ **类型安全状态**: 所有状态都有完整的TypeScript类型定义
- ✅ **状态持久化**: 合理使用localStorage/sessionStorage持久化
- ✅ **状态同步**: 确保客户端和服务器状态同步机制

### **组件架构标准**
- ✅ **组件化设计**: 遵循单一职责原则，组件功能明确
- ✅ **Props类型安全**: 所有组件Props都有完整类型定义
- ✅ **错误边界**: 关键组件包含错误边界处理
- ✅ **性能优化**: 合理使用 `memo`, `useMemo`, `useCallback`

## 🔧 **技术债务管理**

### **债务分类与优先级**
```bash
P0 (阻塞级): 影响构建或核心功能的问题
- 构建失败
- TypeScript编译错误
- 核心API无法调用
- 关键页面无法访问

P1 (高优先级): 影响用户体验的问题
- 性能显著下降
- 功能部分缺失
- 错误处理不完整
- 重要组件异常

P2 (中优先级): 代码质量问题
- ESLint警告过多
- 代码重复
- 类型定义不完整
- 测试覆盖不足

P3 (低优先级): 优化改进项
- 代码风格统一
- 注释完善
- 性能微调
- 文档更新
```

### **债务清零原则**
- ❌ **P0债务不允许累积**: 发现后必须立即解决
- ✅ **P1债务当日解决**: 不允许跨天累积
- ✅ **P2债务周内清理**: 每周末清理完毕
- ✅ **P3债务月度清理**: 每月进行一次集中清理

## 📋 **架构决策记录模板**

### **重大架构变更记录**
```markdown
## 架构决策记录 - [决策编号]

### 基本信息
- **决策日期**: YYYY-MM-DD
- **决策者**: [角色/姓名]
- **影响范围**: [具体模块/文件列表]
- **决策类型**: [架构简化/技术栈升级/模块重构/依赖变更]

### 决策内容
- **变更描述**: [具体的架构变更内容]
- **动机说明**: [为什么做出这个决策]
- **技术考量**: [技术层面的考虑因素]
- **业务影响**: [对业务功能的影响]

### 风险评估
- **技术风险**: [可能的技术问题]
- **时间风险**: [对项目进度的影响]
- **质量风险**: [对代码质量的影响]
- **缓解措施**: [风险缓解策略]

### 实施计划
- **实施步骤**: [详细的实施步骤]
- **验证标准**: [如何验证实施成功]
- **回滚方案**: [如果失败如何回滚]
- **时间安排**: [预期完成时间]
```

## 🎯 **Phase-3特定任务执行原则**

### **任务优先级排序**
1. **P0: 构建系统稳定性** - 确保项目可以正常构建和运行
2. **P1: 核心功能完整性** - 确保关键业务功能正常工作
3. **P2: 技术栈现代化** - 升级到现代技术栈
4. **P3: 代码质量提升** - 改进代码质量和可维护性

### **并行任务管理**
- ✅ **独立模块可并行**: 不同业务模块可以同时进行现代化
- ❌ **核心依赖必须串行**: 基础架构变更必须按顺序进行
- ✅ **增量式交付**: 每个模块完成后立即验证和集成
- ✅ **风险隔离**: 确保一个模块的问题不影响其他模块

### **质量门禁机制**
```bash
# 每个任务完成前必须通过的质量门禁
Gate 1: 编译检查
- TypeScript编译无错误
- 所有导入路径正确
- 类型定义完整

Gate 2: 构建验证
- npm run build 成功
- 生产构建无警告
- 静态资源正确生成

Gate 3: 功能验证
- 核心功能正常工作
- 错误处理机制完整
- 性能符合预期

Gate 4: 集成测试
- 与其他模块集成正常
- 端到端流程验证
- 回归测试通过
```

## 关键规则
- 架构变更必须完整执行，不允许半成品状态
- 所有完成度声明必须基于实际验证结果
- P0级技术债务必须立即解决，不允许累积
- 重大架构决策必须记录动机、风险和缓解措施
- 每次变更后必须通过完整的质量门禁验证

## 示例

<example>
**正确的架构变更流程**：

1. **变更前评估**：
   - 记录当前架构状态
   - 评估变更影响范围
   - 制定详细实施计划
   - 准备回滚方案

2. **渐进式实施**：
   - 按模块逐步进行变更
   - 每个模块完成后立即验证
   - 及时修复发现的问题
   - 更新相关文档

3. **验证和集成**：
   - 通过所有质量门禁
   - 进行回归测试
   - 验证性能基准
   - 更新架构文档
</example>

<example type="invalid">
**错误的架构变更方式**：

1. **一次性大规模变更**：
   - 同时修改多个核心模块
   - 没有中间验证点
   - 缺乏回滚方案

2. **基于假设的完成度报告**：
   - 代码变更完成就声称任务完成
   - 没有实际功能验证
   - 忽视构建错误和警告

3. **技术债务累积**：
   - P0级问题延后处理
   - 多个问题同时存在
   - 缺乏系统性解决方案
</example>

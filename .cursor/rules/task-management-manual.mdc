---
description: 创建新的功能实现任务列表时 - 管理项目进度跟踪时 - 需要结构化任务文档时
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---

# 任务列表管理规范

## 使用场景
- 创建新的功能实现任务列表时
- 管理项目进度跟踪时
- 需要结构化任务文档时

## 关键规则
- 在项目根目录创建任务列表文件：`TASKS.md` 或描述性名称（如 `ASSISTANT_CHAT.md`）
- 包含清晰的标题和功能描述
- 使用标准的任务状态：已完成 `[x]`、进行中 `[ ]`、未来任务 `[ ]`
- 维护"相关文件"部分，记录创建或修改的文件路径和用途
- 实施完成后，立即更新任务状态并标记为 `[x]`
- 添加新发现的任务到适当的部分
- 记录实施细节、架构决策和技术组件
- **创建新目录或文件时必须同步更新目录结构文档**：
  - 更新 [DIRECTORY_STRUCTURE.md](mdc:DIRECTORY_STRUCTURE.md) 保持当前最新目录结构（仅包含：1.根目录结构、2.web-app目录结构、3.目录结构说明表格）
  - 在 [docs/directory-structure-changelog.md](mdc:docs/directory-structure-changelog.md) 记录变更历史（包含：历史更新记录、进展说明、变更详情）

## 任务列表结构模板
```markdown
# 功能名称实现

功能的简要描述和目的。

## 已完成任务

- [x] 已完成的任务1
- [x] 已完成的任务2

## 进行中任务

- [ ] 当前正在进行的任务3
- [ ] 即将完成的任务4

## 未来任务

- [ ] 计划中的任务5
- [ ] 计划中的任务6

## 实施计划

功能实施的详细描述。

### 相关文件

- path/to/file1.ts - 文件用途描述 ✅
- path/to/file2.ts - 文件用途描述
```

## AI更新指导
- 实施重要组件后定期更新任务列表
- 完成任务时将 `[ ]` 改为 `[x]`
- 发现新任务时添加到适当部分
- 保持"相关文件"部分的准确性，包含文件路径和描述
- 为复杂功能记录实施细节
- 逐个实施任务时，先检查下一个要实施的任务
- 实施任务后，更新文件以反映进度

## 示例
<example>
  **正确的任务管理流程**：
  1. 创建 `CHAT_ASSISTANT.md` 任务文件
  2. 列出所有必要的任务和组件
  3. 实施第一个组件后，更新任务状态：
     ```markdown
     ## 已完成任务
     - [x] 创建聊天界面组件
     
     ## 进行中任务
     - [ ] 实施消息发送功能
     
     ### 相关文件
     - src/components/ChatInterface.tsx - 聊天界面主组件 ✅
     ```
  4. 继续下一个任务，重复更新过程
</example>

<example type="invalid">
  **错误的任务管理方式**：
  ```markdown
  ## 任务
  - 做聊天功能
  - 添加一些组件
  
  (缺少具体描述、文件跟踪、状态管理)
  ```
  
  **错误行为**：
  - 实施组件但不更新任务状态
  - 创建文件但不在"相关文件"中记录
  - 任务描述过于模糊，缺少具体的可执行步骤
  - 完成功能后不添加实施总结
</example>









